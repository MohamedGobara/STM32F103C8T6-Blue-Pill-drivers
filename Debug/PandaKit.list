
pandaKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000213c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022dc  080022dc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080022dc  080022dc  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022dc  080022dc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080022e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200000a8  0800238c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800238c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000341e  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001106  00000000  00000000  00023532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000428  00000000  00000000  00024638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036af  00000000  00000000  00024a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058bd  00000000  00000000  0002810f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bb27  00000000  00000000  0002d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000002ea  00000000  00000000  000394f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014e4  00000000  00000000  000397e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0003acc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a8 	.word	0x200000a8
 800014c:	00000000 	.word	0x00000000
 8000150:	08002254 	.word	0x08002254

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000ac 	.word	0x200000ac
 800016c:	08002254 	.word	0x08002254

08000170 <KeyPad_vInit>:
extern GPIO_Pins Keypad_RowsArr[4];

extern GPIO_Pins Keypad_ColuArr[4];

// Define functions to initialize keypad and get key
void KeyPad_vInit(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// Initialize GPIO pins for keypad rows as outputs

	// Assign pin names to keypad row array
	Keypad_RowsArr[0] = row1_config.PIN_Name;
 8000174:	4b1c      	ldr	r3, [pc, #112]	; (80001e8 <KeyPad_vInit+0x78>)
 8000176:	785a      	ldrb	r2, [r3, #1]
 8000178:	4b1c      	ldr	r3, [pc, #112]	; (80001ec <KeyPad_vInit+0x7c>)
 800017a:	701a      	strb	r2, [r3, #0]
	Keypad_RowsArr[1] = row2_config.PIN_Name;
 800017c:	4b1c      	ldr	r3, [pc, #112]	; (80001f0 <KeyPad_vInit+0x80>)
 800017e:	785a      	ldrb	r2, [r3, #1]
 8000180:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <KeyPad_vInit+0x7c>)
 8000182:	705a      	strb	r2, [r3, #1]
	Keypad_RowsArr[2] = row3_config.PIN_Name;
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <KeyPad_vInit+0x84>)
 8000186:	785a      	ldrb	r2, [r3, #1]
 8000188:	4b18      	ldr	r3, [pc, #96]	; (80001ec <KeyPad_vInit+0x7c>)
 800018a:	709a      	strb	r2, [r3, #2]
	Keypad_RowsArr[3] = row4_config.PIN_Name;
 800018c:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <KeyPad_vInit+0x88>)
 800018e:	785a      	ldrb	r2, [r3, #1]
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <KeyPad_vInit+0x7c>)
 8000192:	70da      	strb	r2, [r3, #3]

	// Assign pin names to keypad column array
	Keypad_ColuArr[0] = col1_config.PIN_Name;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <KeyPad_vInit+0x8c>)
 8000196:	785a      	ldrb	r2, [r3, #1]
 8000198:	4b19      	ldr	r3, [pc, #100]	; (8000200 <KeyPad_vInit+0x90>)
 800019a:	701a      	strb	r2, [r3, #0]
	Keypad_ColuArr[1] = col2_config.PIN_Name;
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <KeyPad_vInit+0x94>)
 800019e:	785a      	ldrb	r2, [r3, #1]
 80001a0:	4b17      	ldr	r3, [pc, #92]	; (8000200 <KeyPad_vInit+0x90>)
 80001a2:	705a      	strb	r2, [r3, #1]
	Keypad_ColuArr[2] = col3_config.PIN_Name;
 80001a4:	4b18      	ldr	r3, [pc, #96]	; (8000208 <KeyPad_vInit+0x98>)
 80001a6:	785a      	ldrb	r2, [r3, #1]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <KeyPad_vInit+0x90>)
 80001aa:	709a      	strb	r2, [r3, #2]
	Keypad_ColuArr[3] = col4_config.PIN_Name;
 80001ac:	4b17      	ldr	r3, [pc, #92]	; (800020c <KeyPad_vInit+0x9c>)
 80001ae:	785a      	ldrb	r2, [r3, #1]
 80001b0:	4b13      	ldr	r3, [pc, #76]	; (8000200 <KeyPad_vInit+0x90>)
 80001b2:	70da      	strb	r2, [r3, #3]

	GPIO_RETURNtPinInit(&row1_config);
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <KeyPad_vInit+0x78>)
 80001b6:	f000 fc71 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&row2_config);
 80001ba:	480d      	ldr	r0, [pc, #52]	; (80001f0 <KeyPad_vInit+0x80>)
 80001bc:	f000 fc6e 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&row3_config);
 80001c0:	480c      	ldr	r0, [pc, #48]	; (80001f4 <KeyPad_vInit+0x84>)
 80001c2:	f000 fc6b 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&row4_config);
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <KeyPad_vInit+0x88>)
 80001c8:	f000 fc68 	bl	8000a9c <GPIO_RETURNtPinInit>

	GPIO_RETURNtPinInit(&col1_config);
 80001cc:	480b      	ldr	r0, [pc, #44]	; (80001fc <KeyPad_vInit+0x8c>)
 80001ce:	f000 fc65 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&col2_config);
 80001d2:	480c      	ldr	r0, [pc, #48]	; (8000204 <KeyPad_vInit+0x94>)
 80001d4:	f000 fc62 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&col3_config);
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <KeyPad_vInit+0x98>)
 80001da:	f000 fc5f 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&col4_config);
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <KeyPad_vInit+0x9c>)
 80001e0:	f000 fc5c 	bl	8000a9c <GPIO_RETURNtPinInit>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000000 	.word	0x20000000
 80001ec:	200000c4 	.word	0x200000c4
 80001f0:	20000004 	.word	0x20000004
 80001f4:	20000008 	.word	0x20000008
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010
 8000200:	200000c8 	.word	0x200000c8
 8000204:	20000014 	.word	0x20000014
 8000208:	20000018 	.word	0x20000018
 800020c:	2000001c 	.word	0x2000001c

08000210 <WriteInsterction>:

/* check mode is 4 bit or 8 bit */

#elif LCD_MODE==_4_BIT

static void WriteInsterction(uint8_t ins) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, LOW_O);
 800021a:	2200      	movs	r2, #0
 800021c:	210b      	movs	r1, #11
 800021e:	2000      	movs	r0, #0
 8000220:	f000 fcc8 	bl	8000bb4 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 7));
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	09db      	lsrs	r3, r3, #7
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	210c      	movs	r1, #12
 800022e:	2001      	movs	r0, #1
 8000230:	f000 fcc0 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 6));
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	099b      	lsrs	r3, r3, #6
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	210d      	movs	r1, #13
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fcb5 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 5));
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	095b      	lsrs	r3, r3, #5
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	210e      	movs	r1, #14
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fcaa 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 4));
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	091b      	lsrs	r3, r3, #4
 8000264:	b2db      	uxtb	r3, r3
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	461a      	mov	r2, r3
 800026e:	210f      	movs	r1, #15
 8000270:	2001      	movs	r0, #1
 8000272:	f000 fc9f 	bl	8000bb4 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 8000276:	2201      	movs	r2, #1
 8000278:	2108      	movs	r1, #8
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fc9a 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f000 fe85 	bl	8000f90 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 8000286:	2200      	movs	r2, #0
 8000288:	2108      	movs	r1, #8
 800028a:	2000      	movs	r0, #0
 800028c:	f000 fc92 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fe7d 	bl	8000f90 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 3));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	08db      	lsrs	r3, r3, #3
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	210c      	movs	r1, #12
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 fc84 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 2));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	089b      	lsrs	r3, r3, #2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	210d      	movs	r1, #13
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fc79 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 1));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	085b      	lsrs	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	210e      	movs	r1, #14
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 fc6e 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 0));
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	210f      	movs	r1, #15
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 fc65 	bl	8000bb4 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	2000      	movs	r0, #0
 80002f0:	f000 fc60 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fe4b 	bl	8000f90 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	2000      	movs	r0, #0
 8000300:	f000 fc58 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 fe43 	bl	8000f90 <SysTick_vDelayms>

}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <WriteData>:

static void WriteData(uint8_t data) {
 8000312:	b580      	push	{r7, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	4603      	mov	r3, r0
 800031a:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, High_O);
 800031c:	2201      	movs	r2, #1
 800031e:	210b      	movs	r1, #11
 8000320:	2000      	movs	r0, #0
 8000322:	f000 fc47 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 7));
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	09db      	lsrs	r3, r3, #7
 800032a:	b2db      	uxtb	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	210c      	movs	r1, #12
 8000330:	2001      	movs	r0, #1
 8000332:	f000 fc3f 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 6));
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	099b      	lsrs	r3, r3, #6
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	210d      	movs	r1, #13
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fc34 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 5));
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	b2db      	uxtb	r3, r3
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	210e      	movs	r1, #14
 800035c:	2001      	movs	r0, #1
 800035e:	f000 fc29 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 4));
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	091b      	lsrs	r3, r3, #4
 8000366:	b2db      	uxtb	r3, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	210f      	movs	r1, #15
 8000372:	2001      	movs	r0, #1
 8000374:	f000 fc1e 	bl	8000bb4 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 8000378:	2201      	movs	r2, #1
 800037a:	2108      	movs	r1, #8
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fc19 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fe04 	bl	8000f90 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 8000388:	2200      	movs	r2, #0
 800038a:	2108      	movs	r1, #8
 800038c:	2000      	movs	r0, #0
 800038e:	f000 fc11 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000392:	2001      	movs	r0, #1
 8000394:	f000 fdfc 	bl	8000f90 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 3));
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	08db      	lsrs	r3, r3, #3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	210c      	movs	r1, #12
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fc03 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 2));
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	089b      	lsrs	r3, r3, #2
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	210d      	movs	r1, #13
 80003be:	2001      	movs	r0, #1
 80003c0:	f000 fbf8 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 1));
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	085b      	lsrs	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	210e      	movs	r1, #14
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fbed 	bl	8000bb4 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 0));
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	210f      	movs	r1, #15
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 fbe4 	bl	8000bb4 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2108      	movs	r1, #8
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 fbdf 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80003f6:	2001      	movs	r0, #1
 80003f8:	f000 fdca 	bl	8000f90 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2108      	movs	r1, #8
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fbd7 	bl	8000bb4 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fdc2 	bl	8000f90 <SysTick_vDelayms>

}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD_Init>:
extern GPIO_PinConfig D5_PIN;
extern GPIO_PinConfig D4_PIN;
extern GPIO_PinConfig EN_PIN;
extern GPIO_PinConfig RS_PIN;

void LCD_Init(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

	GPIO_RETURNtPinInit(&D7_PIN);
 8000418:	4814      	ldr	r0, [pc, #80]	; (800046c <LCD_Init+0x58>)
 800041a:	f000 fb3f 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&D6_PIN);
 800041e:	4814      	ldr	r0, [pc, #80]	; (8000470 <LCD_Init+0x5c>)
 8000420:	f000 fb3c 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&D5_PIN);
 8000424:	4813      	ldr	r0, [pc, #76]	; (8000474 <LCD_Init+0x60>)
 8000426:	f000 fb39 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&D4_PIN);
 800042a:	4813      	ldr	r0, [pc, #76]	; (8000478 <LCD_Init+0x64>)
 800042c:	f000 fb36 	bl	8000a9c <GPIO_RETURNtPinInit>

	GPIO_RETURNtPinInit(&EN_PIN);
 8000430:	4812      	ldr	r0, [pc, #72]	; (800047c <LCD_Init+0x68>)
 8000432:	f000 fb33 	bl	8000a9c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&RS_PIN);
 8000436:	4812      	ldr	r0, [pc, #72]	; (8000480 <LCD_Init+0x6c>)
 8000438:	f000 fb30 	bl	8000a9c <GPIO_RETURNtPinInit>

	SysTick_vDelayms(50);
 800043c:	2032      	movs	r0, #50	; 0x32
 800043e:	f000 fda7 	bl	8000f90 <SysTick_vDelayms>
	WriteInsterction(0x02);
 8000442:	2002      	movs	r0, #2
 8000444:	f7ff fee4 	bl	8000210 <WriteInsterction>
	WriteInsterction(0x28); //screen on 4 bit mode  with 2 line 5*7
 8000448:	2028      	movs	r0, #40	; 0x28
 800044a:	f7ff fee1 	bl	8000210 <WriteInsterction>
	WriteInsterction(0x0c); //cursor off 0x0e ,0x0f
 800044e:	200c      	movs	r0, #12
 8000450:	f7ff fede 	bl	8000210 <WriteInsterction>
	WriteInsterction(0x01); //clear screen
 8000454:	2001      	movs	r0, #1
 8000456:	f7ff fedb 	bl	8000210 <WriteInsterction>
	SysTick_vDelayms(1);
 800045a:	2001      	movs	r0, #1
 800045c:	f000 fd98 	bl	8000f90 <SysTick_vDelayms>
	WriteInsterction(0x06); //increase DDRAM address no shift
 8000460:	2006      	movs	r0, #6
 8000462:	f7ff fed5 	bl	8000210 <WriteInsterction>

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000020 	.word	0x20000020
 8000470:	20000024 	.word	0x20000024
 8000474:	20000028 	.word	0x20000028
 8000478:	2000002c 	.word	0x2000002c
 800047c:	20000030 	.word	0x20000030
 8000480:	20000034 	.word	0x20000034

08000484 <LCD_WriteChar>:

#endif

void LCD_WriteChar(uint8_t ch) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]

	WriteData(ch);
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff3e 	bl	8000312 <WriteData>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DMA_RETURNtSetConfig>:
 */

#include "DMA/inc/DMA_interface.h"

static void DMA_RETURNtSetConfig(DMA_config* Local_DMA_config_s,
		uint32_t SrcAddress_s, uint32_t DesAddress_s, uint16_t Data_length_s) {
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	807b      	strh	r3, [r7, #2]

	if (Local_DMA_config_s->DMA_n == DMA_N1) {
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	785b      	ldrb	r3, [r3, #1]
 80004b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d169      	bne.n	8000590 <DMA_RETURNtSetConfig+0xf0>

		/* setup configuration  */
		DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST] =*(uint16_t*)Local_DMA_config_s;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	8819      	ldrh	r1, [r3, #0]
 80004c0:	4a6e      	ldr	r2, [pc, #440]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	3302      	adds	r3, #2
 80004d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CNDTR_OFFEST] = Data_length_s;
 80004d4:	4969      	ldr	r1, [pc, #420]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	3303      	adds	r3, #3
 80004e4:	887a      	ldrh	r2, [r7, #2]
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (Local_DMA_config_s->MEM2MEM_Mode == DMA_MEM2MEM_ENABLE) {
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	785b      	ldrb	r3, [r3, #1]
 80004ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d016      	beq.n	8000526 <DMA_RETURNtSetConfig+0x86>

			DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CPAR_OFFEST] = SrcAddress_s;
 80004f8:	4960      	ldr	r1, [pc, #384]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	3304      	adds	r3, #4
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CMAR_OFFEST] = DesAddress_s;
 800050e:	495b      	ldr	r1, [pc, #364]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	789b      	ldrb	r3, [r3, #2]
 8000514:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	3305      	adds	r3, #5
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

		}

	}
}
 8000524:	e0a4      	b.n	8000670 <DMA_RETURNtSetConfig+0x1d0>
			if (Local_DMA_config_s->DIR == DMA_DIR_PERIPHERAL_TO_MEMORY) {
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	f003 0310 	and.w	r3, r3, #16
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d116      	bne.n	8000562 <DMA_RETURNtSetConfig+0xc2>
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CPAR_OFFEST] =
 8000534:	4951      	ldr	r1, [pc, #324]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	789b      	ldrb	r3, [r3, #2]
 800053a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800053e:	b2db      	uxtb	r3, r3
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	3304      	adds	r3, #4
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CMAR_OFFEST] =
 800054a:	494c      	ldr	r1, [pc, #304]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	789b      	ldrb	r3, [r3, #2]
 8000550:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	3305      	adds	r3, #5
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000560:	e086      	b.n	8000670 <DMA_RETURNtSetConfig+0x1d0>
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CPAR_OFFEST] =
 8000562:	4946      	ldr	r1, [pc, #280]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	3304      	adds	r3, #4
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CMAR_OFFEST] =
 8000578:	4940      	ldr	r1, [pc, #256]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	789b      	ldrb	r3, [r3, #2]
 800057e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	3305      	adds	r3, #5
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800058e:	e06f      	b.n	8000670 <DMA_RETURNtSetConfig+0x1d0>
	} else if (Local_DMA_config_s->DMA_n == DMA_N2) {
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d068      	beq.n	8000670 <DMA_RETURNtSetConfig+0x1d0>
				 *(uint16_t*)Local_DMA_config_s;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	8819      	ldrh	r1, [r3, #0]
		DMA2->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST] =
 80005a2:	4a37      	ldr	r2, [pc, #220]	; (8000680 <DMA_RETURNtSetConfig+0x1e0>)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	3302      	adds	r3, #2
 80005b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		DMA2->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CNDTR_OFFEST] = Data_length_s;
 80005b6:	4932      	ldr	r1, [pc, #200]	; (8000680 <DMA_RETURNtSetConfig+0x1e0>)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	3303      	adds	r3, #3
 80005c6:	887a      	ldrh	r2, [r7, #2]
 80005c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (Local_DMA_config_s->MEM2MEM_Mode == DMA_MEM2MEM_ENABLE) {
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d016      	beq.n	8000608 <DMA_RETURNtSetConfig+0x168>
			DMA2->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CPAR_OFFEST] = SrcAddress_s;
 80005da:	4929      	ldr	r1, [pc, #164]	; (8000680 <DMA_RETURNtSetConfig+0x1e0>)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	789b      	ldrb	r3, [r3, #2]
 80005e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	3304      	adds	r3, #4
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			DMA2->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CMAR_OFFEST] = DesAddress_s;
 80005f0:	4923      	ldr	r1, [pc, #140]	; (8000680 <DMA_RETURNtSetConfig+0x1e0>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	3305      	adds	r3, #5
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000606:	e033      	b.n	8000670 <DMA_RETURNtSetConfig+0x1d0>
			if (Local_DMA_config_s->DIR == DMA_DIR_PERIPHERAL_TO_MEMORY) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d116      	bne.n	8000644 <DMA_RETURNtSetConfig+0x1a4>
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CPAR_OFFEST] =
 8000616:	4919      	ldr	r1, [pc, #100]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	3304      	adds	r3, #4
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CMAR_OFFEST] =
 800062c:	4913      	ldr	r1, [pc, #76]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	3305      	adds	r3, #5
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000642:	e015      	b.n	8000670 <DMA_RETURNtSetConfig+0x1d0>
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CPAR_OFFEST] =
 8000644:	490d      	ldr	r1, [pc, #52]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	3304      	adds	r3, #4
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DMA1->DMA_CH[(Local_DMA_config_s->CHANNEL_n * DMA_NUM_OfReg) + DMA_CMAR_OFFEST] =
 800065a:	4908      	ldr	r1, [pc, #32]	; (800067c <DMA_RETURNtSetConfig+0x1dc>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	3305      	adds	r3, #5
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400

08000684 <DMA_RETURNtInit>:
RETURN_t DMA_RETURNtInit(DMA_config *Local_DMA_config) {
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

	RETURN_t Local_ReturnStatus = OK_ret ;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]

	if (Local_DMA_config->DMA_n == DMA_N1) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10c      	bne.n	80006b8 <DMA_RETURNtInit+0x34>

		/* setup configuration  */

DMA1->DMA_CH[(Local_DMA_config->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST] =  *(uint16_t*)Local_DMA_config;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	8819      	ldrh	r1, [r3, #0]
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <DMA_RETURNtInit+0x68>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	3302      	adds	r3, #2
 80006b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80006b6:	e012      	b.n	80006de <DMA_RETURNtInit+0x5a>

	} else if (Local_DMA_config->DMA_n == DMA_N2) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	785b      	ldrb	r3, [r3, #1]
 80006bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00b      	beq.n	80006de <DMA_RETURNtInit+0x5a>

		/* setup configuration  */
		DMA2->DMA_CH[(Local_DMA_config->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST] =
				 *(uint16_t*)Local_DMA_config;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8819      	ldrh	r1, [r3, #0]
		DMA2->DMA_CH[(Local_DMA_config->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST] =
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <DMA_RETURNtInit+0x6c>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	3302      	adds	r3, #2
 80006da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	}

	return Local_ReturnStatus ;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020400 	.word	0x40020400

080006f4 <DMA_RETURNtstart>:

RETURN_t DMA_RETURNtstart(DMA_config *Local_DMA_config, uint32_t SrcAddress,
		uint32_t DesAddress, uint16_t Data_length) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	807b      	strh	r3, [r7, #2]

	RETURN_t Local_ReturnStatus = OK_ret ;
 8000702:	2301      	movs	r3, #1
 8000704:	75fb      	strb	r3, [r7, #23]


	DMA_RETURNtSetConfig(Local_DMA_config, SrcAddress, DesAddress,Data_length);
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f7ff fec7 	bl	80004a0 <DMA_RETURNtSetConfig>

	if (Local_DMA_config->DMA_n == DMA_N1) {
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d116      	bne.n	800074e <DMA_RETURNtstart+0x5a>

		/* setup configuration  */

		SET_BIT(DMA1->DMA_CH[(Local_DMA_config->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST], 0);
 8000720:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <DMA_RETURNtstart+0xa0>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	3302      	adds	r3, #2
 8000730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000734:	4917      	ldr	r1, [pc, #92]	; (8000794 <DMA_RETURNtstart+0xa0>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	3302      	adds	r3, #2
 8000744:	f042 0201 	orr.w	r2, r2, #1
 8000748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800074c:	e01c      	b.n	8000788 <DMA_RETURNtstart+0x94>

	} else if (Local_DMA_config->DMA_n == DMA_N2) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d015      	beq.n	8000788 <DMA_RETURNtstart+0x94>

		SET_BIT(DMA2->DMA_CH[(Local_DMA_config->CHANNEL_n * DMA_NUM_OfReg)+DMA_CCR_OFFEST], 0);
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <DMA_RETURNtstart+0xa4>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	3302      	adds	r3, #2
 800076c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000770:	4909      	ldr	r1, [pc, #36]	; (8000798 <DMA_RETURNtstart+0xa4>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	3302      	adds	r3, #2
 8000780:	f042 0201 	orr.w	r2, r2, #1
 8000784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}

	return Local_ReturnStatus ;
 8000788:	7dfb      	ldrb	r3, [r7, #23]


}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020000 	.word	0x40020000
 8000798:	40020400 	.word	0x40020400

0800079c <DMA_RETURNtRegisterCallBack>:


static void(*DMA2_FunPtr[7])(void)= {NULL_FPTR,NULL_FPTR,NULL_FPTR} ;


RETURN_t DMA_RETURNtRegisterCallBack(DMA_config *Local_DMA_config , void (*DMA_ptr)(void)) {
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]

	RETURN_t Local_ReturnStatus = OK_ret ;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]


	if (Local_DMA_config->DMA_n == DMA_N1) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10a      	bne.n	80007ce <DMA_RETURNtRegisterCallBack+0x32>


		DMA1_FunPtr[Local_DMA_config->CHANNEL_n]= DMA_ptr ;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <DMA_RETURNtRegisterCallBack+0x60>)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80007cc:	e010      	b.n	80007f0 <DMA_RETURNtRegisterCallBack+0x54>


	} else if (Local_DMA_config->DMA_n == DMA_N2) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d009      	beq.n	80007f0 <DMA_RETURNtRegisterCallBack+0x54>


		DMA2_FunPtr[Local_DMA_config->CHANNEL_n]= DMA_ptr ;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <DMA_RETURNtRegisterCallBack+0x64>)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	}

	return Local_ReturnStatus ;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]



}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200000cc 	.word	0x200000cc
 8000800:	200000e8 	.word	0x200000e8

08000804 <DMA1_Channel1_IRQHandler>:

uint8_t DMA_RETURNtGetError(DMA_config *Local_DMA_config);



void DMA1_Channel1_IRQHandler(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

	if(DMA1_FunPtr[0]!=NULL_FPTR){
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <DMA1_Channel1_IRQHandler+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d008      	beq.n	8000822 <DMA1_Channel1_IRQHandler+0x1e>

		DMA1_FunPtr[0]() ;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <DMA1_Channel1_IRQHandler+0x24>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4798      	blx	r3

		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],0);
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <DMA1_Channel1_IRQHandler+0x28>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <DMA1_Channel1_IRQHandler+0x28>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6053      	str	r3, [r2, #4]

	}

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000cc 	.word	0x200000cc
 800082c:	40020000 	.word	0x40020000

08000830 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0


	if(DMA1_FunPtr[1]!=NULL_FPTR){
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <DMA1_Channel2_IRQHandler+0x24>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <DMA1_Channel2_IRQHandler+0x1e>

		DMA1_FunPtr[1]() ;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <DMA1_Channel2_IRQHandler+0x24>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4798      	blx	r3
		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],4);
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <DMA1_Channel2_IRQHandler+0x28>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <DMA1_Channel2_IRQHandler+0x28>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6053      	str	r3, [r2, #4]


	}

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000cc 	.word	0x200000cc
 8000858:	40020000 	.word	0x40020000

0800085c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0


	if(DMA1_FunPtr[2]!=NULL_FPTR){
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <DMA1_Channel3_IRQHandler+0x24>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <DMA1_Channel3_IRQHandler+0x1e>

		DMA1_FunPtr[2]() ;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <DMA1_Channel3_IRQHandler+0x24>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4798      	blx	r3
		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],8);
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <DMA1_Channel3_IRQHandler+0x28>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <DMA1_Channel3_IRQHandler+0x28>)
 8000874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000878:	6053      	str	r3, [r2, #4]


	}

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000cc 	.word	0x200000cc
 8000884:	40020000 	.word	0x40020000

08000888 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	if(DMA1_FunPtr[3]!=NULL_FPTR){
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <DMA1_Channel4_IRQHandler+0x24>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d008      	beq.n	80008a6 <DMA1_Channel4_IRQHandler+0x1e>

		DMA1_FunPtr[3]() ;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <DMA1_Channel4_IRQHandler+0x24>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4798      	blx	r3
		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],12);
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <DMA1_Channel4_IRQHandler+0x28>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <DMA1_Channel4_IRQHandler+0x28>)
 80008a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a4:	6053      	str	r3, [r2, #4]


	}}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000cc 	.word	0x200000cc
 80008b0:	40020000 	.word	0x40020000

080008b4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0


	if(DMA1_FunPtr[4]!=NULL_FPTR){
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <DMA1_Channel5_IRQHandler+0x24>)
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d008      	beq.n	80008d2 <DMA1_Channel5_IRQHandler+0x1e>

		DMA1_FunPtr[4]() ;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <DMA1_Channel5_IRQHandler+0x24>)
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	4798      	blx	r3
		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],16);
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <DMA1_Channel5_IRQHandler+0x28>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <DMA1_Channel5_IRQHandler+0x28>)
 80008cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d0:	6053      	str	r3, [r2, #4]


	}


}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000cc 	.word	0x200000cc
 80008dc:	40020000 	.word	0x40020000

080008e0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0


	if(DMA1_FunPtr[5]!=NULL_FPTR){
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <DMA1_Channel6_IRQHandler+0x24>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d008      	beq.n	80008fe <DMA1_Channel6_IRQHandler+0x1e>

		DMA1_FunPtr[5]() ;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <DMA1_Channel6_IRQHandler+0x24>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4798      	blx	r3
		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],20);
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <DMA1_Channel6_IRQHandler+0x28>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <DMA1_Channel6_IRQHandler+0x28>)
 80008f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008fc:	6053      	str	r3, [r2, #4]

	}

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000cc 	.word	0x200000cc
 8000908:	40020000 	.word	0x40020000

0800090c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0



	if(DMA1_FunPtr[6]!=NULL_FPTR){
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <DMA1_Channel7_IRQHandler+0x24>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d008      	beq.n	800092a <DMA1_Channel7_IRQHandler+0x1e>

		DMA1_FunPtr[6]() ;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <DMA1_Channel7_IRQHandler+0x24>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4798      	blx	r3

		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],24);
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <DMA1_Channel7_IRQHandler+0x28>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <DMA1_Channel7_IRQHandler+0x28>)
 8000924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000928:	6053      	str	r3, [r2, #4]

	}


}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000cc 	.word	0x200000cc
 8000934:	40020000 	.word	0x40020000

08000938 <DMA2_Channel1_IRQHandler>:



void DMA2_Channel1_IRQHandler(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0


	if(DMA2_FunPtr[0]!=NULL_FPTR){
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <DMA2_Channel1_IRQHandler+0x24>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <DMA2_Channel1_IRQHandler+0x1e>

		DMA2_FunPtr[0]() ;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <DMA2_Channel1_IRQHandler+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4798      	blx	r3

		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],0);
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <DMA2_Channel1_IRQHandler+0x28>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <DMA2_Channel1_IRQHandler+0x28>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6053      	str	r3, [r2, #4]


	}

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000e8 	.word	0x200000e8
 8000960:	40020000 	.word	0x40020000

08000964 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0



	if(DMA2_FunPtr[1]!=NULL_FPTR){
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <DMA2_Channel2_IRQHandler+0x24>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d008      	beq.n	8000982 <DMA2_Channel2_IRQHandler+0x1e>

		DMA2_FunPtr[1]() ;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <DMA2_Channel2_IRQHandler+0x24>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	4798      	blx	r3

		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],4);
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <DMA2_Channel2_IRQHandler+0x28>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <DMA2_Channel2_IRQHandler+0x28>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6053      	str	r3, [r2, #4]


	}

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000e8 	.word	0x200000e8
 800098c:	40020000 	.word	0x40020000

08000990 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0


	if(DMA2_FunPtr[2]!=NULL_FPTR){
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <DMA2_Channel3_IRQHandler+0x24>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <DMA2_Channel3_IRQHandler+0x1e>

		DMA2_FunPtr[2]() ;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <DMA2_Channel3_IRQHandler+0x24>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4798      	blx	r3

		SET_BIT(DMA1->DMA_CH[((0*DMA_NUM_OfReg)+1)],8);
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <DMA2_Channel3_IRQHandler+0x28>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <DMA2_Channel3_IRQHandler+0x28>)
 80009a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ac:	6053      	str	r3, [r2, #4]


	}

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000e8 	.word	0x200000e8
 80009b8:	40020000 	.word	0x40020000

080009bc <DMA2_Channel4_5_IRQHandler>:
void DMA2_Channel4_5_IRQHandler(void){}
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <EXTI_vClearPendingFlag>:

}


void EXTI_vClearPendingFlag (EXTI_Numbers Copy_u8EXTINumber)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]


	if (Copy_u8EXTINumber<EXTI_LINE0 || Copy_u8EXTINumber>EXTI_LINE19)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b13      	cmp	r3, #19
 80009d6:	d809      	bhi.n	80009ec <EXTI_vClearPendingFlag+0x24>
	{

	}
	else
	{
		SET_BIT(EXTI->PR,Copy_u8EXTINumber);
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <EXTI_vClearPendingFlag+0x30>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	2101      	movs	r1, #1
 80009e0:	fa01 f202 	lsl.w	r2, r1, r2
 80009e4:	4611      	mov	r1, r2
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <EXTI_vClearPendingFlag+0x30>)
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6153      	str	r3, [r2, #20]
	}

}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40010400 	.word	0x40010400

080009fc <EXTI0_IRQHandler>:

/**********************ISR EXTI*************************************************/


void EXTI0_IRQHandler (void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE0);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ffe1 	bl	80009c8 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE0]!=NULL_FPTR)
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <EXTI0_IRQHandler+0x1c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <EXTI0_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE0]();
 8000a0e:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <EXTI0_IRQHandler+0x1c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4798      	blx	r3
	}

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000104 	.word	0x20000104

08000a1c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff ffd1 	bl	80009c8 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE1]!=NULL_FPTR)
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <EXTI1_IRQHandler+0x1c>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <EXTI1_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE1]();
 8000a2e:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <EXTI1_IRQHandler+0x1c>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4798      	blx	r3
	}


}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000104 	.word	0x20000104

08000a3c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE2);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff ffc1 	bl	80009c8 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE2]!=NULL_FPTR)
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <EXTI2_IRQHandler+0x1c>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <EXTI2_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE2]();
 8000a4e:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <EXTI2_IRQHandler+0x1c>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4798      	blx	r3
	}

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000104 	.word	0x20000104

08000a5c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

	EXTI_vClearPendingFlag(EXTI_LINE3);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f7ff ffb1 	bl	80009c8 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE3]!=NULL_FPTR)
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <EXTI3_IRQHandler+0x1c>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <EXTI3_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE3]();
 8000a6e:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <EXTI3_IRQHandler+0x1c>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	4798      	blx	r3
	}

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000104 	.word	0x20000104

08000a7c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

	EXTI_vClearPendingFlag(EXTI_LINE4);
 8000a80:	2004      	movs	r0, #4
 8000a82:	f7ff ffa1 	bl	80009c8 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE4]!=NULL_FPTR)
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <EXTI4_IRQHandler+0x1c>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <EXTI4_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE4]();
 8000a8e:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <EXTI4_IRQHandler+0x1c>)
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	4798      	blx	r3
	}

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000104 	.word	0x20000104

08000a9c <GPIO_RETURNtPinInit>:
#include "GPIO/inc/GPIO_interface.h"


static GPIO_r *GPIO_ArraysOfPtr[Number_OfPorts] = { GPIOA, GPIOB, GPIOC };

RETURN_t GPIO_RETURNtPinInit(GPIO_PinConfig *Localptr_PinConfig) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

	RETURN_t LocalRetState = OK_ret;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	77fb      	strb	r3, [r7, #31]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
			&& Localptr_PinConfig->Port_Name <= GPIO_PORTC)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d903      	bls.n	8000ab8 <GPIO_RETURNtPinInit+0x1c>
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	785b      	ldrb	r3, [r3, #1]
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d173      	bne.n	8000ba0 <GPIO_RETURNtPinInit+0x104>

		GPIO_r *LocalGPIO_Ptr = GPIO_ArraysOfPtr[Localptr_PinConfig->Port_Name];
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <GPIO_RETURNtPinInit+0x114>)
 8000ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac4:	61bb      	str	r3, [r7, #24]
		/* configure mode */
		MOD_NUM_OF_BITS(LocalGPIO_Ptr->CR[(Localptr_PinConfig->PIN_Name) / 8],
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	785b      	ldrb	r3, [r3, #1]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	789b      	ldrb	r3, [r3, #2]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	785b      	ldrb	r3, [r3, #1]
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4619      	mov	r1, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				((Localptr_PinConfig->PIN_Name) % 8) * 4, 4,
				Localptr_PinConfig->PIN_MODE);



if( Localptr_PinConfig->PIN_MODE == GPIO_PinModeInput_PU)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	2b18      	cmp	r3, #24
 8000b26:	d10a      	bne.n	8000b3e <GPIO_RETURNtPinInit+0xa2>
{
	SET_BIT(LocalGPIO_Ptr->ODR ,Localptr_PinConfig->PIN_Name );
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	7852      	ldrb	r2, [r2, #1]
 8000b30:	4611      	mov	r1, r2
 8000b32:	2201      	movs	r2, #1
 8000b34:	408a      	lsls	r2, r1
 8000b36:	431a      	orrs	r2, r3
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	e00e      	b.n	8000b5c <GPIO_RETURNtPinInit+0xc0>


}


else if( Localptr_PinConfig->PIN_MODE == GPIO_PinModeInput_PD )
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d10a      	bne.n	8000b5c <GPIO_RETURNtPinInit+0xc0>
{
	CLEAR_BIT(LocalGPIO_Ptr->ODR ,Localptr_PinConfig->PIN_Name );
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	7852      	ldrb	r2, [r2, #1]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	2201      	movs	r2, #1
 8000b52:	408a      	lsls	r2, r1
 8000b54:	43d2      	mvns	r2, r2
 8000b56:	401a      	ands	r2, r3
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	60da      	str	r2, [r3, #12]

}

		/* configure set and reset */
		if (Localptr_PinConfig->PIN_DefaultOut == High_O) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	78db      	ldrb	r3, [r3, #3]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d10a      	bne.n	8000b7a <GPIO_RETURNtPinInit+0xde>

			SET_BIT(LocalGPIO_Ptr->BSRR , Localptr_PinConfig->PIN_Name);
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	7852      	ldrb	r2, [r2, #1]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	2201      	movs	r2, #1
 8000b70:	408a      	lsls	r2, r1
 8000b72:	431a      	orrs	r2, r3
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000b78:	e014      	b.n	8000ba4 <GPIO_RETURNtPinInit+0x108>

		} else if (Localptr_PinConfig->PIN_DefaultOut == LOW_O) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	78db      	ldrb	r3, [r3, #3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10b      	bne.n	8000b9a <GPIO_RETURNtPinInit+0xfe>

			SET_BIT(LocalGPIO_Ptr->BSRR , ((Localptr_PinConfig->PIN_Name)+GPIO_PinsOutOfRange) );
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	7852      	ldrb	r2, [r2, #1]
 8000b8a:	3210      	adds	r2, #16
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	431a      	orrs	r2, r3
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000b98:	e004      	b.n	8000ba4 <GPIO_RETURNtPinInit+0x108>

		} else {
			LocalRetState = ERROR_ret;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	77fb      	strb	r3, [r7, #31]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000b9e:	e001      	b.n	8000ba4 <GPIO_RETURNtPinInit+0x108>
		}

	} else {

		LocalRetState = ERROR_ret;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	77fb      	strb	r3, [r7, #31]
	}

	return LocalRetState;
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]

}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000038 	.word	0x20000038

08000bb4 <GPIO_RETURNtPinOut>:
 * @param  Local_PortName: The GPIO port to which the pin belongs.
 * @param  Local_PinName: The specific pin in the port.
 * @param  Local_OutVal: The output value to be set (High_O or LOW_O).
 * @retval RETURN_t: Indicates the success or failure of the operation.
 */
RETURN_t GPIO_RETURNtPinOut(GPIO_Ports Local_PortName, GPIO_Pins Local_PinName,GPIO_PinStateOut Local_OutVal) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	717b      	strb	r3, [r7, #5]

	RETURN_t local_RETURN_t = OK_ret;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
	if (Local_PortName >= GPIO_PortsOutOfRange|| Local_PinName >= GPIO_PinsOutOfRange) {
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d802      	bhi.n	8000bd6 <GPIO_RETURNtPinOut+0x22>
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d902      	bls.n	8000bdc <GPIO_RETURNtPinOut+0x28>

		local_RETURN_t = ERROR_ret;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e02a      	b.n	8000c32 <GPIO_RETURNtPinOut+0x7e>

	} else {

		if (Local_OutVal == High_O) {
 8000bdc:	797b      	ldrb	r3, [r7, #5]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d110      	bne.n	8000c04 <GPIO_RETURNtPinOut+0x50>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,Local_PinName) ;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <GPIO_RETURNtPinOut+0x8c>)
 8000be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4911      	ldr	r1, [pc, #68]	; (8000c40 <GPIO_RETURNtPinOut+0x8c>)
 8000bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfe:	4302      	orrs	r2, r0
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	e016      	b.n	8000c32 <GPIO_RETURNtPinOut+0x7e>

		}

		else if (Local_OutVal == LOW_O) {
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <GPIO_RETURNtPinOut+0x7a>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,(Local_PinName+GPIO_PinsOutOfRange) ) ;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <GPIO_RETURNtPinOut+0x8c>)
 8000c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c12:	691a      	ldr	r2, [r3, #16]
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	3310      	adds	r3, #16
 8000c18:	2101      	movs	r1, #1
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4907      	ldr	r1, [pc, #28]	; (8000c40 <GPIO_RETURNtPinOut+0x8c>)
 8000c24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c28:	4302      	orrs	r2, r0
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	e001      	b.n	8000c32 <GPIO_RETURNtPinOut+0x7e>

		} else {

			local_RETURN_t = ERROR_ret;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]

		}

	}

	return local_RETURN_t;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000038 	.word	0x20000038

08000c44 <NVIC_SetPriorityConfig>:


static uint8_t StaticGlobal_u8PriorityConfig ;


void NVIC_SetPriorityConfig(uint8_t Copy_u8Priority) {
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	 StaticGlobal_u8PriorityConfig=Copy_u8Priority;
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <NVIC_SetPriorityConfig+0x3c>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	7013      	strb	r3, [r2, #0]
	 uint32_t LocalTempRegValue=(VECT_KEY<<16)|(Copy_u8Priority<<8)|(SCB_AIRCR&0b111) ;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <NVIC_SetPriorityConfig+0x40>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60fb      	str	r3, [r7, #12]
	 SCB_AIRCR =LocalTempRegValue ;
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <NVIC_SetPriorityConfig+0x40>)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6013      	str	r3, [r2, #0]

}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000154 	.word	0x20000154
 8000c84:	e000ed0c 	.word	0xe000ed0c

08000c88 <NVIC_voidSetInterruptPriority>:
 * Copy_u8GroupId    :the desired Group Id of interrupt note:if PriorityConfig= NVIC_GROUB0BITS_SUB4BITS then enter 0
 * Copy_u8SubGroupId :the desired SubGroup Id of interrupt note:if PriorityConfig= NVIC_GROUB4BITS_SUB0BITS then enter 0
 *
 */
void NVIC_voidSetInterruptPriority(NVIC_EXTPreprheial Copyu8InterruptNumber,
		uint8_t Copy_u8GroupId, uint8_t Copy_u8SubGroupId) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	460b      	mov	r3, r1
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	4613      	mov	r3, r2
 8000c98:	717b      	strb	r3, [r7, #5]



	switch (StaticGlobal_u8PriorityConfig) {
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <NVIC_voidSetInterruptPriority+0xe4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3b03      	subs	r3, #3
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d85c      	bhi.n	8000d5e <NVIC_voidSetInterruptPriority+0xd6>
 8000ca4:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <NVIC_voidSetInterruptPriority+0x24>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000cc1 	.word	0x08000cc1
 8000cb0:	08000cd3 	.word	0x08000cd3
 8000cb4:	08000cf9 	.word	0x08000cf9
 8000cb8:	08000d1f 	.word	0x08000d1f
 8000cbc:	08000d4b 	.word	0x08000d4b
		case NVIC_16GROUB_0SUB:
			NVIC->IPR[Copyu8InterruptNumber]=(Copy_u8GroupId<<4);
 8000cc0:	492b      	ldr	r1, [pc, #172]	; (8000d70 <NVIC_voidSetInterruptPriority+0xe8>)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	79ba      	ldrb	r2, [r7, #6]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000cd0:	e046      	b.n	8000d60 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_8GROUB_2SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b111)<<5)|((Copy_u8SubGroupId & 0b1)<<4);
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	015b      	lsls	r3, r3, #5
 8000cd6:	b25a      	sxtb	r2, r3
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b259      	sxtb	r1, r3
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <NVIC_voidSetInterruptPriority+0xe8>)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	b2c9      	uxtb	r1, r1
 8000cee:	4413      	add	r3, r2
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 8000cf6:	e033      	b.n	8000d60 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_4GROUB_4SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<6)|((Copy_u8SubGroupId & 0b11)<<4);
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	019b      	lsls	r3, r3, #6
 8000cfc:	b25a      	sxtb	r2, r3
 8000cfe:	797b      	ldrb	r3, [r7, #5]
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b259      	sxtb	r1, r3
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <NVIC_voidSetInterruptPriority+0xe8>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b2c9      	uxtb	r1, r1
 8000d14:	4413      	add	r3, r2
 8000d16:	460a      	mov	r2, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000d1c:	e020      	b.n	8000d60 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_2GROUB_8SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<7)|((Copy_u8SubGroupId & 0b111)<<4);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	01db      	lsls	r3, r3, #7
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	797b      	ldrb	r3, [r7, #5]
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b259      	sxtb	r1, r3
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <NVIC_voidSetInterruptPriority+0xe8>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	b2c9      	uxtb	r1, r1
 8000d40:	4413      	add	r3, r2
 8000d42:	460a      	mov	r2, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000d48:	e00a      	b.n	8000d60 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_0GROUB_16SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8SubGroupId & 0b1111)<<4);
 8000d4a:	797b      	ldrb	r3, [r7, #5]
 8000d4c:	0119      	lsls	r1, r3, #4
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <NVIC_voidSetInterruptPriority+0xe8>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	b2c9      	uxtb	r1, r1
 8000d54:	4413      	add	r3, r2
 8000d56:	460a      	mov	r2, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000d5c:	e000      	b.n	8000d60 <NVIC_voidSetInterruptPriority+0xd8>
		default:
			break;
 8000d5e:	bf00      	nop
	}



}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000154 	.word	0x20000154
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <NVIC_vEnableInterrupt>:
/**
 * @brief Enables the specified interrupt in the NVIC (Nested Vector Interrupt Controller).
 * @param Copy_u8InterruptNum: The interrupt number to be enabled.
 * @return None
 */
void NVIC_vEnableInterrupt(NVIC_EXTPreprheial Copy_u8InterruptNum){
 8000d74:	b490      	push	{r4, r7}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]


	SET_BIT(NVIC->ISER[Copy_u8InterruptNum/32],Copy_u8InterruptNum%32);
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <NVIC_vEnableInterrupt+0x3c>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	b2d8      	uxtb	r0, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	f002 021f 	and.w	r2, r2, #31
 8000d92:	2101      	movs	r1, #1
 8000d94:	fa01 f202 	lsl.w	r2, r1, r2
 8000d98:	4614      	mov	r4, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <NVIC_vEnableInterrupt+0x3c>)
 8000d9c:	4601      	mov	r1, r0
 8000d9e:	4323      	orrs	r3, r4
 8000da0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc90      	pop	{r4, r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <RCC_RETURNtInit>:
#include "RCC/inc/RCC_interface.h"




RETURN_t RCC_RETURNtInit(void) {
 8000db4:	b480      	push	{r7}
 8000db6:	b097      	sub	sp, #92	; 0x5c
 8000db8:	af00      	add	r7, sp, #0

    RETURN_t Local_error_state = OK_ret ;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Configuring ADC prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 14, 2, ADC_PRESCALER);
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8000dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc6:	039b      	lsls	r3, r3, #14
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dce:	039b      	lsls	r3, r3, #14
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dd4:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dda:	401a      	ands	r2, r3
 8000ddc:	4941      	ldr	r1, [pc, #260]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]

    /* Configuring APB2 high-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 11, 3, APB2_prescaler);
 8000de4:	2307      	movs	r3, #7
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
 8000de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dea:	02db      	lsls	r3, r3, #11
 8000dec:	43db      	mvns	r3, r3
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
 8000df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000df2:	02db      	lsls	r3, r3, #11
 8000df4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e00:	401a      	ands	r2, r3
 8000e02:	4938      	ldr	r1, [pc, #224]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e06:	4313      	orrs	r3, r2
 8000e08:	604b      	str	r3, [r1, #4]

    /* Configuring APB1 low-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 8, 3, APB1_prescaler);
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	43db      	mvns	r3, r3
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
 8000e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e26:	401a      	ands	r2, r3
 8000e28:	492e      	ldr	r1, [pc, #184]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]

    /* Configuring AHB prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 4, 4, AHP_prescaler);
 8000e30:	230f      	movs	r3, #15
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	401a      	ands	r2, r3
 8000e48:	4926      	ldr	r1, [pc, #152]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]

    /* Configuring Microcontroller clock output */
    MOD_NUM_OF_BITS(RCC->CFGR, 24, 3, MCO_clk);
 8000e50:	2307      	movs	r3, #7
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	061b      	lsls	r3, r3, #24
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	061b      	lsls	r3, r3, #24
 8000e60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	491d      	ldr	r1, [pc, #116]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	604b      	str	r3, [r1, #4]

    /* Configuring clock security system */
    MOD_NUM_OF_BITS(RCC->CR, 19, 0, Clock_security);
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	04db      	lsls	r3, r3, #19
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	04db      	lsls	r3, r3, #19
 8000e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	401a      	ands	r2, r3
 8000e94:	4913      	ldr	r1, [pc, #76]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]

    /* Configuring main clock source */
    #if MAIN_CLK == HSI
        SET_BIT(RCC->CR, 0);
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]
        while(!READ_BIT(RCC->CR, 1));
 8000ea8:	bf00      	nop
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f9      	beq.n	8000eaa <RCC_RETURNtInit+0xf6>
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 0);
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	4905      	ldr	r1, [pc, #20]	; (8000ee4 <RCC_RETURNtInit+0x130>)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 2);
        /* Turning off HSI */
        CLEAR_BIT(RCC->CR, 0);
    #endif

    return Local_error_state;
 8000ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	375c      	adds	r7, #92	; 0x5c
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <RCC_RETURNtPeripheralEn>:

/*  functions for enabling various peripherals */


RETURN_t RCC_RETURNtPeripheralEn(uint8_t BusType, uint8_t PeripheralName) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
    RETURN_t Local_error_state = OK_ret ;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]


	switch(BusType){
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d01c      	beq.n	8000f3c <RCC_RETURNtPeripheralEn+0x54>
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	dc25      	bgt.n	8000f52 <RCC_RETURNtPeripheralEn+0x6a>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <RCC_RETURNtPeripheralEn+0x28>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d00b      	beq.n	8000f26 <RCC_RETURNtPeripheralEn+0x3e>
 8000f0e:	e020      	b.n	8000f52 <RCC_RETURNtPeripheralEn+0x6a>

	case AHB :

		SET_BIT(RCC->AHBENR ,PeripheralName ) ;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <RCC_RETURNtPeripheralEn+0x7c>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	79ba      	ldrb	r2, [r7, #6]
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <RCC_RETURNtPeripheralEn+0x7c>)
 8000f20:	430b      	orrs	r3, r1
 8000f22:	6153      	str	r3, [r2, #20]

		break ;
 8000f24:	e018      	b.n	8000f58 <RCC_RETURNtPeripheralEn+0x70>
	case APB1 :
		SET_BIT(RCC->APB1ENR ,PeripheralName ) ;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <RCC_RETURNtPeripheralEn+0x7c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	79ba      	ldrb	r2, [r7, #6]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	4611      	mov	r1, r2
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <RCC_RETURNtPeripheralEn+0x7c>)
 8000f36:	430b      	orrs	r3, r1
 8000f38:	61d3      	str	r3, [r2, #28]

		break ;
 8000f3a:	e00d      	b.n	8000f58 <RCC_RETURNtPeripheralEn+0x70>

	case APB2 :
		SET_BIT(RCC->APB2ENR ,PeripheralName ) ;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <RCC_RETURNtPeripheralEn+0x7c>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	79ba      	ldrb	r2, [r7, #6]
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <RCC_RETURNtPeripheralEn+0x7c>)
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6193      	str	r3, [r2, #24]
		break  ;
 8000f50:	e002      	b.n	8000f58 <RCC_RETURNtPeripheralEn+0x70>

	default :
		Local_error_state = ERROR_ret ;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
		break ;
 8000f56:	bf00      	nop

	}
	return  Local_error_state  ;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000

08000f68 <SysTick_vInit>:
 */


#include "SysTick/inc/SysTick_interface.h"

void SysTick_vInit(void) {
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

	/* disable SysTick exception */
	CLEAR_BIT(SysTick->CTRL, 1);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SysTick_vInit+0x24>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <SysTick_vInit+0x24>)
 8000f72:	f023 0302 	bic.w	r3, r3, #2
 8000f76:	6013      	str	r3, [r2, #0]
#if SysTick_ClkSource==SysTick_AHB_8
	CLEAR_BIT(SysTick->CTRL, 2);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_vInit+0x24>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <SysTick_vInit+0x24>)
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	6013      	str	r3, [r2, #0]
#elif SysTick_ClkSource==SysTick_AHB
	SET_BIT(SysTick->CTRL  , 2 ) ;

#endif

}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <SysTick_vDelayms>:

	}

}

void SysTick_vDelayms(uint32_t local_time) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

	local_time *= 1000;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	607b      	str	r3, [r7, #4]

	if (local_time < (1 << 25)) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000faa:	d216      	bcs.n	8000fda <SysTick_vDelayms+0x4a>

		SysTick->LOAD = local_time;
 8000fac:	4a35      	ldr	r2, [pc, #212]	; (8001084 <SysTick_vDelayms+0xf4>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6053      	str	r3, [r2, #4]

		SET_BIT(SysTick->CTRL, 0);
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <SysTick_vDelayms+0xf4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a33      	ldr	r2, [pc, #204]	; (8001084 <SysTick_vDelayms+0xf4>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6013      	str	r3, [r2, #0]

		while (!READ_BIT(SysTick->CTRL, 16))
 8000fbe:	bf00      	nop
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <SysTick_vDelayms+0xf4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f9      	beq.n	8000fc0 <SysTick_vDelayms+0x30>
			;

		CLEAR_BIT(SysTick->CTRL, 0);
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <SysTick_vDelayms+0xf4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <SysTick_vDelayms+0xf4>)
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000fd8:	e04e      	b.n	8001078 <SysTick_vDelayms+0xe8>
	else if (local_time > (1 << 25)) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fe0:	d94a      	bls.n	8001078 <SysTick_vDelayms+0xe8>
		uint32_t overfolow = local_time / 0xffffff;
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	f240 1301 	movw	r3, #257	; 0x101
 8000fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fec:	1ad2      	subs	r2, r2, r3
 8000fee:	0852      	lsrs	r2, r2, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	0ddb      	lsrs	r3, r3, #23
 8000ff4:	613b      	str	r3, [r7, #16]
		uint32_t rem = local_time / 0xffffff;
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	f240 1301 	movw	r3, #257	; 0x101
 8000ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8001000:	1ad2      	subs	r2, r2, r3
 8001002:	0852      	lsrs	r2, r2, #1
 8001004:	4413      	add	r3, r2
 8001006:	0ddb      	lsrs	r3, r3, #23
 8001008:	60fb      	str	r3, [r7, #12]
		SysTick->LOAD = rem;
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <SysTick_vDelayms+0xf4>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6053      	str	r3, [r2, #4]
		SET_BIT(SysTick->CTRL, 0);
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
		while (!READ_BIT(SysTick->CTRL, 16))
 800101c:	bf00      	nop
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f9      	beq.n	800101e <SysTick_vDelayms+0x8e>
		CLEAR_BIT(SysTick->CTRL, 0);
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <SysTick_vDelayms+0xf4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e019      	b.n	8001070 <SysTick_vDelayms+0xe0>
			SysTick->LOAD = 0xffffff;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <SysTick_vDelayms+0xf4>)
 800103e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001042:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <SysTick_vDelayms+0xf4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]
			while (!READ_BIT(SysTick->CTRL, 16))
 8001050:	bf00      	nop
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f9      	beq.n	8001052 <SysTick_vDelayms+0xc2>
			CLEAR_BIT(SysTick->CTRL, 0);
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <SysTick_vDelayms+0xf4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3e1      	bcc.n	800103c <SysTick_vDelayms+0xac>
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <SysTick_Handler>:

	}

}

void SysTick_Handler(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

	if (Overflow_needFlag == 0) {
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <SysTick_Handler+0x94>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10d      	bne.n	80010b0 <SysTick_Handler+0x28>

		/* stop timer */
		SET_BIT(SysTick->CTRL, 0);
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <SysTick_Handler+0x98>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SysTick_Handler+0x98>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]

		if (SysTickHandler_ptr != NULL_FPTR) {
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <SysTick_Handler+0x9c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d037      	beq.n	8001118 <SysTick_Handler+0x90>
			SysTickHandler_ptr();
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SysTick_Handler+0x9c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4798      	blx	r3

		}

	}

}
 80010ae:	e033      	b.n	8001118 <SysTick_Handler+0x90>
	} else if (Overflow_needFlag == 1) {
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <SysTick_Handler+0x94>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d12f      	bne.n	8001118 <SysTick_Handler+0x90>
		CLEAR_BIT(SysTick->CTRL, 0);
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <SysTick_Handler+0x98>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <SysTick_Handler+0x98>)
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <SysTick_Handler+0xa0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e00e      	b.n	80010ea <SysTick_Handler+0x62>
			SysTick->LOAD = 0xffffff;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <SysTick_Handler+0x98>)
 80010ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80010d2:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <SysTick_Handler+0x98>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <SysTick_Handler+0x98>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <SysTick_Handler+0xa0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <SysTick_Handler+0xa0>)
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <SysTick_Handler+0xa0>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SysTick_Handler+0xa4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <SysTick_Handler+0x44>
		if(i==(overflowInterrupt-1)){
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <SysTick_Handler+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <SysTick_Handler+0xa0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d109      	bne.n	8001118 <SysTick_Handler+0x90>
			if (SysTickHandler_ptr != NULL_FPTR) {
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <SysTick_Handler+0x9c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <SysTick_Handler+0x8a>
						SysTickHandler_ptr();
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Handler+0x9c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4798      	blx	r3
			i=0 ;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Handler+0xa0>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000155 	.word	0x20000155
 8001120:	e000e010 	.word	0xe000e010
 8001124:	2000015c 	.word	0x2000015c
 8001128:	20000160 	.word	0x20000160
 800112c:	20000158 	.word	0x20000158

08001130 <MyDMACallBaCK>:

}  ;



void MyDMACallBaCK(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0



	printf("hello") ;
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <MyDMACallBaCK+0x10>)
 8001136:	f000 fa0f 	bl	8001558 <iprintf>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	08002284 	.word	0x08002284

08001144 <main>:

int main() {
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0

	NVIC_SetPriorityConfig(NVIC_0GROUB_16SUB);
 800114a:	2007      	movs	r0, #7
 800114c:	f7ff fd7a 	bl	8000c44 <NVIC_SetPriorityConfig>

	NVIC_voidSetInterruptPriority(EXTI0_LINE, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2006      	movs	r0, #6
 8001156:	f7ff fd97 	bl	8000c88 <NVIC_voidSetInterruptPriority>

	NVIC_vEnableInterrupt(EXTI0_LINE);
 800115a:	2006      	movs	r0, #6
 800115c:	f7ff fe0a 	bl	8000d74 <NVIC_vEnableInterrupt>
	DMA1_Channel6_LINE,
	DMA1_Channel7_LINE,
	 *
	 *
	 */
	NVIC_vEnableInterrupt(DMA1_Channel1_LINE);
 8001160:	200b      	movs	r0, #11
 8001162:	f7ff fe07 	bl	8000d74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(DMA1_Channel2_LINE);
 8001166:	200c      	movs	r0, #12
 8001168:	f7ff fe04 	bl	8000d74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(DMA1_Channel3_LINE);
 800116c:	200d      	movs	r0, #13
 800116e:	f7ff fe01 	bl	8000d74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(DMA1_Channel4_LINE);
 8001172:	200e      	movs	r0, #14
 8001174:	f7ff fdfe 	bl	8000d74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(DMA1_Channel5_LINE);
 8001178:	200f      	movs	r0, #15
 800117a:	f7ff fdfb 	bl	8000d74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(DMA1_Channel6_LINE);
 800117e:	2010      	movs	r0, #16
 8001180:	f7ff fdf8 	bl	8000d74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(DMA1_Channel7_LINE);
 8001184:	2011      	movs	r0, #17
 8001186:	f7ff fdf5 	bl	8000d74 <NVIC_vEnableInterrupt>


	RCC_RETURNtInit();
 800118a:	f7ff fe13 	bl	8000db4 <RCC_RETURNtInit>

	RCC_RETURNtPeripheralEn(APB2, AFIO_APB2_peripherals);
 800118e:	2100      	movs	r1, #0
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff fea9 	bl	8000ee8 <RCC_RETURNtPeripheralEn>

	RCC_RETURNtPeripheralEn(APB2, PORTA_APB2_peripherals);
 8001196:	2102      	movs	r1, #2
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff fea5 	bl	8000ee8 <RCC_RETURNtPeripheralEn>
	RCC_RETURNtPeripheralEn(APB2, PORTB_APB2_peripherals);
 800119e:	2103      	movs	r1, #3
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fea1 	bl	8000ee8 <RCC_RETURNtPeripheralEn>

	RCC_RETURNtPeripheralEn(AHB, DMA1_AHB_peripherals);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fe9d 	bl	8000ee8 <RCC_RETURNtPeripheralEn>
	RCC_RETURNtPeripheralEn(AHB, DMA2_AHB_peripherals);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fe99 	bl	8000ee8 <RCC_RETURNtPeripheralEn>

	/* alternate EXT0 -> PORTB0 */
	//*(uint32_t*) 0x40010008 = 1;


	GPIO_RETURNtPinInit(&Pina2);
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <main+0xd4>)
 80011b8:	f7ff fc70 	bl	8000a9c <GPIO_RETURNtPinInit>

	/*GPIO_PinConfig Pinb0 = { GPIO_PORTB, GPIO_Pin0,
		GPIO_PinModeInput_PU, High_O

		};*/
	SysTick_vInit();
 80011bc:	f7ff fed4 	bl	8000f68 <SysTick_vInit>


	DMA_RETURNtInit(&prdma1) ;
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <main+0xd8>)
 80011c2:	f7ff fa5f 	bl	8000684 <DMA_RETURNtInit>

	//uint32_t value   = 0xFFFFFFFF ;


	uint16_t srcArray[10]  = {10,11,12,13,14,15,16,17,18,19} ;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <main+0xdc>)
 80011c8:	f107 0418 	add.w	r4, r7, #24
 80011cc:	461d      	mov	r5, r3
 80011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	6023      	str	r3, [r4, #0]
	uint16_t desArray[10]  = {0} ;
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

	DMA_RETURNtRegisterCallBack(&prdma1, &MyDMACallBaCK) ;
 80011e4:	490f      	ldr	r1, [pc, #60]	; (8001224 <main+0xe0>)
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <main+0xd8>)
 80011e8:	f7ff fad8 	bl	800079c <DMA_RETURNtRegisterCallBack>
	DMA_RETURNtstart(&prdma1, (uint32_t)&srcArray, (uint32_t)&desArray,10) ;
 80011ec:	f107 0118 	add.w	r1, r7, #24
 80011f0:	1d3a      	adds	r2, r7, #4
 80011f2:	230a      	movs	r3, #10
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <main+0xd8>)
 80011f6:	f7ff fa7d 	bl	80006f4 <DMA_RETURNtstart>


	LCD_Init();
 80011fa:	f7ff f90b 	bl	8000414 <LCD_Init>
	KeyPad_vInit();
 80011fe:	f7fe ffb7 	bl	8000170 <KeyPad_vInit>

	LCD_WriteChar(GPIOA->ODR) ;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <main+0xe4>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f93b 	bl	8000484 <LCD_WriteChar>

	/*EXTI_RETURNtSetInterruptEdge(EXTI_LINE0, FALLING_EDGE) ;
	 EXTI_RETURNtSetInterruptStatus(EXTI_LINE0 ,EXTINonMasked) ;
	 EXTI_RETURNtSetCalbackFunction(EXTI_LINE0, TogglePinB0)  ;*/
	uint8_t result = NO_KEY;
 800120e:	2323      	movs	r3, #35	; 0x23
 8001210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while (1) {
 8001214:	e7fe      	b.n	8001214 <main+0xd0>
 8001216:	bf00      	nop
 8001218:	20000044 	.word	0x20000044
 800121c:	20000048 	.word	0x20000048
 8001220:	0800228c 	.word	0x0800228c
 8001224:	08001131 	.word	0x08001131
 8001228:	40010800 	.word	0x40010800

0800122c <WWDG_IRQHandler>:
	 */

	return 0;
}

void WWDG_IRQHandler(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

	printf("Hello ");
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <WWDG_IRQHandler+0x10>)
 8001232:	f000 f991 	bl	8001558 <iprintf>

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	080022a0 	.word	0x080022a0

08001240 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
  }

  return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e009      	b.n	80012a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbf1      	blt.n	800128c <_write+0x12>
  }
  return len;
 80012a8:	687b      	ldr	r3, [r7, #4]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_close>:

int _close(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d8:	605a      	str	r2, [r3, #4]
  return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
	...

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f000 f9ac 	bl	80016a0 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20005000 	.word	0x20005000
 8001374:	00000400 	.word	0x00000400
 8001378:	20000164 	.word	0x20000164
 800137c:	200002b8 	.word	0x200002b8

08001380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ae:	f000 f97d 	bl	80016ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b2:	f7ff fec7 	bl	8001144 <main>

080013b6 <LoopForever>:

LoopForever:
  b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   r0, =_estack
 80013b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80013c4:	080022e4 	.word	0x080022e4
  ldr r2, =_sbss
 80013c8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80013cc:	200002b4 	.word	0x200002b4

080013d0 <ADC1_2_IRQHandler>:
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:

  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <std>:
 80013d4:	2300      	movs	r3, #0
 80013d6:	b510      	push	{r4, lr}
 80013d8:	4604      	mov	r4, r0
 80013da:	e9c0 3300 	strd	r3, r3, [r0]
 80013de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013e2:	6083      	str	r3, [r0, #8]
 80013e4:	8181      	strh	r1, [r0, #12]
 80013e6:	6643      	str	r3, [r0, #100]	; 0x64
 80013e8:	81c2      	strh	r2, [r0, #14]
 80013ea:	6183      	str	r3, [r0, #24]
 80013ec:	4619      	mov	r1, r3
 80013ee:	2208      	movs	r2, #8
 80013f0:	305c      	adds	r0, #92	; 0x5c
 80013f2:	f000 f906 	bl	8001602 <memset>
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <std+0x58>)
 80013f8:	6224      	str	r4, [r4, #32]
 80013fa:	6263      	str	r3, [r4, #36]	; 0x24
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <std+0x5c>)
 80013fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <std+0x60>)
 8001402:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <std+0x64>)
 8001406:	6323      	str	r3, [r4, #48]	; 0x30
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <std+0x68>)
 800140a:	429c      	cmp	r4, r3
 800140c:	d006      	beq.n	800141c <std+0x48>
 800140e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001412:	4294      	cmp	r4, r2
 8001414:	d002      	beq.n	800141c <std+0x48>
 8001416:	33d0      	adds	r3, #208	; 0xd0
 8001418:	429c      	cmp	r4, r3
 800141a:	d105      	bne.n	8001428 <std+0x54>
 800141c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001424:	f000 b966 	b.w	80016f4 <__retarget_lock_init_recursive>
 8001428:	bd10      	pop	{r4, pc}
 800142a:	bf00      	nop
 800142c:	0800157d 	.word	0x0800157d
 8001430:	0800159f 	.word	0x0800159f
 8001434:	080015d7 	.word	0x080015d7
 8001438:	080015fb 	.word	0x080015fb
 800143c:	20000168 	.word	0x20000168

08001440 <stdio_exit_handler>:
 8001440:	4a02      	ldr	r2, [pc, #8]	; (800144c <stdio_exit_handler+0xc>)
 8001442:	4903      	ldr	r1, [pc, #12]	; (8001450 <stdio_exit_handler+0x10>)
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <stdio_exit_handler+0x14>)
 8001446:	f000 b869 	b.w	800151c <_fwalk_sglue>
 800144a:	bf00      	nop
 800144c:	2000004c 	.word	0x2000004c
 8001450:	08001f95 	.word	0x08001f95
 8001454:	20000058 	.word	0x20000058

08001458 <cleanup_stdio>:
 8001458:	6841      	ldr	r1, [r0, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <cleanup_stdio+0x34>)
 800145c:	b510      	push	{r4, lr}
 800145e:	4299      	cmp	r1, r3
 8001460:	4604      	mov	r4, r0
 8001462:	d001      	beq.n	8001468 <cleanup_stdio+0x10>
 8001464:	f000 fd96 	bl	8001f94 <_fflush_r>
 8001468:	68a1      	ldr	r1, [r4, #8]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <cleanup_stdio+0x38>)
 800146c:	4299      	cmp	r1, r3
 800146e:	d002      	beq.n	8001476 <cleanup_stdio+0x1e>
 8001470:	4620      	mov	r0, r4
 8001472:	f000 fd8f 	bl	8001f94 <_fflush_r>
 8001476:	68e1      	ldr	r1, [r4, #12]
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <cleanup_stdio+0x3c>)
 800147a:	4299      	cmp	r1, r3
 800147c:	d004      	beq.n	8001488 <cleanup_stdio+0x30>
 800147e:	4620      	mov	r0, r4
 8001480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001484:	f000 bd86 	b.w	8001f94 <_fflush_r>
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	20000168 	.word	0x20000168
 8001490:	200001d0 	.word	0x200001d0
 8001494:	20000238 	.word	0x20000238

08001498 <global_stdio_init.part.0>:
 8001498:	b510      	push	{r4, lr}
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <global_stdio_init.part.0+0x30>)
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <global_stdio_init.part.0+0x34>)
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <global_stdio_init.part.0+0x38>)
 80014a0:	4620      	mov	r0, r4
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	2104      	movs	r1, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	f7ff ff94 	bl	80013d4 <std>
 80014ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80014b0:	2201      	movs	r2, #1
 80014b2:	2109      	movs	r1, #9
 80014b4:	f7ff ff8e 	bl	80013d4 <std>
 80014b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80014bc:	2202      	movs	r2, #2
 80014be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c2:	2112      	movs	r1, #18
 80014c4:	f7ff bf86 	b.w	80013d4 <std>
 80014c8:	200002a0 	.word	0x200002a0
 80014cc:	20000168 	.word	0x20000168
 80014d0:	08001441 	.word	0x08001441

080014d4 <__sfp_lock_acquire>:
 80014d4:	4801      	ldr	r0, [pc, #4]	; (80014dc <__sfp_lock_acquire+0x8>)
 80014d6:	f000 b90e 	b.w	80016f6 <__retarget_lock_acquire_recursive>
 80014da:	bf00      	nop
 80014dc:	200002a9 	.word	0x200002a9

080014e0 <__sfp_lock_release>:
 80014e0:	4801      	ldr	r0, [pc, #4]	; (80014e8 <__sfp_lock_release+0x8>)
 80014e2:	f000 b909 	b.w	80016f8 <__retarget_lock_release_recursive>
 80014e6:	bf00      	nop
 80014e8:	200002a9 	.word	0x200002a9

080014ec <__sinit>:
 80014ec:	b510      	push	{r4, lr}
 80014ee:	4604      	mov	r4, r0
 80014f0:	f7ff fff0 	bl	80014d4 <__sfp_lock_acquire>
 80014f4:	6a23      	ldr	r3, [r4, #32]
 80014f6:	b11b      	cbz	r3, 8001500 <__sinit+0x14>
 80014f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014fc:	f7ff bff0 	b.w	80014e0 <__sfp_lock_release>
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__sinit+0x28>)
 8001502:	6223      	str	r3, [r4, #32]
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__sinit+0x2c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f5      	bne.n	80014f8 <__sinit+0xc>
 800150c:	f7ff ffc4 	bl	8001498 <global_stdio_init.part.0>
 8001510:	e7f2      	b.n	80014f8 <__sinit+0xc>
 8001512:	bf00      	nop
 8001514:	08001459 	.word	0x08001459
 8001518:	200002a0 	.word	0x200002a0

0800151c <_fwalk_sglue>:
 800151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001520:	4607      	mov	r7, r0
 8001522:	4688      	mov	r8, r1
 8001524:	4614      	mov	r4, r2
 8001526:	2600      	movs	r6, #0
 8001528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800152c:	f1b9 0901 	subs.w	r9, r9, #1
 8001530:	d505      	bpl.n	800153e <_fwalk_sglue+0x22>
 8001532:	6824      	ldr	r4, [r4, #0]
 8001534:	2c00      	cmp	r4, #0
 8001536:	d1f7      	bne.n	8001528 <_fwalk_sglue+0xc>
 8001538:	4630      	mov	r0, r6
 800153a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800153e:	89ab      	ldrh	r3, [r5, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d907      	bls.n	8001554 <_fwalk_sglue+0x38>
 8001544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001548:	3301      	adds	r3, #1
 800154a:	d003      	beq.n	8001554 <_fwalk_sglue+0x38>
 800154c:	4629      	mov	r1, r5
 800154e:	4638      	mov	r0, r7
 8001550:	47c0      	blx	r8
 8001552:	4306      	orrs	r6, r0
 8001554:	3568      	adds	r5, #104	; 0x68
 8001556:	e7e9      	b.n	800152c <_fwalk_sglue+0x10>

08001558 <iprintf>:
 8001558:	b40f      	push	{r0, r1, r2, r3}
 800155a:	b507      	push	{r0, r1, r2, lr}
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <iprintf+0x20>)
 800155e:	ab04      	add	r3, sp, #16
 8001560:	6808      	ldr	r0, [r1, #0]
 8001562:	f853 2b04 	ldr.w	r2, [r3], #4
 8001566:	6881      	ldr	r1, [r0, #8]
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f000 f9e3 	bl	8001934 <_vfiprintf_r>
 800156e:	b003      	add	sp, #12
 8001570:	f85d eb04 	ldr.w	lr, [sp], #4
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr
 8001578:	200000a4 	.word	0x200000a4

0800157c <__sread>:
 800157c:	b510      	push	{r4, lr}
 800157e:	460c      	mov	r4, r1
 8001580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001584:	f000 f868 	bl	8001658 <_read_r>
 8001588:	2800      	cmp	r0, #0
 800158a:	bfab      	itete	ge
 800158c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800158e:	89a3      	ldrhlt	r3, [r4, #12]
 8001590:	181b      	addge	r3, r3, r0
 8001592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001596:	bfac      	ite	ge
 8001598:	6563      	strge	r3, [r4, #84]	; 0x54
 800159a:	81a3      	strhlt	r3, [r4, #12]
 800159c:	bd10      	pop	{r4, pc}

0800159e <__swrite>:
 800159e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a2:	461f      	mov	r7, r3
 80015a4:	898b      	ldrh	r3, [r1, #12]
 80015a6:	4605      	mov	r5, r0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	460c      	mov	r4, r1
 80015ac:	4616      	mov	r6, r2
 80015ae:	d505      	bpl.n	80015bc <__swrite+0x1e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	2200      	movs	r2, #0
 80015b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015b8:	f000 f83c 	bl	8001634 <_lseek_r>
 80015bc:	89a3      	ldrh	r3, [r4, #12]
 80015be:	4632      	mov	r2, r6
 80015c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015c4:	81a3      	strh	r3, [r4, #12]
 80015c6:	4628      	mov	r0, r5
 80015c8:	463b      	mov	r3, r7
 80015ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015d2:	f000 b853 	b.w	800167c <_write_r>

080015d6 <__sseek>:
 80015d6:	b510      	push	{r4, lr}
 80015d8:	460c      	mov	r4, r1
 80015da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015de:	f000 f829 	bl	8001634 <_lseek_r>
 80015e2:	1c43      	adds	r3, r0, #1
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	bf15      	itete	ne
 80015e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80015ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015f2:	81a3      	strheq	r3, [r4, #12]
 80015f4:	bf18      	it	ne
 80015f6:	81a3      	strhne	r3, [r4, #12]
 80015f8:	bd10      	pop	{r4, pc}

080015fa <__sclose>:
 80015fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015fe:	f000 b809 	b.w	8001614 <_close_r>

08001602 <memset>:
 8001602:	4603      	mov	r3, r0
 8001604:	4402      	add	r2, r0
 8001606:	4293      	cmp	r3, r2
 8001608:	d100      	bne.n	800160c <memset+0xa>
 800160a:	4770      	bx	lr
 800160c:	f803 1b01 	strb.w	r1, [r3], #1
 8001610:	e7f9      	b.n	8001606 <memset+0x4>
	...

08001614 <_close_r>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	2300      	movs	r3, #0
 8001618:	4d05      	ldr	r5, [pc, #20]	; (8001630 <_close_r+0x1c>)
 800161a:	4604      	mov	r4, r0
 800161c:	4608      	mov	r0, r1
 800161e:	602b      	str	r3, [r5, #0]
 8001620:	f7ff fe47 	bl	80012b2 <_close>
 8001624:	1c43      	adds	r3, r0, #1
 8001626:	d102      	bne.n	800162e <_close_r+0x1a>
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	b103      	cbz	r3, 800162e <_close_r+0x1a>
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	bd38      	pop	{r3, r4, r5, pc}
 8001630:	200002a4 	.word	0x200002a4

08001634 <_lseek_r>:
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	2200      	movs	r2, #0
 800163e:	4d05      	ldr	r5, [pc, #20]	; (8001654 <_lseek_r+0x20>)
 8001640:	602a      	str	r2, [r5, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	f7ff fe59 	bl	80012fa <_lseek>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d102      	bne.n	8001652 <_lseek_r+0x1e>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	b103      	cbz	r3, 8001652 <_lseek_r+0x1e>
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	200002a4 	.word	0x200002a4

08001658 <_read_r>:
 8001658:	b538      	push	{r3, r4, r5, lr}
 800165a:	4604      	mov	r4, r0
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	2200      	movs	r2, #0
 8001662:	4d05      	ldr	r5, [pc, #20]	; (8001678 <_read_r+0x20>)
 8001664:	602a      	str	r2, [r5, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	f7ff fdea 	bl	8001240 <_read>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	d102      	bne.n	8001676 <_read_r+0x1e>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	b103      	cbz	r3, 8001676 <_read_r+0x1e>
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	200002a4 	.word	0x200002a4

0800167c <_write_r>:
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4604      	mov	r4, r0
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	2200      	movs	r2, #0
 8001686:	4d05      	ldr	r5, [pc, #20]	; (800169c <_write_r+0x20>)
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	f7ff fdf5 	bl	800127a <_write>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_write_r+0x1e>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b103      	cbz	r3, 800169a <_write_r+0x1e>
 8001698:	6023      	str	r3, [r4, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	200002a4 	.word	0x200002a4

080016a0 <__errno>:
 80016a0:	4b01      	ldr	r3, [pc, #4]	; (80016a8 <__errno+0x8>)
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200000a4 	.word	0x200000a4

080016ac <__libc_init_array>:
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	2600      	movs	r6, #0
 80016b0:	4d0c      	ldr	r5, [pc, #48]	; (80016e4 <__libc_init_array+0x38>)
 80016b2:	4c0d      	ldr	r4, [pc, #52]	; (80016e8 <__libc_init_array+0x3c>)
 80016b4:	1b64      	subs	r4, r4, r5
 80016b6:	10a4      	asrs	r4, r4, #2
 80016b8:	42a6      	cmp	r6, r4
 80016ba:	d109      	bne.n	80016d0 <__libc_init_array+0x24>
 80016bc:	f000 fdca 	bl	8002254 <_init>
 80016c0:	2600      	movs	r6, #0
 80016c2:	4d0a      	ldr	r5, [pc, #40]	; (80016ec <__libc_init_array+0x40>)
 80016c4:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <__libc_init_array+0x44>)
 80016c6:	1b64      	subs	r4, r4, r5
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	42a6      	cmp	r6, r4
 80016cc:	d105      	bne.n	80016da <__libc_init_array+0x2e>
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d4:	4798      	blx	r3
 80016d6:	3601      	adds	r6, #1
 80016d8:	e7ee      	b.n	80016b8 <__libc_init_array+0xc>
 80016da:	f855 3b04 	ldr.w	r3, [r5], #4
 80016de:	4798      	blx	r3
 80016e0:	3601      	adds	r6, #1
 80016e2:	e7f2      	b.n	80016ca <__libc_init_array+0x1e>
 80016e4:	080022dc 	.word	0x080022dc
 80016e8:	080022dc 	.word	0x080022dc
 80016ec:	080022dc 	.word	0x080022dc
 80016f0:	080022e0 	.word	0x080022e0

080016f4 <__retarget_lock_init_recursive>:
 80016f4:	4770      	bx	lr

080016f6 <__retarget_lock_acquire_recursive>:
 80016f6:	4770      	bx	lr

080016f8 <__retarget_lock_release_recursive>:
 80016f8:	4770      	bx	lr
	...

080016fc <_free_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4605      	mov	r5, r0
 8001700:	2900      	cmp	r1, #0
 8001702:	d040      	beq.n	8001786 <_free_r+0x8a>
 8001704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001708:	1f0c      	subs	r4, r1, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	bfb8      	it	lt
 800170e:	18e4      	addlt	r4, r4, r3
 8001710:	f000 f8dc 	bl	80018cc <__malloc_lock>
 8001714:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <_free_r+0x8c>)
 8001716:	6813      	ldr	r3, [r2, #0]
 8001718:	b933      	cbnz	r3, 8001728 <_free_r+0x2c>
 800171a:	6063      	str	r3, [r4, #4]
 800171c:	6014      	str	r4, [r2, #0]
 800171e:	4628      	mov	r0, r5
 8001720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001724:	f000 b8d8 	b.w	80018d8 <__malloc_unlock>
 8001728:	42a3      	cmp	r3, r4
 800172a:	d908      	bls.n	800173e <_free_r+0x42>
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	1821      	adds	r1, r4, r0
 8001730:	428b      	cmp	r3, r1
 8001732:	bf01      	itttt	eq
 8001734:	6819      	ldreq	r1, [r3, #0]
 8001736:	685b      	ldreq	r3, [r3, #4]
 8001738:	1809      	addeq	r1, r1, r0
 800173a:	6021      	streq	r1, [r4, #0]
 800173c:	e7ed      	b.n	800171a <_free_r+0x1e>
 800173e:	461a      	mov	r2, r3
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	b10b      	cbz	r3, 8001748 <_free_r+0x4c>
 8001744:	42a3      	cmp	r3, r4
 8001746:	d9fa      	bls.n	800173e <_free_r+0x42>
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	1850      	adds	r0, r2, r1
 800174c:	42a0      	cmp	r0, r4
 800174e:	d10b      	bne.n	8001768 <_free_r+0x6c>
 8001750:	6820      	ldr	r0, [r4, #0]
 8001752:	4401      	add	r1, r0
 8001754:	1850      	adds	r0, r2, r1
 8001756:	4283      	cmp	r3, r0
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	d1e0      	bne.n	800171e <_free_r+0x22>
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4408      	add	r0, r1
 8001762:	6010      	str	r0, [r2, #0]
 8001764:	6053      	str	r3, [r2, #4]
 8001766:	e7da      	b.n	800171e <_free_r+0x22>
 8001768:	d902      	bls.n	8001770 <_free_r+0x74>
 800176a:	230c      	movs	r3, #12
 800176c:	602b      	str	r3, [r5, #0]
 800176e:	e7d6      	b.n	800171e <_free_r+0x22>
 8001770:	6820      	ldr	r0, [r4, #0]
 8001772:	1821      	adds	r1, r4, r0
 8001774:	428b      	cmp	r3, r1
 8001776:	bf01      	itttt	eq
 8001778:	6819      	ldreq	r1, [r3, #0]
 800177a:	685b      	ldreq	r3, [r3, #4]
 800177c:	1809      	addeq	r1, r1, r0
 800177e:	6021      	streq	r1, [r4, #0]
 8001780:	6063      	str	r3, [r4, #4]
 8001782:	6054      	str	r4, [r2, #4]
 8001784:	e7cb      	b.n	800171e <_free_r+0x22>
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	200002ac 	.word	0x200002ac

0800178c <sbrk_aligned>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	4e0e      	ldr	r6, [pc, #56]	; (80017c8 <sbrk_aligned+0x3c>)
 8001790:	460c      	mov	r4, r1
 8001792:	6831      	ldr	r1, [r6, #0]
 8001794:	4605      	mov	r5, r0
 8001796:	b911      	cbnz	r1, 800179e <sbrk_aligned+0x12>
 8001798:	f000 fcba 	bl	8002110 <_sbrk_r>
 800179c:	6030      	str	r0, [r6, #0]
 800179e:	4621      	mov	r1, r4
 80017a0:	4628      	mov	r0, r5
 80017a2:	f000 fcb5 	bl	8002110 <_sbrk_r>
 80017a6:	1c43      	adds	r3, r0, #1
 80017a8:	d00a      	beq.n	80017c0 <sbrk_aligned+0x34>
 80017aa:	1cc4      	adds	r4, r0, #3
 80017ac:	f024 0403 	bic.w	r4, r4, #3
 80017b0:	42a0      	cmp	r0, r4
 80017b2:	d007      	beq.n	80017c4 <sbrk_aligned+0x38>
 80017b4:	1a21      	subs	r1, r4, r0
 80017b6:	4628      	mov	r0, r5
 80017b8:	f000 fcaa 	bl	8002110 <_sbrk_r>
 80017bc:	3001      	adds	r0, #1
 80017be:	d101      	bne.n	80017c4 <sbrk_aligned+0x38>
 80017c0:	f04f 34ff 	mov.w	r4, #4294967295
 80017c4:	4620      	mov	r0, r4
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
 80017c8:	200002b0 	.word	0x200002b0

080017cc <_malloc_r>:
 80017cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017d0:	1ccd      	adds	r5, r1, #3
 80017d2:	f025 0503 	bic.w	r5, r5, #3
 80017d6:	3508      	adds	r5, #8
 80017d8:	2d0c      	cmp	r5, #12
 80017da:	bf38      	it	cc
 80017dc:	250c      	movcc	r5, #12
 80017de:	2d00      	cmp	r5, #0
 80017e0:	4607      	mov	r7, r0
 80017e2:	db01      	blt.n	80017e8 <_malloc_r+0x1c>
 80017e4:	42a9      	cmp	r1, r5
 80017e6:	d905      	bls.n	80017f4 <_malloc_r+0x28>
 80017e8:	230c      	movs	r3, #12
 80017ea:	2600      	movs	r6, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4630      	mov	r0, r6
 80017f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80018c8 <_malloc_r+0xfc>
 80017f8:	f000 f868 	bl	80018cc <__malloc_lock>
 80017fc:	f8d8 3000 	ldr.w	r3, [r8]
 8001800:	461c      	mov	r4, r3
 8001802:	bb5c      	cbnz	r4, 800185c <_malloc_r+0x90>
 8001804:	4629      	mov	r1, r5
 8001806:	4638      	mov	r0, r7
 8001808:	f7ff ffc0 	bl	800178c <sbrk_aligned>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	4604      	mov	r4, r0
 8001810:	d155      	bne.n	80018be <_malloc_r+0xf2>
 8001812:	f8d8 4000 	ldr.w	r4, [r8]
 8001816:	4626      	mov	r6, r4
 8001818:	2e00      	cmp	r6, #0
 800181a:	d145      	bne.n	80018a8 <_malloc_r+0xdc>
 800181c:	2c00      	cmp	r4, #0
 800181e:	d048      	beq.n	80018b2 <_malloc_r+0xe6>
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	4631      	mov	r1, r6
 8001824:	4638      	mov	r0, r7
 8001826:	eb04 0903 	add.w	r9, r4, r3
 800182a:	f000 fc71 	bl	8002110 <_sbrk_r>
 800182e:	4581      	cmp	r9, r0
 8001830:	d13f      	bne.n	80018b2 <_malloc_r+0xe6>
 8001832:	6821      	ldr	r1, [r4, #0]
 8001834:	4638      	mov	r0, r7
 8001836:	1a6d      	subs	r5, r5, r1
 8001838:	4629      	mov	r1, r5
 800183a:	f7ff ffa7 	bl	800178c <sbrk_aligned>
 800183e:	3001      	adds	r0, #1
 8001840:	d037      	beq.n	80018b2 <_malloc_r+0xe6>
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	442b      	add	r3, r5
 8001846:	6023      	str	r3, [r4, #0]
 8001848:	f8d8 3000 	ldr.w	r3, [r8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d038      	beq.n	80018c2 <_malloc_r+0xf6>
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	42a2      	cmp	r2, r4
 8001854:	d12b      	bne.n	80018ae <_malloc_r+0xe2>
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	e00f      	b.n	800187c <_malloc_r+0xb0>
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	1b52      	subs	r2, r2, r5
 8001860:	d41f      	bmi.n	80018a2 <_malloc_r+0xd6>
 8001862:	2a0b      	cmp	r2, #11
 8001864:	d917      	bls.n	8001896 <_malloc_r+0xca>
 8001866:	1961      	adds	r1, r4, r5
 8001868:	42a3      	cmp	r3, r4
 800186a:	6025      	str	r5, [r4, #0]
 800186c:	bf18      	it	ne
 800186e:	6059      	strne	r1, [r3, #4]
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	bf08      	it	eq
 8001874:	f8c8 1000 	streq.w	r1, [r8]
 8001878:	5162      	str	r2, [r4, r5]
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	4638      	mov	r0, r7
 800187e:	f104 060b 	add.w	r6, r4, #11
 8001882:	f000 f829 	bl	80018d8 <__malloc_unlock>
 8001886:	f026 0607 	bic.w	r6, r6, #7
 800188a:	1d23      	adds	r3, r4, #4
 800188c:	1af2      	subs	r2, r6, r3
 800188e:	d0ae      	beq.n	80017ee <_malloc_r+0x22>
 8001890:	1b9b      	subs	r3, r3, r6
 8001892:	50a3      	str	r3, [r4, r2]
 8001894:	e7ab      	b.n	80017ee <_malloc_r+0x22>
 8001896:	42a3      	cmp	r3, r4
 8001898:	6862      	ldr	r2, [r4, #4]
 800189a:	d1dd      	bne.n	8001858 <_malloc_r+0x8c>
 800189c:	f8c8 2000 	str.w	r2, [r8]
 80018a0:	e7ec      	b.n	800187c <_malloc_r+0xb0>
 80018a2:	4623      	mov	r3, r4
 80018a4:	6864      	ldr	r4, [r4, #4]
 80018a6:	e7ac      	b.n	8001802 <_malloc_r+0x36>
 80018a8:	4634      	mov	r4, r6
 80018aa:	6876      	ldr	r6, [r6, #4]
 80018ac:	e7b4      	b.n	8001818 <_malloc_r+0x4c>
 80018ae:	4613      	mov	r3, r2
 80018b0:	e7cc      	b.n	800184c <_malloc_r+0x80>
 80018b2:	230c      	movs	r3, #12
 80018b4:	4638      	mov	r0, r7
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	f000 f80e 	bl	80018d8 <__malloc_unlock>
 80018bc:	e797      	b.n	80017ee <_malloc_r+0x22>
 80018be:	6025      	str	r5, [r4, #0]
 80018c0:	e7dc      	b.n	800187c <_malloc_r+0xb0>
 80018c2:	605b      	str	r3, [r3, #4]
 80018c4:	deff      	udf	#255	; 0xff
 80018c6:	bf00      	nop
 80018c8:	200002ac 	.word	0x200002ac

080018cc <__malloc_lock>:
 80018cc:	4801      	ldr	r0, [pc, #4]	; (80018d4 <__malloc_lock+0x8>)
 80018ce:	f7ff bf12 	b.w	80016f6 <__retarget_lock_acquire_recursive>
 80018d2:	bf00      	nop
 80018d4:	200002a8 	.word	0x200002a8

080018d8 <__malloc_unlock>:
 80018d8:	4801      	ldr	r0, [pc, #4]	; (80018e0 <__malloc_unlock+0x8>)
 80018da:	f7ff bf0d 	b.w	80016f8 <__retarget_lock_release_recursive>
 80018de:	bf00      	nop
 80018e0:	200002a8 	.word	0x200002a8

080018e4 <__sfputc_r>:
 80018e4:	6893      	ldr	r3, [r2, #8]
 80018e6:	b410      	push	{r4}
 80018e8:	3b01      	subs	r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	6093      	str	r3, [r2, #8]
 80018ee:	da07      	bge.n	8001900 <__sfputc_r+0x1c>
 80018f0:	6994      	ldr	r4, [r2, #24]
 80018f2:	42a3      	cmp	r3, r4
 80018f4:	db01      	blt.n	80018fa <__sfputc_r+0x16>
 80018f6:	290a      	cmp	r1, #10
 80018f8:	d102      	bne.n	8001900 <__sfputc_r+0x1c>
 80018fa:	bc10      	pop	{r4}
 80018fc:	f000 bb72 	b.w	8001fe4 <__swbuf_r>
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	1c58      	adds	r0, r3, #1
 8001904:	6010      	str	r0, [r2, #0]
 8001906:	7019      	strb	r1, [r3, #0]
 8001908:	4608      	mov	r0, r1
 800190a:	bc10      	pop	{r4}
 800190c:	4770      	bx	lr

0800190e <__sfputs_r>:
 800190e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001910:	4606      	mov	r6, r0
 8001912:	460f      	mov	r7, r1
 8001914:	4614      	mov	r4, r2
 8001916:	18d5      	adds	r5, r2, r3
 8001918:	42ac      	cmp	r4, r5
 800191a:	d101      	bne.n	8001920 <__sfputs_r+0x12>
 800191c:	2000      	movs	r0, #0
 800191e:	e007      	b.n	8001930 <__sfputs_r+0x22>
 8001920:	463a      	mov	r2, r7
 8001922:	4630      	mov	r0, r6
 8001924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001928:	f7ff ffdc 	bl	80018e4 <__sfputc_r>
 800192c:	1c43      	adds	r3, r0, #1
 800192e:	d1f3      	bne.n	8001918 <__sfputs_r+0xa>
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001934 <_vfiprintf_r>:
 8001934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001938:	460d      	mov	r5, r1
 800193a:	4614      	mov	r4, r2
 800193c:	4698      	mov	r8, r3
 800193e:	4606      	mov	r6, r0
 8001940:	b09d      	sub	sp, #116	; 0x74
 8001942:	b118      	cbz	r0, 800194c <_vfiprintf_r+0x18>
 8001944:	6a03      	ldr	r3, [r0, #32]
 8001946:	b90b      	cbnz	r3, 800194c <_vfiprintf_r+0x18>
 8001948:	f7ff fdd0 	bl	80014ec <__sinit>
 800194c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800194e:	07d9      	lsls	r1, r3, #31
 8001950:	d405      	bmi.n	800195e <_vfiprintf_r+0x2a>
 8001952:	89ab      	ldrh	r3, [r5, #12]
 8001954:	059a      	lsls	r2, r3, #22
 8001956:	d402      	bmi.n	800195e <_vfiprintf_r+0x2a>
 8001958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800195a:	f7ff fecc 	bl	80016f6 <__retarget_lock_acquire_recursive>
 800195e:	89ab      	ldrh	r3, [r5, #12]
 8001960:	071b      	lsls	r3, r3, #28
 8001962:	d501      	bpl.n	8001968 <_vfiprintf_r+0x34>
 8001964:	692b      	ldr	r3, [r5, #16]
 8001966:	b99b      	cbnz	r3, 8001990 <_vfiprintf_r+0x5c>
 8001968:	4629      	mov	r1, r5
 800196a:	4630      	mov	r0, r6
 800196c:	f000 fb78 	bl	8002060 <__swsetup_r>
 8001970:	b170      	cbz	r0, 8001990 <_vfiprintf_r+0x5c>
 8001972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001974:	07dc      	lsls	r4, r3, #31
 8001976:	d504      	bpl.n	8001982 <_vfiprintf_r+0x4e>
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	b01d      	add	sp, #116	; 0x74
 800197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001982:	89ab      	ldrh	r3, [r5, #12]
 8001984:	0598      	lsls	r0, r3, #22
 8001986:	d4f7      	bmi.n	8001978 <_vfiprintf_r+0x44>
 8001988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800198a:	f7ff feb5 	bl	80016f8 <__retarget_lock_release_recursive>
 800198e:	e7f3      	b.n	8001978 <_vfiprintf_r+0x44>
 8001990:	2300      	movs	r3, #0
 8001992:	9309      	str	r3, [sp, #36]	; 0x24
 8001994:	2320      	movs	r3, #32
 8001996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800199a:	2330      	movs	r3, #48	; 0x30
 800199c:	f04f 0901 	mov.w	r9, #1
 80019a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80019a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001b54 <_vfiprintf_r+0x220>
 80019a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019ac:	4623      	mov	r3, r4
 80019ae:	469a      	mov	sl, r3
 80019b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019b4:	b10a      	cbz	r2, 80019ba <_vfiprintf_r+0x86>
 80019b6:	2a25      	cmp	r2, #37	; 0x25
 80019b8:	d1f9      	bne.n	80019ae <_vfiprintf_r+0x7a>
 80019ba:	ebba 0b04 	subs.w	fp, sl, r4
 80019be:	d00b      	beq.n	80019d8 <_vfiprintf_r+0xa4>
 80019c0:	465b      	mov	r3, fp
 80019c2:	4622      	mov	r2, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	4630      	mov	r0, r6
 80019c8:	f7ff ffa1 	bl	800190e <__sfputs_r>
 80019cc:	3001      	adds	r0, #1
 80019ce:	f000 80a9 	beq.w	8001b24 <_vfiprintf_r+0x1f0>
 80019d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019d4:	445a      	add	r2, fp
 80019d6:	9209      	str	r2, [sp, #36]	; 0x24
 80019d8:	f89a 3000 	ldrb.w	r3, [sl]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a1 	beq.w	8001b24 <_vfiprintf_r+0x1f0>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019ec:	f10a 0a01 	add.w	sl, sl, #1
 80019f0:	9304      	str	r3, [sp, #16]
 80019f2:	9307      	str	r3, [sp, #28]
 80019f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019f8:	931a      	str	r3, [sp, #104]	; 0x68
 80019fa:	4654      	mov	r4, sl
 80019fc:	2205      	movs	r2, #5
 80019fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a02:	4854      	ldr	r0, [pc, #336]	; (8001b54 <_vfiprintf_r+0x220>)
 8001a04:	f000 fb94 	bl	8002130 <memchr>
 8001a08:	9a04      	ldr	r2, [sp, #16]
 8001a0a:	b9d8      	cbnz	r0, 8001a44 <_vfiprintf_r+0x110>
 8001a0c:	06d1      	lsls	r1, r2, #27
 8001a0e:	bf44      	itt	mi
 8001a10:	2320      	movmi	r3, #32
 8001a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a16:	0713      	lsls	r3, r2, #28
 8001a18:	bf44      	itt	mi
 8001a1a:	232b      	movmi	r3, #43	; 0x2b
 8001a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a20:	f89a 3000 	ldrb.w	r3, [sl]
 8001a24:	2b2a      	cmp	r3, #42	; 0x2a
 8001a26:	d015      	beq.n	8001a54 <_vfiprintf_r+0x120>
 8001a28:	4654      	mov	r4, sl
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f04f 0c0a 	mov.w	ip, #10
 8001a30:	9a07      	ldr	r2, [sp, #28]
 8001a32:	4621      	mov	r1, r4
 8001a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a38:	3b30      	subs	r3, #48	; 0x30
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d94d      	bls.n	8001ada <_vfiprintf_r+0x1a6>
 8001a3e:	b1b0      	cbz	r0, 8001a6e <_vfiprintf_r+0x13a>
 8001a40:	9207      	str	r2, [sp, #28]
 8001a42:	e014      	b.n	8001a6e <_vfiprintf_r+0x13a>
 8001a44:	eba0 0308 	sub.w	r3, r0, r8
 8001a48:	fa09 f303 	lsl.w	r3, r9, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	46a2      	mov	sl, r4
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	e7d2      	b.n	80019fa <_vfiprintf_r+0xc6>
 8001a54:	9b03      	ldr	r3, [sp, #12]
 8001a56:	1d19      	adds	r1, r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	9103      	str	r1, [sp, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bfbb      	ittet	lt
 8001a60:	425b      	neglt	r3, r3
 8001a62:	f042 0202 	orrlt.w	r2, r2, #2
 8001a66:	9307      	strge	r3, [sp, #28]
 8001a68:	9307      	strlt	r3, [sp, #28]
 8001a6a:	bfb8      	it	lt
 8001a6c:	9204      	strlt	r2, [sp, #16]
 8001a6e:	7823      	ldrb	r3, [r4, #0]
 8001a70:	2b2e      	cmp	r3, #46	; 0x2e
 8001a72:	d10c      	bne.n	8001a8e <_vfiprintf_r+0x15a>
 8001a74:	7863      	ldrb	r3, [r4, #1]
 8001a76:	2b2a      	cmp	r3, #42	; 0x2a
 8001a78:	d134      	bne.n	8001ae4 <_vfiprintf_r+0x1b0>
 8001a7a:	9b03      	ldr	r3, [sp, #12]
 8001a7c:	3402      	adds	r4, #2
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	9203      	str	r2, [sp, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bfb8      	it	lt
 8001a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a8c:	9305      	str	r3, [sp, #20]
 8001a8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001b58 <_vfiprintf_r+0x224>
 8001a92:	2203      	movs	r2, #3
 8001a94:	4650      	mov	r0, sl
 8001a96:	7821      	ldrb	r1, [r4, #0]
 8001a98:	f000 fb4a 	bl	8002130 <memchr>
 8001a9c:	b138      	cbz	r0, 8001aae <_vfiprintf_r+0x17a>
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	9b04      	ldr	r3, [sp, #16]
 8001aa2:	eba0 000a 	sub.w	r0, r0, sl
 8001aa6:	4082      	lsls	r2, r0
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	3401      	adds	r4, #1
 8001aac:	9304      	str	r3, [sp, #16]
 8001aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	4829      	ldr	r0, [pc, #164]	; (8001b5c <_vfiprintf_r+0x228>)
 8001ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aba:	f000 fb39 	bl	8002130 <memchr>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d03f      	beq.n	8001b42 <_vfiprintf_r+0x20e>
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <_vfiprintf_r+0x22c>)
 8001ac4:	bb1b      	cbnz	r3, 8001b0e <_vfiprintf_r+0x1da>
 8001ac6:	9b03      	ldr	r3, [sp, #12]
 8001ac8:	3307      	adds	r3, #7
 8001aca:	f023 0307 	bic.w	r3, r3, #7
 8001ace:	3308      	adds	r3, #8
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ad4:	443b      	add	r3, r7
 8001ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ad8:	e768      	b.n	80019ac <_vfiprintf_r+0x78>
 8001ada:	460c      	mov	r4, r1
 8001adc:	2001      	movs	r0, #1
 8001ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ae2:	e7a6      	b.n	8001a32 <_vfiprintf_r+0xfe>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f04f 0c0a 	mov.w	ip, #10
 8001aea:	4619      	mov	r1, r3
 8001aec:	3401      	adds	r4, #1
 8001aee:	9305      	str	r3, [sp, #20]
 8001af0:	4620      	mov	r0, r4
 8001af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001af6:	3a30      	subs	r2, #48	; 0x30
 8001af8:	2a09      	cmp	r2, #9
 8001afa:	d903      	bls.n	8001b04 <_vfiprintf_r+0x1d0>
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0c6      	beq.n	8001a8e <_vfiprintf_r+0x15a>
 8001b00:	9105      	str	r1, [sp, #20]
 8001b02:	e7c4      	b.n	8001a8e <_vfiprintf_r+0x15a>
 8001b04:	4604      	mov	r4, r0
 8001b06:	2301      	movs	r3, #1
 8001b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b0c:	e7f0      	b.n	8001af0 <_vfiprintf_r+0x1bc>
 8001b0e:	ab03      	add	r3, sp, #12
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	462a      	mov	r2, r5
 8001b14:	4630      	mov	r0, r6
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <_vfiprintf_r+0x230>)
 8001b18:	a904      	add	r1, sp, #16
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4607      	mov	r7, r0
 8001b20:	1c78      	adds	r0, r7, #1
 8001b22:	d1d6      	bne.n	8001ad2 <_vfiprintf_r+0x19e>
 8001b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b26:	07d9      	lsls	r1, r3, #31
 8001b28:	d405      	bmi.n	8001b36 <_vfiprintf_r+0x202>
 8001b2a:	89ab      	ldrh	r3, [r5, #12]
 8001b2c:	059a      	lsls	r2, r3, #22
 8001b2e:	d402      	bmi.n	8001b36 <_vfiprintf_r+0x202>
 8001b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b32:	f7ff fde1 	bl	80016f8 <__retarget_lock_release_recursive>
 8001b36:	89ab      	ldrh	r3, [r5, #12]
 8001b38:	065b      	lsls	r3, r3, #25
 8001b3a:	f53f af1d 	bmi.w	8001978 <_vfiprintf_r+0x44>
 8001b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b40:	e71c      	b.n	800197c <_vfiprintf_r+0x48>
 8001b42:	ab03      	add	r3, sp, #12
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	462a      	mov	r2, r5
 8001b48:	4630      	mov	r0, r6
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <_vfiprintf_r+0x230>)
 8001b4c:	a904      	add	r1, sp, #16
 8001b4e:	f000 f87d 	bl	8001c4c <_printf_i>
 8001b52:	e7e4      	b.n	8001b1e <_vfiprintf_r+0x1ea>
 8001b54:	080022a7 	.word	0x080022a7
 8001b58:	080022ad 	.word	0x080022ad
 8001b5c:	080022b1 	.word	0x080022b1
 8001b60:	00000000 	.word	0x00000000
 8001b64:	0800190f 	.word	0x0800190f

08001b68 <_printf_common>:
 8001b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b6c:	4616      	mov	r6, r2
 8001b6e:	4699      	mov	r9, r3
 8001b70:	688a      	ldr	r2, [r1, #8]
 8001b72:	690b      	ldr	r3, [r1, #16]
 8001b74:	4607      	mov	r7, r0
 8001b76:	4293      	cmp	r3, r2
 8001b78:	bfb8      	it	lt
 8001b7a:	4613      	movlt	r3, r2
 8001b7c:	6033      	str	r3, [r6, #0]
 8001b7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b82:	460c      	mov	r4, r1
 8001b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b88:	b10a      	cbz	r2, 8001b8e <_printf_common+0x26>
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	6033      	str	r3, [r6, #0]
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	0699      	lsls	r1, r3, #26
 8001b92:	bf42      	ittt	mi
 8001b94:	6833      	ldrmi	r3, [r6, #0]
 8001b96:	3302      	addmi	r3, #2
 8001b98:	6033      	strmi	r3, [r6, #0]
 8001b9a:	6825      	ldr	r5, [r4, #0]
 8001b9c:	f015 0506 	ands.w	r5, r5, #6
 8001ba0:	d106      	bne.n	8001bb0 <_printf_common+0x48>
 8001ba2:	f104 0a19 	add.w	sl, r4, #25
 8001ba6:	68e3      	ldr	r3, [r4, #12]
 8001ba8:	6832      	ldr	r2, [r6, #0]
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	42ab      	cmp	r3, r5
 8001bae:	dc2b      	bgt.n	8001c08 <_printf_common+0xa0>
 8001bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bb4:	1e13      	subs	r3, r2, #0
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	bf18      	it	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	0692      	lsls	r2, r2, #26
 8001bbe:	d430      	bmi.n	8001c22 <_printf_common+0xba>
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	4638      	mov	r0, r7
 8001bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bc8:	47c0      	blx	r8
 8001bca:	3001      	adds	r0, #1
 8001bcc:	d023      	beq.n	8001c16 <_printf_common+0xae>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	6922      	ldr	r2, [r4, #16]
 8001bd2:	f003 0306 	and.w	r3, r3, #6
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf14      	ite	ne
 8001bda:	2500      	movne	r5, #0
 8001bdc:	6833      	ldreq	r3, [r6, #0]
 8001bde:	f04f 0600 	mov.w	r6, #0
 8001be2:	bf08      	it	eq
 8001be4:	68e5      	ldreq	r5, [r4, #12]
 8001be6:	f104 041a 	add.w	r4, r4, #26
 8001bea:	bf08      	it	eq
 8001bec:	1aed      	subeq	r5, r5, r3
 8001bee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001bf2:	bf08      	it	eq
 8001bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bfc4      	itt	gt
 8001bfc:	1a9b      	subgt	r3, r3, r2
 8001bfe:	18ed      	addgt	r5, r5, r3
 8001c00:	42b5      	cmp	r5, r6
 8001c02:	d11a      	bne.n	8001c3a <_printf_common+0xd2>
 8001c04:	2000      	movs	r0, #0
 8001c06:	e008      	b.n	8001c1a <_printf_common+0xb2>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	4652      	mov	r2, sl
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	4638      	mov	r0, r7
 8001c10:	47c0      	blx	r8
 8001c12:	3001      	adds	r0, #1
 8001c14:	d103      	bne.n	8001c1e <_printf_common+0xb6>
 8001c16:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c1e:	3501      	adds	r5, #1
 8001c20:	e7c1      	b.n	8001ba6 <_printf_common+0x3e>
 8001c22:	2030      	movs	r0, #48	; 0x30
 8001c24:	18e1      	adds	r1, r4, r3
 8001c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c30:	4422      	add	r2, r4
 8001c32:	3302      	adds	r3, #2
 8001c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c38:	e7c2      	b.n	8001bc0 <_printf_common+0x58>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	4649      	mov	r1, r9
 8001c40:	4638      	mov	r0, r7
 8001c42:	47c0      	blx	r8
 8001c44:	3001      	adds	r0, #1
 8001c46:	d0e6      	beq.n	8001c16 <_printf_common+0xae>
 8001c48:	3601      	adds	r6, #1
 8001c4a:	e7d9      	b.n	8001c00 <_printf_common+0x98>

08001c4c <_printf_i>:
 8001c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c50:	7e0f      	ldrb	r7, [r1, #24]
 8001c52:	4691      	mov	r9, r2
 8001c54:	2f78      	cmp	r7, #120	; 0x78
 8001c56:	4680      	mov	r8, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	469a      	mov	sl, r3
 8001c5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c62:	d807      	bhi.n	8001c74 <_printf_i+0x28>
 8001c64:	2f62      	cmp	r7, #98	; 0x62
 8001c66:	d80a      	bhi.n	8001c7e <_printf_i+0x32>
 8001c68:	2f00      	cmp	r7, #0
 8001c6a:	f000 80d5 	beq.w	8001e18 <_printf_i+0x1cc>
 8001c6e:	2f58      	cmp	r7, #88	; 0x58
 8001c70:	f000 80c1 	beq.w	8001df6 <_printf_i+0x1aa>
 8001c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c7c:	e03a      	b.n	8001cf4 <_printf_i+0xa8>
 8001c7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c82:	2b15      	cmp	r3, #21
 8001c84:	d8f6      	bhi.n	8001c74 <_printf_i+0x28>
 8001c86:	a101      	add	r1, pc, #4	; (adr r1, 8001c8c <_printf_i+0x40>)
 8001c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c8c:	08001ce5 	.word	0x08001ce5
 8001c90:	08001cf9 	.word	0x08001cf9
 8001c94:	08001c75 	.word	0x08001c75
 8001c98:	08001c75 	.word	0x08001c75
 8001c9c:	08001c75 	.word	0x08001c75
 8001ca0:	08001c75 	.word	0x08001c75
 8001ca4:	08001cf9 	.word	0x08001cf9
 8001ca8:	08001c75 	.word	0x08001c75
 8001cac:	08001c75 	.word	0x08001c75
 8001cb0:	08001c75 	.word	0x08001c75
 8001cb4:	08001c75 	.word	0x08001c75
 8001cb8:	08001dff 	.word	0x08001dff
 8001cbc:	08001d25 	.word	0x08001d25
 8001cc0:	08001db9 	.word	0x08001db9
 8001cc4:	08001c75 	.word	0x08001c75
 8001cc8:	08001c75 	.word	0x08001c75
 8001ccc:	08001e21 	.word	0x08001e21
 8001cd0:	08001c75 	.word	0x08001c75
 8001cd4:	08001d25 	.word	0x08001d25
 8001cd8:	08001c75 	.word	0x08001c75
 8001cdc:	08001c75 	.word	0x08001c75
 8001ce0:	08001dc1 	.word	0x08001dc1
 8001ce4:	682b      	ldr	r3, [r5, #0]
 8001ce6:	1d1a      	adds	r2, r3, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	602a      	str	r2, [r5, #0]
 8001cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0a0      	b.n	8001e3a <_printf_i+0x1ee>
 8001cf8:	6820      	ldr	r0, [r4, #0]
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	0607      	lsls	r7, r0, #24
 8001cfe:	f103 0104 	add.w	r1, r3, #4
 8001d02:	6029      	str	r1, [r5, #0]
 8001d04:	d501      	bpl.n	8001d0a <_printf_i+0xbe>
 8001d06:	681e      	ldr	r6, [r3, #0]
 8001d08:	e003      	b.n	8001d12 <_printf_i+0xc6>
 8001d0a:	0646      	lsls	r6, r0, #25
 8001d0c:	d5fb      	bpl.n	8001d06 <_printf_i+0xba>
 8001d0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001d12:	2e00      	cmp	r6, #0
 8001d14:	da03      	bge.n	8001d1e <_printf_i+0xd2>
 8001d16:	232d      	movs	r3, #45	; 0x2d
 8001d18:	4276      	negs	r6, r6
 8001d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d1e:	230a      	movs	r3, #10
 8001d20:	4859      	ldr	r0, [pc, #356]	; (8001e88 <_printf_i+0x23c>)
 8001d22:	e012      	b.n	8001d4a <_printf_i+0xfe>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	1d19      	adds	r1, r3, #4
 8001d2a:	6029      	str	r1, [r5, #0]
 8001d2c:	0605      	lsls	r5, r0, #24
 8001d2e:	d501      	bpl.n	8001d34 <_printf_i+0xe8>
 8001d30:	681e      	ldr	r6, [r3, #0]
 8001d32:	e002      	b.n	8001d3a <_printf_i+0xee>
 8001d34:	0641      	lsls	r1, r0, #25
 8001d36:	d5fb      	bpl.n	8001d30 <_printf_i+0xe4>
 8001d38:	881e      	ldrh	r6, [r3, #0]
 8001d3a:	2f6f      	cmp	r7, #111	; 0x6f
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2308      	moveq	r3, #8
 8001d40:	230a      	movne	r3, #10
 8001d42:	4851      	ldr	r0, [pc, #324]	; (8001e88 <_printf_i+0x23c>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d4a:	6865      	ldr	r5, [r4, #4]
 8001d4c:	2d00      	cmp	r5, #0
 8001d4e:	bfa8      	it	ge
 8001d50:	6821      	ldrge	r1, [r4, #0]
 8001d52:	60a5      	str	r5, [r4, #8]
 8001d54:	bfa4      	itt	ge
 8001d56:	f021 0104 	bicge.w	r1, r1, #4
 8001d5a:	6021      	strge	r1, [r4, #0]
 8001d5c:	b90e      	cbnz	r6, 8001d62 <_printf_i+0x116>
 8001d5e:	2d00      	cmp	r5, #0
 8001d60:	d04b      	beq.n	8001dfa <_printf_i+0x1ae>
 8001d62:	4615      	mov	r5, r2
 8001d64:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d68:	fb03 6711 	mls	r7, r3, r1, r6
 8001d6c:	5dc7      	ldrb	r7, [r0, r7]
 8001d6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d72:	4637      	mov	r7, r6
 8001d74:	42bb      	cmp	r3, r7
 8001d76:	460e      	mov	r6, r1
 8001d78:	d9f4      	bls.n	8001d64 <_printf_i+0x118>
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d10b      	bne.n	8001d96 <_printf_i+0x14a>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	07de      	lsls	r6, r3, #31
 8001d82:	d508      	bpl.n	8001d96 <_printf_i+0x14a>
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	6861      	ldr	r1, [r4, #4]
 8001d88:	4299      	cmp	r1, r3
 8001d8a:	bfde      	ittt	le
 8001d8c:	2330      	movle	r3, #48	; 0x30
 8001d8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d96:	1b52      	subs	r2, r2, r5
 8001d98:	6122      	str	r2, [r4, #16]
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	4640      	mov	r0, r8
 8001da0:	f8cd a000 	str.w	sl, [sp]
 8001da4:	aa03      	add	r2, sp, #12
 8001da6:	f7ff fedf 	bl	8001b68 <_printf_common>
 8001daa:	3001      	adds	r0, #1
 8001dac:	d14a      	bne.n	8001e44 <_printf_i+0x1f8>
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	b004      	add	sp, #16
 8001db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6023      	str	r3, [r4, #0]
 8001dc0:	2778      	movs	r7, #120	; 0x78
 8001dc2:	4832      	ldr	r0, [pc, #200]	; (8001e8c <_printf_i+0x240>)
 8001dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	6829      	ldr	r1, [r5, #0]
 8001dcc:	061f      	lsls	r7, r3, #24
 8001dce:	f851 6b04 	ldr.w	r6, [r1], #4
 8001dd2:	d402      	bmi.n	8001dda <_printf_i+0x18e>
 8001dd4:	065f      	lsls	r7, r3, #25
 8001dd6:	bf48      	it	mi
 8001dd8:	b2b6      	uxthmi	r6, r6
 8001dda:	07df      	lsls	r7, r3, #31
 8001ddc:	bf48      	it	mi
 8001dde:	f043 0320 	orrmi.w	r3, r3, #32
 8001de2:	6029      	str	r1, [r5, #0]
 8001de4:	bf48      	it	mi
 8001de6:	6023      	strmi	r3, [r4, #0]
 8001de8:	b91e      	cbnz	r6, 8001df2 <_printf_i+0x1a6>
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	f023 0320 	bic.w	r3, r3, #32
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	2310      	movs	r3, #16
 8001df4:	e7a6      	b.n	8001d44 <_printf_i+0xf8>
 8001df6:	4824      	ldr	r0, [pc, #144]	; (8001e88 <_printf_i+0x23c>)
 8001df8:	e7e4      	b.n	8001dc4 <_printf_i+0x178>
 8001dfa:	4615      	mov	r5, r2
 8001dfc:	e7bd      	b.n	8001d7a <_printf_i+0x12e>
 8001dfe:	682b      	ldr	r3, [r5, #0]
 8001e00:	6826      	ldr	r6, [r4, #0]
 8001e02:	1d18      	adds	r0, r3, #4
 8001e04:	6961      	ldr	r1, [r4, #20]
 8001e06:	6028      	str	r0, [r5, #0]
 8001e08:	0635      	lsls	r5, r6, #24
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	d501      	bpl.n	8001e12 <_printf_i+0x1c6>
 8001e0e:	6019      	str	r1, [r3, #0]
 8001e10:	e002      	b.n	8001e18 <_printf_i+0x1cc>
 8001e12:	0670      	lsls	r0, r6, #25
 8001e14:	d5fb      	bpl.n	8001e0e <_printf_i+0x1c2>
 8001e16:	8019      	strh	r1, [r3, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4615      	mov	r5, r2
 8001e1c:	6123      	str	r3, [r4, #16]
 8001e1e:	e7bc      	b.n	8001d9a <_printf_i+0x14e>
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	2100      	movs	r1, #0
 8001e24:	1d1a      	adds	r2, r3, #4
 8001e26:	602a      	str	r2, [r5, #0]
 8001e28:	681d      	ldr	r5, [r3, #0]
 8001e2a:	6862      	ldr	r2, [r4, #4]
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f000 f97f 	bl	8002130 <memchr>
 8001e32:	b108      	cbz	r0, 8001e38 <_printf_i+0x1ec>
 8001e34:	1b40      	subs	r0, r0, r5
 8001e36:	6060      	str	r0, [r4, #4]
 8001e38:	6863      	ldr	r3, [r4, #4]
 8001e3a:	6123      	str	r3, [r4, #16]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e42:	e7aa      	b.n	8001d9a <_printf_i+0x14e>
 8001e44:	462a      	mov	r2, r5
 8001e46:	4649      	mov	r1, r9
 8001e48:	4640      	mov	r0, r8
 8001e4a:	6923      	ldr	r3, [r4, #16]
 8001e4c:	47d0      	blx	sl
 8001e4e:	3001      	adds	r0, #1
 8001e50:	d0ad      	beq.n	8001dae <_printf_i+0x162>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	079b      	lsls	r3, r3, #30
 8001e56:	d413      	bmi.n	8001e80 <_printf_i+0x234>
 8001e58:	68e0      	ldr	r0, [r4, #12]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	bfb8      	it	lt
 8001e60:	4618      	movlt	r0, r3
 8001e62:	e7a6      	b.n	8001db2 <_printf_i+0x166>
 8001e64:	2301      	movs	r3, #1
 8001e66:	4632      	mov	r2, r6
 8001e68:	4649      	mov	r1, r9
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	47d0      	blx	sl
 8001e6e:	3001      	adds	r0, #1
 8001e70:	d09d      	beq.n	8001dae <_printf_i+0x162>
 8001e72:	3501      	adds	r5, #1
 8001e74:	68e3      	ldr	r3, [r4, #12]
 8001e76:	9903      	ldr	r1, [sp, #12]
 8001e78:	1a5b      	subs	r3, r3, r1
 8001e7a:	42ab      	cmp	r3, r5
 8001e7c:	dcf2      	bgt.n	8001e64 <_printf_i+0x218>
 8001e7e:	e7eb      	b.n	8001e58 <_printf_i+0x20c>
 8001e80:	2500      	movs	r5, #0
 8001e82:	f104 0619 	add.w	r6, r4, #25
 8001e86:	e7f5      	b.n	8001e74 <_printf_i+0x228>
 8001e88:	080022b8 	.word	0x080022b8
 8001e8c:	080022c9 	.word	0x080022c9

08001e90 <__sflush_r>:
 8001e90:	898a      	ldrh	r2, [r1, #12]
 8001e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e94:	4605      	mov	r5, r0
 8001e96:	0710      	lsls	r0, r2, #28
 8001e98:	460c      	mov	r4, r1
 8001e9a:	d457      	bmi.n	8001f4c <__sflush_r+0xbc>
 8001e9c:	684b      	ldr	r3, [r1, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	dc04      	bgt.n	8001eac <__sflush_r+0x1c>
 8001ea2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	dc01      	bgt.n	8001eac <__sflush_r+0x1c>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d0fa      	beq.n	8001ea8 <__sflush_r+0x18>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001eb8:	682f      	ldr	r7, [r5, #0]
 8001eba:	6a21      	ldr	r1, [r4, #32]
 8001ebc:	602b      	str	r3, [r5, #0]
 8001ebe:	d032      	beq.n	8001f26 <__sflush_r+0x96>
 8001ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ec2:	89a3      	ldrh	r3, [r4, #12]
 8001ec4:	075a      	lsls	r2, r3, #29
 8001ec6:	d505      	bpl.n	8001ed4 <__sflush_r+0x44>
 8001ec8:	6863      	ldr	r3, [r4, #4]
 8001eca:	1ac0      	subs	r0, r0, r3
 8001ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ece:	b10b      	cbz	r3, 8001ed4 <__sflush_r+0x44>
 8001ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed2:	1ac0      	subs	r0, r0, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eda:	4628      	mov	r0, r5
 8001edc:	6a21      	ldr	r1, [r4, #32]
 8001ede:	47b0      	blx	r6
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	89a3      	ldrh	r3, [r4, #12]
 8001ee4:	d106      	bne.n	8001ef4 <__sflush_r+0x64>
 8001ee6:	6829      	ldr	r1, [r5, #0]
 8001ee8:	291d      	cmp	r1, #29
 8001eea:	d82b      	bhi.n	8001f44 <__sflush_r+0xb4>
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <__sflush_r+0x100>)
 8001eee:	410a      	asrs	r2, r1
 8001ef0:	07d6      	lsls	r6, r2, #31
 8001ef2:	d427      	bmi.n	8001f44 <__sflush_r+0xb4>
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6062      	str	r2, [r4, #4]
 8001ef8:	6922      	ldr	r2, [r4, #16]
 8001efa:	04d9      	lsls	r1, r3, #19
 8001efc:	6022      	str	r2, [r4, #0]
 8001efe:	d504      	bpl.n	8001f0a <__sflush_r+0x7a>
 8001f00:	1c42      	adds	r2, r0, #1
 8001f02:	d101      	bne.n	8001f08 <__sflush_r+0x78>
 8001f04:	682b      	ldr	r3, [r5, #0]
 8001f06:	b903      	cbnz	r3, 8001f0a <__sflush_r+0x7a>
 8001f08:	6560      	str	r0, [r4, #84]	; 0x54
 8001f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f0c:	602f      	str	r7, [r5, #0]
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d0ca      	beq.n	8001ea8 <__sflush_r+0x18>
 8001f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d002      	beq.n	8001f20 <__sflush_r+0x90>
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f7ff fbee 	bl	80016fc <_free_r>
 8001f20:	2000      	movs	r0, #0
 8001f22:	6360      	str	r0, [r4, #52]	; 0x34
 8001f24:	e7c1      	b.n	8001eaa <__sflush_r+0x1a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	4628      	mov	r0, r5
 8001f2a:	47b0      	blx	r6
 8001f2c:	1c41      	adds	r1, r0, #1
 8001f2e:	d1c8      	bne.n	8001ec2 <__sflush_r+0x32>
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0c5      	beq.n	8001ec2 <__sflush_r+0x32>
 8001f36:	2b1d      	cmp	r3, #29
 8001f38:	d001      	beq.n	8001f3e <__sflush_r+0xae>
 8001f3a:	2b16      	cmp	r3, #22
 8001f3c:	d101      	bne.n	8001f42 <__sflush_r+0xb2>
 8001f3e:	602f      	str	r7, [r5, #0]
 8001f40:	e7b2      	b.n	8001ea8 <__sflush_r+0x18>
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f48:	81a3      	strh	r3, [r4, #12]
 8001f4a:	e7ae      	b.n	8001eaa <__sflush_r+0x1a>
 8001f4c:	690f      	ldr	r7, [r1, #16]
 8001f4e:	2f00      	cmp	r7, #0
 8001f50:	d0aa      	beq.n	8001ea8 <__sflush_r+0x18>
 8001f52:	0793      	lsls	r3, r2, #30
 8001f54:	bf18      	it	ne
 8001f56:	2300      	movne	r3, #0
 8001f58:	680e      	ldr	r6, [r1, #0]
 8001f5a:	bf08      	it	eq
 8001f5c:	694b      	ldreq	r3, [r1, #20]
 8001f5e:	1bf6      	subs	r6, r6, r7
 8001f60:	600f      	str	r7, [r1, #0]
 8001f62:	608b      	str	r3, [r1, #8]
 8001f64:	2e00      	cmp	r6, #0
 8001f66:	dd9f      	ble.n	8001ea8 <__sflush_r+0x18>
 8001f68:	4633      	mov	r3, r6
 8001f6a:	463a      	mov	r2, r7
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	6a21      	ldr	r1, [r4, #32]
 8001f70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001f74:	47e0      	blx	ip
 8001f76:	2800      	cmp	r0, #0
 8001f78:	dc06      	bgt.n	8001f88 <__sflush_r+0xf8>
 8001f7a:	89a3      	ldrh	r3, [r4, #12]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f84:	81a3      	strh	r3, [r4, #12]
 8001f86:	e790      	b.n	8001eaa <__sflush_r+0x1a>
 8001f88:	4407      	add	r7, r0
 8001f8a:	1a36      	subs	r6, r6, r0
 8001f8c:	e7ea      	b.n	8001f64 <__sflush_r+0xd4>
 8001f8e:	bf00      	nop
 8001f90:	dfbffffe 	.word	0xdfbffffe

08001f94 <_fflush_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	690b      	ldr	r3, [r1, #16]
 8001f98:	4605      	mov	r5, r0
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	b913      	cbnz	r3, 8001fa4 <_fflush_r+0x10>
 8001f9e:	2500      	movs	r5, #0
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	b118      	cbz	r0, 8001fae <_fflush_r+0x1a>
 8001fa6:	6a03      	ldr	r3, [r0, #32]
 8001fa8:	b90b      	cbnz	r3, 8001fae <_fflush_r+0x1a>
 8001faa:	f7ff fa9f 	bl	80014ec <__sinit>
 8001fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f3      	beq.n	8001f9e <_fflush_r+0xa>
 8001fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fb8:	07d0      	lsls	r0, r2, #31
 8001fba:	d404      	bmi.n	8001fc6 <_fflush_r+0x32>
 8001fbc:	0599      	lsls	r1, r3, #22
 8001fbe:	d402      	bmi.n	8001fc6 <_fflush_r+0x32>
 8001fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fc2:	f7ff fb98 	bl	80016f6 <__retarget_lock_acquire_recursive>
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	4621      	mov	r1, r4
 8001fca:	f7ff ff61 	bl	8001e90 <__sflush_r>
 8001fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fd0:	4605      	mov	r5, r0
 8001fd2:	07da      	lsls	r2, r3, #31
 8001fd4:	d4e4      	bmi.n	8001fa0 <_fflush_r+0xc>
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	059b      	lsls	r3, r3, #22
 8001fda:	d4e1      	bmi.n	8001fa0 <_fflush_r+0xc>
 8001fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fde:	f7ff fb8b 	bl	80016f8 <__retarget_lock_release_recursive>
 8001fe2:	e7dd      	b.n	8001fa0 <_fflush_r+0xc>

08001fe4 <__swbuf_r>:
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	460e      	mov	r6, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	4605      	mov	r5, r0
 8001fec:	b118      	cbz	r0, 8001ff6 <__swbuf_r+0x12>
 8001fee:	6a03      	ldr	r3, [r0, #32]
 8001ff0:	b90b      	cbnz	r3, 8001ff6 <__swbuf_r+0x12>
 8001ff2:	f7ff fa7b 	bl	80014ec <__sinit>
 8001ff6:	69a3      	ldr	r3, [r4, #24]
 8001ff8:	60a3      	str	r3, [r4, #8]
 8001ffa:	89a3      	ldrh	r3, [r4, #12]
 8001ffc:	071a      	lsls	r2, r3, #28
 8001ffe:	d525      	bpl.n	800204c <__swbuf_r+0x68>
 8002000:	6923      	ldr	r3, [r4, #16]
 8002002:	b31b      	cbz	r3, 800204c <__swbuf_r+0x68>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	6922      	ldr	r2, [r4, #16]
 8002008:	b2f6      	uxtb	r6, r6
 800200a:	1a98      	subs	r0, r3, r2
 800200c:	6963      	ldr	r3, [r4, #20]
 800200e:	4637      	mov	r7, r6
 8002010:	4283      	cmp	r3, r0
 8002012:	dc04      	bgt.n	800201e <__swbuf_r+0x3a>
 8002014:	4621      	mov	r1, r4
 8002016:	4628      	mov	r0, r5
 8002018:	f7ff ffbc 	bl	8001f94 <_fflush_r>
 800201c:	b9e0      	cbnz	r0, 8002058 <__swbuf_r+0x74>
 800201e:	68a3      	ldr	r3, [r4, #8]
 8002020:	3b01      	subs	r3, #1
 8002022:	60a3      	str	r3, [r4, #8]
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	6022      	str	r2, [r4, #0]
 800202a:	701e      	strb	r6, [r3, #0]
 800202c:	6962      	ldr	r2, [r4, #20]
 800202e:	1c43      	adds	r3, r0, #1
 8002030:	429a      	cmp	r2, r3
 8002032:	d004      	beq.n	800203e <__swbuf_r+0x5a>
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	07db      	lsls	r3, r3, #31
 8002038:	d506      	bpl.n	8002048 <__swbuf_r+0x64>
 800203a:	2e0a      	cmp	r6, #10
 800203c:	d104      	bne.n	8002048 <__swbuf_r+0x64>
 800203e:	4621      	mov	r1, r4
 8002040:	4628      	mov	r0, r5
 8002042:	f7ff ffa7 	bl	8001f94 <_fflush_r>
 8002046:	b938      	cbnz	r0, 8002058 <__swbuf_r+0x74>
 8002048:	4638      	mov	r0, r7
 800204a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800204c:	4621      	mov	r1, r4
 800204e:	4628      	mov	r0, r5
 8002050:	f000 f806 	bl	8002060 <__swsetup_r>
 8002054:	2800      	cmp	r0, #0
 8002056:	d0d5      	beq.n	8002004 <__swbuf_r+0x20>
 8002058:	f04f 37ff 	mov.w	r7, #4294967295
 800205c:	e7f4      	b.n	8002048 <__swbuf_r+0x64>
	...

08002060 <__swsetup_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <__swsetup_r+0xac>)
 8002064:	4605      	mov	r5, r0
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	460c      	mov	r4, r1
 800206a:	b118      	cbz	r0, 8002074 <__swsetup_r+0x14>
 800206c:	6a03      	ldr	r3, [r0, #32]
 800206e:	b90b      	cbnz	r3, 8002074 <__swsetup_r+0x14>
 8002070:	f7ff fa3c 	bl	80014ec <__sinit>
 8002074:	89a3      	ldrh	r3, [r4, #12]
 8002076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800207a:	0718      	lsls	r0, r3, #28
 800207c:	d422      	bmi.n	80020c4 <__swsetup_r+0x64>
 800207e:	06d9      	lsls	r1, r3, #27
 8002080:	d407      	bmi.n	8002092 <__swsetup_r+0x32>
 8002082:	2309      	movs	r3, #9
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800208a:	f04f 30ff 	mov.w	r0, #4294967295
 800208e:	81a3      	strh	r3, [r4, #12]
 8002090:	e034      	b.n	80020fc <__swsetup_r+0x9c>
 8002092:	0758      	lsls	r0, r3, #29
 8002094:	d512      	bpl.n	80020bc <__swsetup_r+0x5c>
 8002096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002098:	b141      	cbz	r1, 80020ac <__swsetup_r+0x4c>
 800209a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800209e:	4299      	cmp	r1, r3
 80020a0:	d002      	beq.n	80020a8 <__swsetup_r+0x48>
 80020a2:	4628      	mov	r0, r5
 80020a4:	f7ff fb2a 	bl	80016fc <_free_r>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6363      	str	r3, [r4, #52]	; 0x34
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	2300      	movs	r3, #0
 80020b6:	6063      	str	r3, [r4, #4]
 80020b8:	6923      	ldr	r3, [r4, #16]
 80020ba:	6023      	str	r3, [r4, #0]
 80020bc:	89a3      	ldrh	r3, [r4, #12]
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	81a3      	strh	r3, [r4, #12]
 80020c4:	6923      	ldr	r3, [r4, #16]
 80020c6:	b94b      	cbnz	r3, 80020dc <__swsetup_r+0x7c>
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d2:	d003      	beq.n	80020dc <__swsetup_r+0x7c>
 80020d4:	4621      	mov	r1, r4
 80020d6:	4628      	mov	r0, r5
 80020d8:	f000 f85d 	bl	8002196 <__smakebuf_r>
 80020dc:	89a0      	ldrh	r0, [r4, #12]
 80020de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020e2:	f010 0301 	ands.w	r3, r0, #1
 80020e6:	d00a      	beq.n	80020fe <__swsetup_r+0x9e>
 80020e8:	2300      	movs	r3, #0
 80020ea:	60a3      	str	r3, [r4, #8]
 80020ec:	6963      	ldr	r3, [r4, #20]
 80020ee:	425b      	negs	r3, r3
 80020f0:	61a3      	str	r3, [r4, #24]
 80020f2:	6923      	ldr	r3, [r4, #16]
 80020f4:	b943      	cbnz	r3, 8002108 <__swsetup_r+0xa8>
 80020f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80020fa:	d1c4      	bne.n	8002086 <__swsetup_r+0x26>
 80020fc:	bd38      	pop	{r3, r4, r5, pc}
 80020fe:	0781      	lsls	r1, r0, #30
 8002100:	bf58      	it	pl
 8002102:	6963      	ldrpl	r3, [r4, #20]
 8002104:	60a3      	str	r3, [r4, #8]
 8002106:	e7f4      	b.n	80020f2 <__swsetup_r+0x92>
 8002108:	2000      	movs	r0, #0
 800210a:	e7f7      	b.n	80020fc <__swsetup_r+0x9c>
 800210c:	200000a4 	.word	0x200000a4

08002110 <_sbrk_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	2300      	movs	r3, #0
 8002114:	4d05      	ldr	r5, [pc, #20]	; (800212c <_sbrk_r+0x1c>)
 8002116:	4604      	mov	r4, r0
 8002118:	4608      	mov	r0, r1
 800211a:	602b      	str	r3, [r5, #0]
 800211c:	f7ff f8fa 	bl	8001314 <_sbrk>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d102      	bne.n	800212a <_sbrk_r+0x1a>
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	b103      	cbz	r3, 800212a <_sbrk_r+0x1a>
 8002128:	6023      	str	r3, [r4, #0]
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	200002a4 	.word	0x200002a4

08002130 <memchr>:
 8002130:	4603      	mov	r3, r0
 8002132:	b510      	push	{r4, lr}
 8002134:	b2c9      	uxtb	r1, r1
 8002136:	4402      	add	r2, r0
 8002138:	4293      	cmp	r3, r2
 800213a:	4618      	mov	r0, r3
 800213c:	d101      	bne.n	8002142 <memchr+0x12>
 800213e:	2000      	movs	r0, #0
 8002140:	e003      	b.n	800214a <memchr+0x1a>
 8002142:	7804      	ldrb	r4, [r0, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	428c      	cmp	r4, r1
 8002148:	d1f6      	bne.n	8002138 <memchr+0x8>
 800214a:	bd10      	pop	{r4, pc}

0800214c <__swhatbuf_r>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	460c      	mov	r4, r1
 8002150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002154:	4615      	mov	r5, r2
 8002156:	2900      	cmp	r1, #0
 8002158:	461e      	mov	r6, r3
 800215a:	b096      	sub	sp, #88	; 0x58
 800215c:	da0c      	bge.n	8002178 <__swhatbuf_r+0x2c>
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	2100      	movs	r1, #0
 8002162:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002166:	bf0c      	ite	eq
 8002168:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800216c:	2340      	movne	r3, #64	; 0x40
 800216e:	2000      	movs	r0, #0
 8002170:	6031      	str	r1, [r6, #0]
 8002172:	602b      	str	r3, [r5, #0]
 8002174:	b016      	add	sp, #88	; 0x58
 8002176:	bd70      	pop	{r4, r5, r6, pc}
 8002178:	466a      	mov	r2, sp
 800217a:	f000 f849 	bl	8002210 <_fstat_r>
 800217e:	2800      	cmp	r0, #0
 8002180:	dbed      	blt.n	800215e <__swhatbuf_r+0x12>
 8002182:	9901      	ldr	r1, [sp, #4]
 8002184:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002188:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800218c:	4259      	negs	r1, r3
 800218e:	4159      	adcs	r1, r3
 8002190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002194:	e7eb      	b.n	800216e <__swhatbuf_r+0x22>

08002196 <__smakebuf_r>:
 8002196:	898b      	ldrh	r3, [r1, #12]
 8002198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800219a:	079d      	lsls	r5, r3, #30
 800219c:	4606      	mov	r6, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	d507      	bpl.n	80021b2 <__smakebuf_r+0x1c>
 80021a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80021a6:	6023      	str	r3, [r4, #0]
 80021a8:	6123      	str	r3, [r4, #16]
 80021aa:	2301      	movs	r3, #1
 80021ac:	6163      	str	r3, [r4, #20]
 80021ae:	b002      	add	sp, #8
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	466a      	mov	r2, sp
 80021b4:	ab01      	add	r3, sp, #4
 80021b6:	f7ff ffc9 	bl	800214c <__swhatbuf_r>
 80021ba:	9900      	ldr	r1, [sp, #0]
 80021bc:	4605      	mov	r5, r0
 80021be:	4630      	mov	r0, r6
 80021c0:	f7ff fb04 	bl	80017cc <_malloc_r>
 80021c4:	b948      	cbnz	r0, 80021da <__smakebuf_r+0x44>
 80021c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ca:	059a      	lsls	r2, r3, #22
 80021cc:	d4ef      	bmi.n	80021ae <__smakebuf_r+0x18>
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	81a3      	strh	r3, [r4, #12]
 80021d8:	e7e3      	b.n	80021a2 <__smakebuf_r+0xc>
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	6020      	str	r0, [r4, #0]
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	81a3      	strh	r3, [r4, #12]
 80021e4:	9b00      	ldr	r3, [sp, #0]
 80021e6:	6120      	str	r0, [r4, #16]
 80021e8:	6163      	str	r3, [r4, #20]
 80021ea:	9b01      	ldr	r3, [sp, #4]
 80021ec:	b15b      	cbz	r3, 8002206 <__smakebuf_r+0x70>
 80021ee:	4630      	mov	r0, r6
 80021f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021f4:	f000 f81e 	bl	8002234 <_isatty_r>
 80021f8:	b128      	cbz	r0, 8002206 <__smakebuf_r+0x70>
 80021fa:	89a3      	ldrh	r3, [r4, #12]
 80021fc:	f023 0303 	bic.w	r3, r3, #3
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	81a3      	strh	r3, [r4, #12]
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	431d      	orrs	r5, r3
 800220a:	81a5      	strh	r5, [r4, #12]
 800220c:	e7cf      	b.n	80021ae <__smakebuf_r+0x18>
	...

08002210 <_fstat_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	2300      	movs	r3, #0
 8002214:	4d06      	ldr	r5, [pc, #24]	; (8002230 <_fstat_r+0x20>)
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	602b      	str	r3, [r5, #0]
 800221e:	f7ff f853 	bl	80012c8 <_fstat>
 8002222:	1c43      	adds	r3, r0, #1
 8002224:	d102      	bne.n	800222c <_fstat_r+0x1c>
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	b103      	cbz	r3, 800222c <_fstat_r+0x1c>
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	bd38      	pop	{r3, r4, r5, pc}
 800222e:	bf00      	nop
 8002230:	200002a4 	.word	0x200002a4

08002234 <_isatty_r>:
 8002234:	b538      	push	{r3, r4, r5, lr}
 8002236:	2300      	movs	r3, #0
 8002238:	4d05      	ldr	r5, [pc, #20]	; (8002250 <_isatty_r+0x1c>)
 800223a:	4604      	mov	r4, r0
 800223c:	4608      	mov	r0, r1
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	f7ff f851 	bl	80012e6 <_isatty>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_isatty_r+0x1a>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_isatty_r+0x1a>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	200002a4 	.word	0x200002a4

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
