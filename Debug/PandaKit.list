
PandaKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a58  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001b88  08001b88  00011b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf0  08001bf0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf0  08001bf0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf0  08001bf0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  08001c60  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08001c60  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000209c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a44  00000000  00000000  00022170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a8  00000000  00000000  00022bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f5  00000000  00000000  00022e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003164  00000000  00000000  00023055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000036c6  00000000  00000000  000261b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000adeb  00000000  00000000  0002987f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001088  00000000  00000000  0003466c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000356f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b70 	.word	0x08001b70

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001b70 	.word	0x08001b70

08000170 <WriteInsterction>:

/* check mode is 4 bit or 8 bit */

#elif LCD_MODE==_4_BIT

static void WriteInsterction(uint8_t ins) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, LOW_O);
 800017a:	2200      	movs	r2, #0
 800017c:	210b      	movs	r1, #11
 800017e:	2000      	movs	r0, #0
 8000180:	f000 f9ac 	bl	80004dc <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 7));
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	09db      	lsrs	r3, r3, #7
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	210c      	movs	r1, #12
 800018e:	2001      	movs	r0, #1
 8000190:	f000 f9a4 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 6));
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	099b      	lsrs	r3, r3, #6
 8000198:	b2db      	uxtb	r3, r3
 800019a:	f003 0301 	and.w	r3, r3, #1
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	461a      	mov	r2, r3
 80001a2:	210d      	movs	r1, #13
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 f999 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 5));
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	095b      	lsrs	r3, r3, #5
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	f003 0301 	and.w	r3, r3, #1
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	461a      	mov	r2, r3
 80001b8:	210e      	movs	r1, #14
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 f98e 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 4));
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	091b      	lsrs	r3, r3, #4
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	f003 0301 	and.w	r3, r3, #1
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	461a      	mov	r2, r3
 80001ce:	210f      	movs	r1, #15
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 f983 	bl	80004dc <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2108      	movs	r1, #8
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 f97e 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f000 fb69 	bl	80008b8 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f976 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fb61 	bl	80008b8 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 3));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	08db      	lsrs	r3, r3, #3
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	461a      	mov	r2, r3
 8000204:	210c      	movs	r1, #12
 8000206:	2001      	movs	r0, #1
 8000208:	f000 f968 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 2));
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	089b      	lsrs	r3, r3, #2
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	b2db      	uxtb	r3, r3
 8000218:	461a      	mov	r2, r3
 800021a:	210d      	movs	r1, #13
 800021c:	2001      	movs	r0, #1
 800021e:	f000 f95d 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 1));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	085b      	lsrs	r3, r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	461a      	mov	r2, r3
 8000230:	210e      	movs	r1, #14
 8000232:	2001      	movs	r0, #1
 8000234:	f000 f952 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 0));
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	210f      	movs	r1, #15
 8000244:	2001      	movs	r0, #1
 8000246:	f000 f949 	bl	80004dc <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800024a:	2201      	movs	r2, #1
 800024c:	2108      	movs	r1, #8
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f944 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fb2f 	bl	80008b8 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800025a:	2200      	movs	r2, #0
 800025c:	2108      	movs	r1, #8
 800025e:	2000      	movs	r0, #0
 8000260:	f000 f93c 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fb27 	bl	80008b8 <SysTick_vDelayms>

}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <WriteData>:

static void WriteData(uint8_t data) {
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	4603      	mov	r3, r0
 800027a:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, High_O);
 800027c:	2201      	movs	r2, #1
 800027e:	210b      	movs	r1, #11
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f92b 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 7));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	09db      	lsrs	r3, r3, #7
 800028a:	b2db      	uxtb	r3, r3
 800028c:	461a      	mov	r2, r3
 800028e:	210c      	movs	r1, #12
 8000290:	2001      	movs	r0, #1
 8000292:	f000 f923 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 6));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	099b      	lsrs	r3, r3, #6
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	210d      	movs	r1, #13
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 f918 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 5));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	210e      	movs	r1, #14
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 f90d 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 4));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	091b      	lsrs	r3, r3, #4
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	210f      	movs	r1, #15
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 f902 	bl	80004dc <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80002d8:	2201      	movs	r2, #1
 80002da:	2108      	movs	r1, #8
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 f8fd 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fae8 	bl	80008b8 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2108      	movs	r1, #8
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f8f5 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fae0 	bl	80008b8 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 3));
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	08db      	lsrs	r3, r3, #3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	461a      	mov	r2, r3
 8000306:	210c      	movs	r1, #12
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f8e7 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 2));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	089b      	lsrs	r3, r3, #2
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	210d      	movs	r1, #13
 800031e:	2001      	movs	r0, #1
 8000320:	f000 f8dc 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 1));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	085b      	lsrs	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	461a      	mov	r2, r3
 8000332:	210e      	movs	r1, #14
 8000334:	2001      	movs	r0, #1
 8000336:	f000 f8d1 	bl	80004dc <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 0));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	210f      	movs	r1, #15
 8000346:	2001      	movs	r0, #1
 8000348:	f000 f8c8 	bl	80004dc <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800034c:	2201      	movs	r2, #1
 800034e:	2108      	movs	r1, #8
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f8c3 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 faae 	bl	80008b8 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	2000      	movs	r0, #0
 8000362:	f000 f8bb 	bl	80004dc <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 faa6 	bl	80008b8 <SysTick_vDelayms>

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <LCD_Init>:

void LCD_Init(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	SysTick_vDelayms(50);
 8000378:	2032      	movs	r0, #50	; 0x32
 800037a:	f000 fa9d 	bl	80008b8 <SysTick_vDelayms>
	WriteInsterction(0x02);
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff fef6 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x28); //screen on 4 bit mode  with 2 line 5*7
 8000384:	2028      	movs	r0, #40	; 0x28
 8000386:	f7ff fef3 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x0c); //cursor off 0x0e ,0x0f
 800038a:	200c      	movs	r0, #12
 800038c:	f7ff fef0 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x01); //clear screen
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff feed 	bl	8000170 <WriteInsterction>
	SysTick_vDelayms(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fa8e 	bl	80008b8 <SysTick_vDelayms>
	WriteInsterction(0x06); //increase DDRAM address no shift
 800039c:	2006      	movs	r0, #6
 800039e:	f7ff fee7 	bl	8000170 <WriteInsterction>

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <LCD_WriteChar>:

#endif

void LCD_WriteChar(uint8_t ch) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	4603      	mov	r3, r0
 80003ae:	71fb      	strb	r3, [r7, #7]

	WriteData(ch);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff5d 	bl	8000272 <WriteData>

}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <LCD_Clear>:

void LCD_Clear(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

	WriteInsterction(0x01);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff fed3 	bl	8000170 <WriteInsterction>

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <LCD_WriteString>:

	}

}

void LCD_WriteString(uint8_t *str) {
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b084      	sub	sp, #16
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]

	uint8_t *ptr = str;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	60fb      	str	r3, [r7, #12]

	while (*ptr) {
 80003da:	e007      	b.n	80003ec <LCD_WriteString+0x1e>

		LCD_WriteChar(*ptr);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ffe0 	bl	80003a6 <LCD_WriteChar>
		ptr++;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
	while (*ptr) {
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f3      	bne.n	80003dc <LCD_WriteString+0xe>

	}

}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <GPIO_RETURNtPinInit>:
#include "GPIO/inc/GPIO_interface.h"


static GPIO_r *GPIO_ArraysOfPtr[Number_OfPorts] = { GPIOA, GPIOB, GPIOC };

RETURN_t GPIO_RETURNtPinInit(GPIO_PinConfig *Localptr_PinConfig) {
 8000400:	b480      	push	{r7}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

	RETURN_t LocalRetState = OK_ret;
 8000408:	2301      	movs	r3, #1
 800040a:	77fb      	strb	r3, [r7, #31]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
			&& Localptr_PinConfig->Port_Name <= GPIO_PORTC)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
 8000410:	2b02      	cmp	r3, #2
 8000412:	d903      	bls.n	800041c <GPIO_RETURNtPinInit+0x1c>
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	785b      	ldrb	r3, [r3, #1]
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d155      	bne.n	80004c8 <GPIO_RETURNtPinInit+0xc8>

		GPIO_r *LocalGPIO_Ptr = GPIO_ArraysOfPtr[Localptr_PinConfig->Port_Name];
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <GPIO_RETURNtPinInit+0xd8>)
 8000424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000428:	61bb      	str	r3, [r7, #24]
		/* configure mode */
		MOD_NUM_OF_BITS(LocalGPIO_Ptr->CR[(Localptr_PinConfig->PIN_Name) / 8],
 800042a:	230f      	movs	r3, #15
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	785b      	ldrb	r3, [r3, #1]
 8000432:	f003 0307 	and.w	r3, r3, #7
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	697a      	ldr	r2, [r7, #20]
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	43db      	mvns	r3, r3
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	461a      	mov	r2, r3
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	401a      	ands	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	785b      	ldrb	r3, [r3, #1]
 8000450:	f003 0307 	and.w	r3, r3, #7
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	785b      	ldrb	r3, [r3, #1]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	693b      	ldr	r3, [r7, #16]
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	785b      	ldrb	r3, [r3, #1]
 8000474:	08db      	lsrs	r3, r3, #3
 8000476:	b2db      	uxtb	r3, r3
 8000478:	4619      	mov	r1, r3
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	431a      	orrs	r2, r3
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				((Localptr_PinConfig->PIN_Name) % 8) * 4, 4,
				Localptr_PinConfig->PIN_MODE);
		/* configure set and reset */
		if (Localptr_PinConfig->PIN_MODE == High_O) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10a      	bne.n	80004a2 <GPIO_RETURNtPinInit+0xa2>

			SET_BIT(LocalGPIO_Ptr->BSRR , Localptr_PinConfig->PIN_Name);
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7852      	ldrb	r2, [r2, #1]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	431a      	orrs	r2, r3
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 80004a0:	e014      	b.n	80004cc <GPIO_RETURNtPinInit+0xcc>

		} else if (Localptr_PinConfig->PIN_MODE == LOW_O) {
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	789b      	ldrb	r3, [r3, #2]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10b      	bne.n	80004c2 <GPIO_RETURNtPinInit+0xc2>

			SET_BIT(LocalGPIO_Ptr->BSRR , ((Localptr_PinConfig->PIN_Name)+GPIO_PortsOutOfRange) );
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	691b      	ldr	r3, [r3, #16]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	7852      	ldrb	r2, [r2, #1]
 80004b2:	3203      	adds	r2, #3
 80004b4:	2101      	movs	r1, #1
 80004b6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	69bb      	ldr	r3, [r7, #24]
 80004be:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 80004c0:	e004      	b.n	80004cc <GPIO_RETURNtPinInit+0xcc>

		} else {
			LocalRetState = ERROR_ret;
 80004c2:	2300      	movs	r3, #0
 80004c4:	77fb      	strb	r3, [r7, #31]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 80004c6:	e001      	b.n	80004cc <GPIO_RETURNtPinInit+0xcc>
		}

	} else {

		LocalRetState = ERROR_ret;
 80004c8:	2300      	movs	r3, #0
 80004ca:	77fb      	strb	r3, [r7, #31]
	}

	return LocalRetState;
 80004cc:	7ffb      	ldrb	r3, [r7, #31]

}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3724      	adds	r7, #36	; 0x24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000000 	.word	0x20000000

080004dc <GPIO_RETURNtPinOut>:
 * @param  Local_PortName: The GPIO port to which the pin belongs.
 * @param  Local_PinName: The specific pin in the port.
 * @param  Local_OutVal: The output value to be set (High_O or LOW_O).
 * @retval RETURN_t: Indicates the success or failure of the operation.
 */
RETURN_t GPIO_RETURNtPinOut(GPIO_Ports Local_PortName, GPIO_Pins Local_PinName,GPIO_PinStateOut Local_OutVal) {
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]

	RETURN_t local_RETURN_t = OK_ret;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]
	if (Local_PortName >= GPIO_PortsOutOfRange|| Local_PinName >= GPIO_PinsOutOfRange) {
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d802      	bhi.n	80004fe <GPIO_RETURNtPinOut+0x22>
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d902      	bls.n	8000504 <GPIO_RETURNtPinOut+0x28>

		local_RETURN_t = ERROR_ret;
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]
 8000502:	e02a      	b.n	800055a <GPIO_RETURNtPinOut+0x7e>

	} else {

		if (Local_OutVal == High_O) {
 8000504:	797b      	ldrb	r3, [r7, #5]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d110      	bne.n	800052c <GPIO_RETURNtPinOut+0x50>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,Local_PinName) ;
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4a16      	ldr	r2, [pc, #88]	; (8000568 <GPIO_RETURNtPinOut+0x8c>)
 800050e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000512:	691a      	ldr	r2, [r3, #16]
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	4618      	mov	r0, r3
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4911      	ldr	r1, [pc, #68]	; (8000568 <GPIO_RETURNtPinOut+0x8c>)
 8000522:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000526:	4302      	orrs	r2, r0
 8000528:	611a      	str	r2, [r3, #16]
 800052a:	e016      	b.n	800055a <GPIO_RETURNtPinOut+0x7e>

		}

		else if (Local_OutVal == LOW_O) {
 800052c:	797b      	ldrb	r3, [r7, #5]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d111      	bne.n	8000556 <GPIO_RETURNtPinOut+0x7a>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,(Local_PinName+GPIO_PinsOutOfRange) ) ;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <GPIO_RETURNtPinOut+0x8c>)
 8000536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053a:	691a      	ldr	r2, [r3, #16]
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	3310      	adds	r3, #16
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	4618      	mov	r0, r3
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4907      	ldr	r1, [pc, #28]	; (8000568 <GPIO_RETURNtPinOut+0x8c>)
 800054c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000550:	4302      	orrs	r2, r0
 8000552:	611a      	str	r2, [r3, #16]
 8000554:	e001      	b.n	800055a <GPIO_RETURNtPinOut+0x7e>

		} else {

			local_RETURN_t = ERROR_ret;
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]

		}

	}

	return local_RETURN_t;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000

0800056c <NVIC_SetPriorityConfig>:


static uint8_t StaticGlobal_u8PriorityConfig ;


void NVIC_SetPriorityConfig(uint8_t Copy_u8Priority) {
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]

	 StaticGlobal_u8PriorityConfig=Copy_u8Priority;
 8000576:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <NVIC_SetPriorityConfig+0x3c>)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	7013      	strb	r3, [r2, #0]
	 uint32_t LocalTempRegValue=(VECT_KEY<<16)|(Copy_u8Priority<<8)|(SCB_AIRCR&0b111) ;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	021b      	lsls	r3, r3, #8
 8000580:	461a      	mov	r2, r3
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <NVIC_SetPriorityConfig+0x40>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	4313      	orrs	r3, r2
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60fb      	str	r3, [r7, #12]
	 SCB_AIRCR =LocalTempRegValue ;
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <NVIC_SetPriorityConfig+0x40>)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6013      	str	r3, [r2, #0]

}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084
 80005ac:	e000ed0c 	.word	0xe000ed0c

080005b0 <NVIC_voidSetInterruptPriority>:
 * Copy_u8GroupId    :the desired Group Id of interrupt note:if PriorityConfig= NVIC_GROUB0BITS_SUB4BITS then enter 0
 * Copy_u8SubGroupId :the desired SubGroup Id of interrupt note:if PriorityConfig= NVIC_GROUB4BITS_SUB0BITS then enter 0
 *
 */
void NVIC_voidSetInterruptPriority(NVIC_EXTPreprheial Copyu8InterruptNumber,
		uint8_t Copy_u8GroupId, uint8_t Copy_u8SubGroupId) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	460b      	mov	r3, r1
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	4613      	mov	r3, r2
 80005c0:	717b      	strb	r3, [r7, #5]



	switch (StaticGlobal_u8PriorityConfig) {
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <NVIC_voidSetInterruptPriority+0xe4>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	3b03      	subs	r3, #3
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d85c      	bhi.n	8000686 <NVIC_voidSetInterruptPriority+0xd6>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <NVIC_voidSetInterruptPriority+0x24>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	080005fb 	.word	0x080005fb
 80005dc:	08000621 	.word	0x08000621
 80005e0:	08000647 	.word	0x08000647
 80005e4:	08000673 	.word	0x08000673
		case NVIC_16GROUB_0SUB:
			NVIC->IPR[Copyu8InterruptNumber]=(Copy_u8GroupId<<4);
 80005e8:	492b      	ldr	r1, [pc, #172]	; (8000698 <NVIC_voidSetInterruptPriority+0xe8>)
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	79ba      	ldrb	r2, [r7, #6]
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 80005f8:	e046      	b.n	8000688 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_8GROUB_2SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b111)<<5)|((Copy_u8SubGroupId & 0b1)<<4);
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	015b      	lsls	r3, r3, #5
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	b25b      	sxtb	r3, r3
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	b25b      	sxtb	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b259      	sxtb	r1, r3
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <NVIC_voidSetInterruptPriority+0xe8>)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	b2c9      	uxtb	r1, r1
 8000616:	4413      	add	r3, r2
 8000618:	460a      	mov	r2, r1
 800061a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 800061e:	e033      	b.n	8000688 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_4GROUB_4SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<6)|((Copy_u8SubGroupId & 0b11)<<4);
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	019b      	lsls	r3, r3, #6
 8000624:	b25a      	sxtb	r2, r3
 8000626:	797b      	ldrb	r3, [r7, #5]
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	b25b      	sxtb	r3, r3
 800062c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	b259      	sxtb	r1, r3
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <NVIC_voidSetInterruptPriority+0xe8>)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	b2c9      	uxtb	r1, r1
 800063c:	4413      	add	r3, r2
 800063e:	460a      	mov	r2, r1
 8000640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000644:	e020      	b.n	8000688 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_2GROUB_8SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<7)|((Copy_u8SubGroupId & 0b111)<<4);
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	01db      	lsls	r3, r3, #7
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000650:	b25a      	sxtb	r2, r3
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	b25b      	sxtb	r3, r3
 8000658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b259      	sxtb	r1, r3
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <NVIC_voidSetInterruptPriority+0xe8>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	b2c9      	uxtb	r1, r1
 8000668:	4413      	add	r3, r2
 800066a:	460a      	mov	r2, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000670:	e00a      	b.n	8000688 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_0GROUB_16SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8SubGroupId & 0b1111)<<4);
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	0119      	lsls	r1, r3, #4
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <NVIC_voidSetInterruptPriority+0xe8>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	b2c9      	uxtb	r1, r1
 800067c:	4413      	add	r3, r2
 800067e:	460a      	mov	r2, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000684:	e000      	b.n	8000688 <NVIC_voidSetInterruptPriority+0xd8>
		default:
			break;
 8000686:	bf00      	nop
	}



}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000084 	.word	0x20000084
 8000698:	e000e100 	.word	0xe000e100

0800069c <NVIC_vEnableInterrupt>:
/**
 * @brief Enables the specified interrupt in the NVIC (Nested Vector Interrupt Controller).
 * @param Copy_u8InterruptNum: The interrupt number to be enabled.
 * @return None
 */
void NVIC_vEnableInterrupt(NVIC_EXTPreprheial Copy_u8InterruptNum){
 800069c:	b490      	push	{r4, r7}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]


	SET_BIT(NVIC->ISER[Copy_u8InterruptNum/32],Copy_u8InterruptNum%32);
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <NVIC_vEnableInterrupt+0x3c>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	b2d8      	uxtb	r0, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	f002 021f 	and.w	r2, r2, #31
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	4614      	mov	r4, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <NVIC_vEnableInterrupt+0x3c>)
 80006c4:	4601      	mov	r1, r0
 80006c6:	4323      	orrs	r3, r4
 80006c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc90      	pop	{r4, r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100

080006dc <RCC_RETURNtInit>:
#include "RCC/inc/RCC_interface.h"




RETURN_t RCC_RETURNtInit(void) {
 80006dc:	b480      	push	{r7}
 80006de:	b097      	sub	sp, #92	; 0x5c
 80006e0:	af00      	add	r7, sp, #0

    RETURN_t Local_error_state = OK_ret ;
 80006e2:	2301      	movs	r3, #1
 80006e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Configuring ADC prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 14, 2, ADC_PRESCALER);
 80006e8:	2303      	movs	r3, #3
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
 80006ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006ee:	039b      	lsls	r3, r3, #14
 80006f0:	43db      	mvns	r3, r3
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006f6:	039b      	lsls	r3, r3, #14
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <RCC_RETURNtInit+0x130>)
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000702:	401a      	ands	r2, r3
 8000704:	4941      	ldr	r1, [pc, #260]	; (800080c <RCC_RETURNtInit+0x130>)
 8000706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000708:	4313      	orrs	r3, r2
 800070a:	604b      	str	r3, [r1, #4]

    /* Configuring APB2 high-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 11, 3, APB2_prescaler);
 800070c:	2307      	movs	r3, #7
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
 8000710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000712:	02db      	lsls	r3, r3, #11
 8000714:	43db      	mvns	r3, r3
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
 8000718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800071a:	02db      	lsls	r3, r3, #11
 800071c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <RCC_RETURNtInit+0x130>)
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000728:	401a      	ands	r2, r3
 800072a:	4938      	ldr	r1, [pc, #224]	; (800080c <RCC_RETURNtInit+0x130>)
 800072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072e:	4313      	orrs	r3, r2
 8000730:	604b      	str	r3, [r1, #4]

    /* Configuring APB1 low-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 8, 3, APB1_prescaler);
 8000732:	2307      	movs	r3, #7
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
 8000736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	43db      	mvns	r3, r3
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
 800073e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <RCC_RETURNtInit+0x130>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074e:	401a      	ands	r2, r3
 8000750:	492e      	ldr	r1, [pc, #184]	; (800080c <RCC_RETURNtInit+0x130>)
 8000752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000754:	4313      	orrs	r3, r2
 8000756:	604b      	str	r3, [r1, #4]

    /* Configuring AHB prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 4, 4, AHP_prescaler);
 8000758:	230f      	movs	r3, #15
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	43db      	mvns	r3, r3
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <RCC_RETURNtInit+0x130>)
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076e:	401a      	ands	r2, r3
 8000770:	4926      	ldr	r1, [pc, #152]	; (800080c <RCC_RETURNtInit+0x130>)
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	4313      	orrs	r3, r2
 8000776:	604b      	str	r3, [r1, #4]

    /* Configuring Microcontroller clock output */
    MOD_NUM_OF_BITS(RCC->CFGR, 24, 3, MCO_clk);
 8000778:	2307      	movs	r3, #7
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	061b      	lsls	r3, r3, #24
 8000780:	43db      	mvns	r3, r3
 8000782:	61fb      	str	r3, [r7, #28]
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	061b      	lsls	r3, r3, #24
 8000788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <RCC_RETURNtInit+0x130>)
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	401a      	ands	r2, r3
 8000796:	491d      	ldr	r1, [pc, #116]	; (800080c <RCC_RETURNtInit+0x130>)
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	4313      	orrs	r3, r2
 800079c:	604b      	str	r3, [r1, #4]

    /* Configuring clock security system */
    MOD_NUM_OF_BITS(RCC->CR, 19, 0, Clock_security);
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	04db      	lsls	r3, r3, #19
 80007a6:	43db      	mvns	r3, r3
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	04db      	lsls	r3, r3, #19
 80007ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <RCC_RETURNtInit+0x130>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	401a      	ands	r2, r3
 80007bc:	4913      	ldr	r1, [pc, #76]	; (800080c <RCC_RETURNtInit+0x130>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	600b      	str	r3, [r1, #0]

    /* Configuring main clock source */
    #if MAIN_CLK == HSI
        SET_BIT(RCC->CR, 0);
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <RCC_RETURNtInit+0x130>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <RCC_RETURNtInit+0x130>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6013      	str	r3, [r2, #0]
        while(!READ_BIT(RCC->CR, 1));
 80007d0:	bf00      	nop
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <RCC_RETURNtInit+0x130>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f9      	beq.n	80007d2 <RCC_RETURNtInit+0xf6>
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 0);
 80007de:	2303      	movs	r3, #3
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <RCC_RETURNtInit+0x130>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	401a      	ands	r2, r3
 80007f4:	4905      	ldr	r1, [pc, #20]	; (800080c <RCC_RETURNtInit+0x130>)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	604b      	str	r3, [r1, #4]
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 2);
        /* Turning off HSI */
        CLEAR_BIT(RCC->CR, 0);
    #endif

    return Local_error_state;
 80007fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8000800:	4618      	mov	r0, r3
 8000802:	375c      	adds	r7, #92	; 0x5c
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <RCC_RETURNtPeripheralEn>:

/*  functions for enabling various peripherals */


RETURN_t RCC_RETURNtPeripheralEn(uint8_t BusType, uint8_t PeripheralName) {
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
    RETURN_t Local_error_state = OK_ret ;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]


	switch(BusType){
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d01c      	beq.n	8000864 <RCC_RETURNtPeripheralEn+0x54>
 800082a:	2b02      	cmp	r3, #2
 800082c:	dc25      	bgt.n	800087a <RCC_RETURNtPeripheralEn+0x6a>
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <RCC_RETURNtPeripheralEn+0x28>
 8000832:	2b01      	cmp	r3, #1
 8000834:	d00b      	beq.n	800084e <RCC_RETURNtPeripheralEn+0x3e>
 8000836:	e020      	b.n	800087a <RCC_RETURNtPeripheralEn+0x6a>

	case AHB :

		SET_BIT(RCC->AHBENR ,PeripheralName ) ;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <RCC_RETURNtPeripheralEn+0x7c>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <RCC_RETURNtPeripheralEn+0x7c>)
 8000848:	430b      	orrs	r3, r1
 800084a:	6153      	str	r3, [r2, #20]

		break ;
 800084c:	e018      	b.n	8000880 <RCC_RETURNtPeripheralEn+0x70>
	case APB1 :
		SET_BIT(RCC->APB1ENR ,PeripheralName ) ;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <RCC_RETURNtPeripheralEn+0x7c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	2101      	movs	r1, #1
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	4611      	mov	r1, r2
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <RCC_RETURNtPeripheralEn+0x7c>)
 800085e:	430b      	orrs	r3, r1
 8000860:	61d3      	str	r3, [r2, #28]

		break ;
 8000862:	e00d      	b.n	8000880 <RCC_RETURNtPeripheralEn+0x70>

	case APB2 :
		SET_BIT(RCC->APB2ENR ,PeripheralName ) ;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <RCC_RETURNtPeripheralEn+0x7c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	79ba      	ldrb	r2, [r7, #6]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <RCC_RETURNtPeripheralEn+0x7c>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6193      	str	r3, [r2, #24]
		break  ;
 8000878:	e002      	b.n	8000880 <RCC_RETURNtPeripheralEn+0x70>

	default :
		Local_error_state = ERROR_ret ;
 800087a:	2300      	movs	r3, #0
 800087c:	73fb      	strb	r3, [r7, #15]
		break ;
 800087e:	bf00      	nop

	}
	return  Local_error_state  ;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000

08000890 <SysTick_vInit>:
 */


#include "SysTick/inc/SysTick_interface.h"

void SysTick_vInit(void) {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

	/* disable SysTick exception */
	CLEAR_BIT(SysTick->CTRL, 1);
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <SysTick_vInit+0x24>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <SysTick_vInit+0x24>)
 800089a:	f023 0302 	bic.w	r3, r3, #2
 800089e:	6013      	str	r3, [r2, #0]
#if SysTick_ClkSource==SysTick_AHB_8
	CLEAR_BIT(SysTick->CTRL, 2);
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_vInit+0x24>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <SysTick_vInit+0x24>)
 80008a6:	f023 0304 	bic.w	r3, r3, #4
 80008aa:	6013      	str	r3, [r2, #0]
#elif SysTick_ClkSource==SysTick_AHB
	SET_BIT(SysTick->CTRL  , 2 ) ;

#endif

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <SysTick_vDelayms>:

	}

}

void SysTick_vDelayms(uint32_t local_time) {
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	local_time *= 1000;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	607b      	str	r3, [r7, #4]

	if (local_time < (1 << 25)) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008d2:	d216      	bcs.n	8000902 <SysTick_vDelayms+0x4a>

		SysTick->LOAD = local_time;
 80008d4:	4a35      	ldr	r2, [pc, #212]	; (80009ac <SysTick_vDelayms+0xf4>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6053      	str	r3, [r2, #4]

		SET_BIT(SysTick->CTRL, 0);
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <SysTick_vDelayms+0xf4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a33      	ldr	r2, [pc, #204]	; (80009ac <SysTick_vDelayms+0xf4>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6013      	str	r3, [r2, #0]

		while (!READ_BIT(SysTick->CTRL, 16))
 80008e6:	bf00      	nop
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <SysTick_vDelayms+0xf4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f9      	beq.n	80008e8 <SysTick_vDelayms+0x30>
			;

		CLEAR_BIT(SysTick->CTRL, 0);
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <SysTick_vDelayms+0xf4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <SysTick_vDelayms+0xf4>)
 80008fa:	f023 0301 	bic.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000900:	e04e      	b.n	80009a0 <SysTick_vDelayms+0xe8>
	else if (local_time > (1 << 25)) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000908:	d94a      	bls.n	80009a0 <SysTick_vDelayms+0xe8>
		uint32_t overfolow = local_time / 0xffffff;
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	f240 1301 	movw	r3, #257	; 0x101
 8000910:	fba3 1302 	umull	r1, r3, r3, r2
 8000914:	1ad2      	subs	r2, r2, r3
 8000916:	0852      	lsrs	r2, r2, #1
 8000918:	4413      	add	r3, r2
 800091a:	0ddb      	lsrs	r3, r3, #23
 800091c:	613b      	str	r3, [r7, #16]
		uint32_t rem = local_time / 0xffffff;
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	f240 1301 	movw	r3, #257	; 0x101
 8000924:	fba3 1302 	umull	r1, r3, r3, r2
 8000928:	1ad2      	subs	r2, r2, r3
 800092a:	0852      	lsrs	r2, r2, #1
 800092c:	4413      	add	r3, r2
 800092e:	0ddb      	lsrs	r3, r3, #23
 8000930:	60fb      	str	r3, [r7, #12]
		SysTick->LOAD = rem;
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6053      	str	r3, [r2, #4]
		SET_BIT(SysTick->CTRL, 0);
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <SysTick_vDelayms+0xf4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <SysTick_vDelayms+0xf4>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]
		while (!READ_BIT(SysTick->CTRL, 16))
 8000944:	bf00      	nop
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f9      	beq.n	8000946 <SysTick_vDelayms+0x8e>
		CLEAR_BIT(SysTick->CTRL, 0);
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000958:	f023 0301 	bic.w	r3, r3, #1
 800095c:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e019      	b.n	8000998 <SysTick_vDelayms+0xe0>
			SysTick->LOAD = 0xffffff;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000966:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800096a:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <SysTick_vDelayms+0xf4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]
			while (!READ_BIT(SysTick->CTRL, 16))
 8000978:	bf00      	nop
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <SysTick_vDelayms+0xf4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <SysTick_vDelayms+0xc2>
			CLEAR_BIT(SysTick->CTRL, 0);
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <SysTick_vDelayms+0xf4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <SysTick_vDelayms+0xf4>)
 800098c:	f023 0301 	bic.w	r3, r3, #1
 8000990:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d3e1      	bcc.n	8000964 <SysTick_vDelayms+0xac>
}
 80009a0:	bf00      	nop
 80009a2:	371c      	adds	r7, #28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <SysTick_Handler>:

	}

}

void SysTick_Handler(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

	if (Overflow_needFlag == 0) {
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SysTick_Handler+0x94>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10d      	bne.n	80009d8 <SysTick_Handler+0x28>

		/* stop timer */
		SET_BIT(SysTick->CTRL, 0);
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <SysTick_Handler+0x98>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <SysTick_Handler+0x98>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

		if (SysTickHandler_ptr != NULL_FPTR) {
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SysTick_Handler+0x9c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d037      	beq.n	8000a40 <SysTick_Handler+0x90>
			SysTickHandler_ptr();
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SysTick_Handler+0x9c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4798      	blx	r3

		}

	}

}
 80009d6:	e033      	b.n	8000a40 <SysTick_Handler+0x90>
	} else if (Overflow_needFlag == 1) {
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <SysTick_Handler+0x94>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d12f      	bne.n	8000a40 <SysTick_Handler+0x90>
		CLEAR_BIT(SysTick->CTRL, 0);
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <SysTick_Handler+0x98>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <SysTick_Handler+0x98>)
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <SysTick_Handler+0xa0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e00e      	b.n	8000a12 <SysTick_Handler+0x62>
			SysTick->LOAD = 0xffffff;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <SysTick_Handler+0x98>)
 80009f6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80009fa:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <SysTick_Handler+0x98>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <SysTick_Handler+0x98>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <SysTick_Handler+0xa0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <SysTick_Handler+0xa0>)
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <SysTick_Handler+0xa0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <SysTick_Handler+0xa4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d3ea      	bcc.n	80009f4 <SysTick_Handler+0x44>
		if(i==(overflowInterrupt-1)){
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <SysTick_Handler+0xa4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SysTick_Handler+0xa0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d109      	bne.n	8000a40 <SysTick_Handler+0x90>
			if (SysTickHandler_ptr != NULL_FPTR) {
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <SysTick_Handler+0x9c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <SysTick_Handler+0x8a>
						SysTickHandler_ptr();
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Handler+0x9c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4798      	blx	r3
			i=0 ;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SysTick_Handler+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000085 	.word	0x20000085
 8000a48:	e000e010 	.word	0xe000e010
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	20000090 	.word	0x20000090
 8000a54:	20000088 	.word	0x20000088

08000a58 <main>:
 * test all the compenents and check if any compnent fiekd
 *
 *
 */

int main() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
	/*uint8_t ll = NVIC_u8GetInterruptState(5)  ;

	printf("%d",ll) ;*/


	NVIC_SetPriorityConfig(NVIC_4GROUB_4SUB) ;
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f7ff fd84 	bl	800056c <NVIC_SetPriorityConfig>

	NVIC_SetPriorityConfig(NVIC_16GROUB_0SUB) ;
 8000a64:	2003      	movs	r0, #3
 8000a66:	f7ff fd81 	bl	800056c <NVIC_SetPriorityConfig>


	NVIC_SetPriorityConfig(NVIC_4GROUB_4SUB) ;
 8000a6a:	2005      	movs	r0, #5
 8000a6c:	f7ff fd7e 	bl	800056c <NVIC_SetPriorityConfig>



	NVIC_voidSetInterruptPriority(WWDG_LINE, 2, 3) ;
 8000a70:	2203      	movs	r2, #3
 8000a72:	2102      	movs	r1, #2
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff fd9b 	bl	80005b0 <NVIC_voidSetInterruptPriority>


	NVIC_voidSetInterruptPriority(RCC_LINE, 3, 3) ;
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	2005      	movs	r0, #5
 8000a80:	f7ff fd96 	bl	80005b0 <NVIC_voidSetInterruptPriority>


	NVIC_vEnableInterrupt(WWDG_LINE) ;
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fe09 	bl	800069c <NVIC_vEnableInterrupt>

	//NVIC_vSetPendingFlag(WWDG_LINE) ;


	GPIO_PinConfig Pina2 = {
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <main+0xd0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	61fb      	str	r3, [r7, #28]

	GPIO_PORTA, GPIO_Pin2,
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb12 = { GPIO_PORTB, GPIO_Pin12,
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <main+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	61bb      	str	r3, [r7, #24]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb13 = { GPIO_PORTB, GPIO_Pin13,
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <main+0xd8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	617b      	str	r3, [r7, #20]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb14 = { GPIO_PORTB, GPIO_Pin14,
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <main+0xdc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb15 = { GPIO_PORTB, GPIO_Pin15,
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <main+0xe0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pina8 = { GPIO_PORTA, GPIO_Pin8,
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <main+0xe4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60bb      	str	r3, [r7, #8]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pina11 = { GPIO_PORTA, GPIO_Pin11,
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <main+0xe8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	607b      	str	r3, [r7, #4]
	GPIO_PinModeOutput_PP, LOW_O

	};

	RCC_RETURNtInit();
 8000ab4:	f7ff fe12 	bl	80006dc <RCC_RETURNtInit>

	RCC_RETURNtPeripheralEn(APB2, PORTA_APB2_peripherals);
 8000ab8:	2102      	movs	r1, #2
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fea8 	bl	8000810 <RCC_RETURNtPeripheralEn>
	RCC_RETURNtPeripheralEn(APB2, PORTB_APB2_peripherals);
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff fea4 	bl	8000810 <RCC_RETURNtPeripheralEn>



	GPIO_RETURNtPinInit(&Pina2);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fc97 	bl	8000400 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb12);
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fc92 	bl	8000400 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb13);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc8d 	bl	8000400 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb14);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fc88 	bl	8000400 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb15);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc83 	bl	8000400 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pina8);
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc7e 	bl	8000400 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pina11);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fc7a 	bl	8000400 <GPIO_RETURNtPinInit>

	SysTick_vInit();
 8000b0c:	f7ff fec0 	bl	8000890 <SysTick_vInit>

	LCD_Init();
 8000b10:	f7ff fc30 	bl	8000374 <LCD_Init>
		GPIO_RETURNtPinToggle(GPIO_PORTA, GPIO_Pin2);

		SysTick_vDelayms(1000);
		*/

		LCD_WriteString("Hello Zaharaa )");
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <main+0xec>)
 8000b16:	f7ff fc5a 	bl	80003ce <LCD_WriteString>
		SysTick_vDelayms(2000);
 8000b1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b1e:	f7ff fecb 	bl	80008b8 <SysTick_vDelayms>
		LCD_Clear() ;
 8000b22:	f7ff fc4d 	bl	80003c0 <LCD_Clear>
		LCD_WriteString("Hello Zaharaa )");
 8000b26:	e7f5      	b.n	8000b14 <main+0xbc>
 8000b28:	08001b98 	.word	0x08001b98
 8000b2c:	08001b9c 	.word	0x08001b9c
 8000b30:	08001ba0 	.word	0x08001ba0
 8000b34:	08001ba4 	.word	0x08001ba4
 8000b38:	08001ba8 	.word	0x08001ba8
 8000b3c:	08001bac 	.word	0x08001bac
 8000b40:	08001bb0 	.word	0x08001bb0
 8000b44:	08001b88 	.word	0x08001b88

08000b48 <WWDG_IRQHandler>:
	 */

	return 0;
}

void WWDG_IRQHandler(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

	printf("Hello ") ;
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <WWDG_IRQHandler+0x10>)
 8000b4e:	f000 f991 	bl	8000e74 <iprintf>

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	08001bb4 	.word	0x08001bb4

08000b5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
  }

  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
  }
  return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf4:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <_isatty>:

int _isatty(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f000 f9ac 	bl	8000fbc <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20005000 	.word	0x20005000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000094 	.word	0x20000094
 8000c98:	200001e8 	.word	0x200001e8

08000c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cca:	f000 f97d 	bl	8000fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cce:	f7ff fec3 	bl	8000a58 <main>

08000cd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   r0, =_estack
 8000cd4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ce0:	08001bf8 	.word	0x08001bf8
  ldr r2, =_sbss
 8000ce4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ce8:	200001e4 	.word	0x200001e4

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>
	...

08000cf0 <std>:
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	b510      	push	{r4, lr}
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8000cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cfe:	6083      	str	r3, [r0, #8]
 8000d00:	8181      	strh	r1, [r0, #12]
 8000d02:	6643      	str	r3, [r0, #100]	; 0x64
 8000d04:	81c2      	strh	r2, [r0, #14]
 8000d06:	6183      	str	r3, [r0, #24]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	305c      	adds	r0, #92	; 0x5c
 8000d0e:	f000 f906 	bl	8000f1e <memset>
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <std+0x58>)
 8000d14:	6224      	str	r4, [r4, #32]
 8000d16:	6263      	str	r3, [r4, #36]	; 0x24
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <std+0x5c>)
 8000d1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <std+0x60>)
 8000d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <std+0x64>)
 8000d22:	6323      	str	r3, [r4, #48]	; 0x30
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <std+0x68>)
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d006      	beq.n	8000d38 <std+0x48>
 8000d2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000d2e:	4294      	cmp	r4, r2
 8000d30:	d002      	beq.n	8000d38 <std+0x48>
 8000d32:	33d0      	adds	r3, #208	; 0xd0
 8000d34:	429c      	cmp	r4, r3
 8000d36:	d105      	bne.n	8000d44 <std+0x54>
 8000d38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d40:	f000 b966 	b.w	8001010 <__retarget_lock_init_recursive>
 8000d44:	bd10      	pop	{r4, pc}
 8000d46:	bf00      	nop
 8000d48:	08000e99 	.word	0x08000e99
 8000d4c:	08000ebb 	.word	0x08000ebb
 8000d50:	08000ef3 	.word	0x08000ef3
 8000d54:	08000f17 	.word	0x08000f17
 8000d58:	20000098 	.word	0x20000098

08000d5c <stdio_exit_handler>:
 8000d5c:	4a02      	ldr	r2, [pc, #8]	; (8000d68 <stdio_exit_handler+0xc>)
 8000d5e:	4903      	ldr	r1, [pc, #12]	; (8000d6c <stdio_exit_handler+0x10>)
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <stdio_exit_handler+0x14>)
 8000d62:	f000 b869 	b.w	8000e38 <_fwalk_sglue>
 8000d66:	bf00      	nop
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	080018b1 	.word	0x080018b1
 8000d70:	20000018 	.word	0x20000018

08000d74 <cleanup_stdio>:
 8000d74:	6841      	ldr	r1, [r0, #4]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <cleanup_stdio+0x34>)
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	d001      	beq.n	8000d84 <cleanup_stdio+0x10>
 8000d80:	f000 fd96 	bl	80018b0 <_fflush_r>
 8000d84:	68a1      	ldr	r1, [r4, #8]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <cleanup_stdio+0x38>)
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d002      	beq.n	8000d92 <cleanup_stdio+0x1e>
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f000 fd8f 	bl	80018b0 <_fflush_r>
 8000d92:	68e1      	ldr	r1, [r4, #12]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <cleanup_stdio+0x3c>)
 8000d96:	4299      	cmp	r1, r3
 8000d98:	d004      	beq.n	8000da4 <cleanup_stdio+0x30>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da0:	f000 bd86 	b.w	80018b0 <_fflush_r>
 8000da4:	bd10      	pop	{r4, pc}
 8000da6:	bf00      	nop
 8000da8:	20000098 	.word	0x20000098
 8000dac:	20000100 	.word	0x20000100
 8000db0:	20000168 	.word	0x20000168

08000db4 <global_stdio_init.part.0>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <global_stdio_init.part.0+0x30>)
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <global_stdio_init.part.0+0x34>)
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <global_stdio_init.part.0+0x38>)
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff ff94 	bl	8000cf0 <std>
 8000dc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2109      	movs	r1, #9
 8000dd0:	f7ff ff8e 	bl	8000cf0 <std>
 8000dd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000dd8:	2202      	movs	r2, #2
 8000dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dde:	2112      	movs	r1, #18
 8000de0:	f7ff bf86 	b.w	8000cf0 <std>
 8000de4:	200001d0 	.word	0x200001d0
 8000de8:	20000098 	.word	0x20000098
 8000dec:	08000d5d 	.word	0x08000d5d

08000df0 <__sfp_lock_acquire>:
 8000df0:	4801      	ldr	r0, [pc, #4]	; (8000df8 <__sfp_lock_acquire+0x8>)
 8000df2:	f000 b90e 	b.w	8001012 <__retarget_lock_acquire_recursive>
 8000df6:	bf00      	nop
 8000df8:	200001d9 	.word	0x200001d9

08000dfc <__sfp_lock_release>:
 8000dfc:	4801      	ldr	r0, [pc, #4]	; (8000e04 <__sfp_lock_release+0x8>)
 8000dfe:	f000 b909 	b.w	8001014 <__retarget_lock_release_recursive>
 8000e02:	bf00      	nop
 8000e04:	200001d9 	.word	0x200001d9

08000e08 <__sinit>:
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	f7ff fff0 	bl	8000df0 <__sfp_lock_acquire>
 8000e10:	6a23      	ldr	r3, [r4, #32]
 8000e12:	b11b      	cbz	r3, 8000e1c <__sinit+0x14>
 8000e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e18:	f7ff bff0 	b.w	8000dfc <__sfp_lock_release>
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__sinit+0x28>)
 8000e1e:	6223      	str	r3, [r4, #32]
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__sinit+0x2c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f5      	bne.n	8000e14 <__sinit+0xc>
 8000e28:	f7ff ffc4 	bl	8000db4 <global_stdio_init.part.0>
 8000e2c:	e7f2      	b.n	8000e14 <__sinit+0xc>
 8000e2e:	bf00      	nop
 8000e30:	08000d75 	.word	0x08000d75
 8000e34:	200001d0 	.word	0x200001d0

08000e38 <_fwalk_sglue>:
 8000e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e3c:	4607      	mov	r7, r0
 8000e3e:	4688      	mov	r8, r1
 8000e40:	4614      	mov	r4, r2
 8000e42:	2600      	movs	r6, #0
 8000e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e48:	f1b9 0901 	subs.w	r9, r9, #1
 8000e4c:	d505      	bpl.n	8000e5a <_fwalk_sglue+0x22>
 8000e4e:	6824      	ldr	r4, [r4, #0]
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d1f7      	bne.n	8000e44 <_fwalk_sglue+0xc>
 8000e54:	4630      	mov	r0, r6
 8000e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d907      	bls.n	8000e70 <_fwalk_sglue+0x38>
 8000e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e64:	3301      	adds	r3, #1
 8000e66:	d003      	beq.n	8000e70 <_fwalk_sglue+0x38>
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4638      	mov	r0, r7
 8000e6c:	47c0      	blx	r8
 8000e6e:	4306      	orrs	r6, r0
 8000e70:	3568      	adds	r5, #104	; 0x68
 8000e72:	e7e9      	b.n	8000e48 <_fwalk_sglue+0x10>

08000e74 <iprintf>:
 8000e74:	b40f      	push	{r0, r1, r2, r3}
 8000e76:	b507      	push	{r0, r1, r2, lr}
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <iprintf+0x20>)
 8000e7a:	ab04      	add	r3, sp, #16
 8000e7c:	6808      	ldr	r0, [r1, #0]
 8000e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e82:	6881      	ldr	r1, [r0, #8]
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	f000 f9e3 	bl	8001250 <_vfiprintf_r>
 8000e8a:	b003      	add	sp, #12
 8000e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr
 8000e94:	20000064 	.word	0x20000064

08000e98 <__sread>:
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea0:	f000 f868 	bl	8000f74 <_read_r>
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	bfab      	itete	ge
 8000ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8000eac:	181b      	addge	r3, r3, r0
 8000eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000eb2:	bfac      	ite	ge
 8000eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eb6:	81a3      	strhlt	r3, [r4, #12]
 8000eb8:	bd10      	pop	{r4, pc}

08000eba <__swrite>:
 8000eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebe:	461f      	mov	r7, r3
 8000ec0:	898b      	ldrh	r3, [r1, #12]
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	4616      	mov	r6, r2
 8000eca:	d505      	bpl.n	8000ed8 <__swrite+0x1e>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed4:	f000 f83c 	bl	8000f50 <_lseek_r>
 8000ed8:	89a3      	ldrh	r3, [r4, #12]
 8000eda:	4632      	mov	r2, r6
 8000edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee0:	81a3      	strh	r3, [r4, #12]
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eee:	f000 b853 	b.w	8000f98 <_write_r>

08000ef2 <__sseek>:
 8000ef2:	b510      	push	{r4, lr}
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000efa:	f000 f829 	bl	8000f50 <_lseek_r>
 8000efe:	1c43      	adds	r3, r0, #1
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	bf15      	itete	ne
 8000f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f0e:	81a3      	strheq	r3, [r4, #12]
 8000f10:	bf18      	it	ne
 8000f12:	81a3      	strhne	r3, [r4, #12]
 8000f14:	bd10      	pop	{r4, pc}

08000f16 <__sclose>:
 8000f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1a:	f000 b809 	b.w	8000f30 <_close_r>

08000f1e <memset>:
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4402      	add	r2, r0
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d100      	bne.n	8000f28 <memset+0xa>
 8000f26:	4770      	bx	lr
 8000f28:	f803 1b01 	strb.w	r1, [r3], #1
 8000f2c:	e7f9      	b.n	8000f22 <memset+0x4>
	...

08000f30 <_close_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	2300      	movs	r3, #0
 8000f34:	4d05      	ldr	r5, [pc, #20]	; (8000f4c <_close_r+0x1c>)
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	602b      	str	r3, [r5, #0]
 8000f3c:	f7ff fe47 	bl	8000bce <_close>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_close_r+0x1a>
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_close_r+0x1a>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	200001d4 	.word	0x200001d4

08000f50 <_lseek_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4d05      	ldr	r5, [pc, #20]	; (8000f70 <_lseek_r+0x20>)
 8000f5c:	602a      	str	r2, [r5, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f7ff fe59 	bl	8000c16 <_lseek>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_lseek_r+0x1e>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_lseek_r+0x1e>
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	200001d4 	.word	0x200001d4

08000f74 <_read_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4d05      	ldr	r5, [pc, #20]	; (8000f94 <_read_r+0x20>)
 8000f80:	602a      	str	r2, [r5, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f7ff fdea 	bl	8000b5c <_read>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_read_r+0x1e>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_read_r+0x1e>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	200001d4 	.word	0x200001d4

08000f98 <_write_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4d05      	ldr	r5, [pc, #20]	; (8000fb8 <_write_r+0x20>)
 8000fa4:	602a      	str	r2, [r5, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f7ff fdf5 	bl	8000b96 <_write>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_write_r+0x1e>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_write_r+0x1e>
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	200001d4 	.word	0x200001d4

08000fbc <__errno>:
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <__errno+0x8>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000064 	.word	0x20000064

08000fc8 <__libc_init_array>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	2600      	movs	r6, #0
 8000fcc:	4d0c      	ldr	r5, [pc, #48]	; (8001000 <__libc_init_array+0x38>)
 8000fce:	4c0d      	ldr	r4, [pc, #52]	; (8001004 <__libc_init_array+0x3c>)
 8000fd0:	1b64      	subs	r4, r4, r5
 8000fd2:	10a4      	asrs	r4, r4, #2
 8000fd4:	42a6      	cmp	r6, r4
 8000fd6:	d109      	bne.n	8000fec <__libc_init_array+0x24>
 8000fd8:	f000 fdca 	bl	8001b70 <_init>
 8000fdc:	2600      	movs	r6, #0
 8000fde:	4d0a      	ldr	r5, [pc, #40]	; (8001008 <__libc_init_array+0x40>)
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	; (800100c <__libc_init_array+0x44>)
 8000fe2:	1b64      	subs	r4, r4, r5
 8000fe4:	10a4      	asrs	r4, r4, #2
 8000fe6:	42a6      	cmp	r6, r4
 8000fe8:	d105      	bne.n	8000ff6 <__libc_init_array+0x2e>
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff0:	4798      	blx	r3
 8000ff2:	3601      	adds	r6, #1
 8000ff4:	e7ee      	b.n	8000fd4 <__libc_init_array+0xc>
 8000ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffa:	4798      	blx	r3
 8000ffc:	3601      	adds	r6, #1
 8000ffe:	e7f2      	b.n	8000fe6 <__libc_init_array+0x1e>
 8001000:	08001bf0 	.word	0x08001bf0
 8001004:	08001bf0 	.word	0x08001bf0
 8001008:	08001bf0 	.word	0x08001bf0
 800100c:	08001bf4 	.word	0x08001bf4

08001010 <__retarget_lock_init_recursive>:
 8001010:	4770      	bx	lr

08001012 <__retarget_lock_acquire_recursive>:
 8001012:	4770      	bx	lr

08001014 <__retarget_lock_release_recursive>:
 8001014:	4770      	bx	lr
	...

08001018 <_free_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4605      	mov	r5, r0
 800101c:	2900      	cmp	r1, #0
 800101e:	d040      	beq.n	80010a2 <_free_r+0x8a>
 8001020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001024:	1f0c      	subs	r4, r1, #4
 8001026:	2b00      	cmp	r3, #0
 8001028:	bfb8      	it	lt
 800102a:	18e4      	addlt	r4, r4, r3
 800102c:	f000 f8dc 	bl	80011e8 <__malloc_lock>
 8001030:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <_free_r+0x8c>)
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	b933      	cbnz	r3, 8001044 <_free_r+0x2c>
 8001036:	6063      	str	r3, [r4, #4]
 8001038:	6014      	str	r4, [r2, #0]
 800103a:	4628      	mov	r0, r5
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b8d8 	b.w	80011f4 <__malloc_unlock>
 8001044:	42a3      	cmp	r3, r4
 8001046:	d908      	bls.n	800105a <_free_r+0x42>
 8001048:	6820      	ldr	r0, [r4, #0]
 800104a:	1821      	adds	r1, r4, r0
 800104c:	428b      	cmp	r3, r1
 800104e:	bf01      	itttt	eq
 8001050:	6819      	ldreq	r1, [r3, #0]
 8001052:	685b      	ldreq	r3, [r3, #4]
 8001054:	1809      	addeq	r1, r1, r0
 8001056:	6021      	streq	r1, [r4, #0]
 8001058:	e7ed      	b.n	8001036 <_free_r+0x1e>
 800105a:	461a      	mov	r2, r3
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	b10b      	cbz	r3, 8001064 <_free_r+0x4c>
 8001060:	42a3      	cmp	r3, r4
 8001062:	d9fa      	bls.n	800105a <_free_r+0x42>
 8001064:	6811      	ldr	r1, [r2, #0]
 8001066:	1850      	adds	r0, r2, r1
 8001068:	42a0      	cmp	r0, r4
 800106a:	d10b      	bne.n	8001084 <_free_r+0x6c>
 800106c:	6820      	ldr	r0, [r4, #0]
 800106e:	4401      	add	r1, r0
 8001070:	1850      	adds	r0, r2, r1
 8001072:	4283      	cmp	r3, r0
 8001074:	6011      	str	r1, [r2, #0]
 8001076:	d1e0      	bne.n	800103a <_free_r+0x22>
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4408      	add	r0, r1
 800107e:	6010      	str	r0, [r2, #0]
 8001080:	6053      	str	r3, [r2, #4]
 8001082:	e7da      	b.n	800103a <_free_r+0x22>
 8001084:	d902      	bls.n	800108c <_free_r+0x74>
 8001086:	230c      	movs	r3, #12
 8001088:	602b      	str	r3, [r5, #0]
 800108a:	e7d6      	b.n	800103a <_free_r+0x22>
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	1821      	adds	r1, r4, r0
 8001090:	428b      	cmp	r3, r1
 8001092:	bf01      	itttt	eq
 8001094:	6819      	ldreq	r1, [r3, #0]
 8001096:	685b      	ldreq	r3, [r3, #4]
 8001098:	1809      	addeq	r1, r1, r0
 800109a:	6021      	streq	r1, [r4, #0]
 800109c:	6063      	str	r3, [r4, #4]
 800109e:	6054      	str	r4, [r2, #4]
 80010a0:	e7cb      	b.n	800103a <_free_r+0x22>
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
 80010a4:	200001dc 	.word	0x200001dc

080010a8 <sbrk_aligned>:
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	4e0e      	ldr	r6, [pc, #56]	; (80010e4 <sbrk_aligned+0x3c>)
 80010ac:	460c      	mov	r4, r1
 80010ae:	6831      	ldr	r1, [r6, #0]
 80010b0:	4605      	mov	r5, r0
 80010b2:	b911      	cbnz	r1, 80010ba <sbrk_aligned+0x12>
 80010b4:	f000 fcba 	bl	8001a2c <_sbrk_r>
 80010b8:	6030      	str	r0, [r6, #0]
 80010ba:	4621      	mov	r1, r4
 80010bc:	4628      	mov	r0, r5
 80010be:	f000 fcb5 	bl	8001a2c <_sbrk_r>
 80010c2:	1c43      	adds	r3, r0, #1
 80010c4:	d00a      	beq.n	80010dc <sbrk_aligned+0x34>
 80010c6:	1cc4      	adds	r4, r0, #3
 80010c8:	f024 0403 	bic.w	r4, r4, #3
 80010cc:	42a0      	cmp	r0, r4
 80010ce:	d007      	beq.n	80010e0 <sbrk_aligned+0x38>
 80010d0:	1a21      	subs	r1, r4, r0
 80010d2:	4628      	mov	r0, r5
 80010d4:	f000 fcaa 	bl	8001a2c <_sbrk_r>
 80010d8:	3001      	adds	r0, #1
 80010da:	d101      	bne.n	80010e0 <sbrk_aligned+0x38>
 80010dc:	f04f 34ff 	mov.w	r4, #4294967295
 80010e0:	4620      	mov	r0, r4
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
 80010e4:	200001e0 	.word	0x200001e0

080010e8 <_malloc_r>:
 80010e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010ec:	1ccd      	adds	r5, r1, #3
 80010ee:	f025 0503 	bic.w	r5, r5, #3
 80010f2:	3508      	adds	r5, #8
 80010f4:	2d0c      	cmp	r5, #12
 80010f6:	bf38      	it	cc
 80010f8:	250c      	movcc	r5, #12
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	4607      	mov	r7, r0
 80010fe:	db01      	blt.n	8001104 <_malloc_r+0x1c>
 8001100:	42a9      	cmp	r1, r5
 8001102:	d905      	bls.n	8001110 <_malloc_r+0x28>
 8001104:	230c      	movs	r3, #12
 8001106:	2600      	movs	r6, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4630      	mov	r0, r6
 800110c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001110:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80011e4 <_malloc_r+0xfc>
 8001114:	f000 f868 	bl	80011e8 <__malloc_lock>
 8001118:	f8d8 3000 	ldr.w	r3, [r8]
 800111c:	461c      	mov	r4, r3
 800111e:	bb5c      	cbnz	r4, 8001178 <_malloc_r+0x90>
 8001120:	4629      	mov	r1, r5
 8001122:	4638      	mov	r0, r7
 8001124:	f7ff ffc0 	bl	80010a8 <sbrk_aligned>
 8001128:	1c43      	adds	r3, r0, #1
 800112a:	4604      	mov	r4, r0
 800112c:	d155      	bne.n	80011da <_malloc_r+0xf2>
 800112e:	f8d8 4000 	ldr.w	r4, [r8]
 8001132:	4626      	mov	r6, r4
 8001134:	2e00      	cmp	r6, #0
 8001136:	d145      	bne.n	80011c4 <_malloc_r+0xdc>
 8001138:	2c00      	cmp	r4, #0
 800113a:	d048      	beq.n	80011ce <_malloc_r+0xe6>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	4631      	mov	r1, r6
 8001140:	4638      	mov	r0, r7
 8001142:	eb04 0903 	add.w	r9, r4, r3
 8001146:	f000 fc71 	bl	8001a2c <_sbrk_r>
 800114a:	4581      	cmp	r9, r0
 800114c:	d13f      	bne.n	80011ce <_malloc_r+0xe6>
 800114e:	6821      	ldr	r1, [r4, #0]
 8001150:	4638      	mov	r0, r7
 8001152:	1a6d      	subs	r5, r5, r1
 8001154:	4629      	mov	r1, r5
 8001156:	f7ff ffa7 	bl	80010a8 <sbrk_aligned>
 800115a:	3001      	adds	r0, #1
 800115c:	d037      	beq.n	80011ce <_malloc_r+0xe6>
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	442b      	add	r3, r5
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	f8d8 3000 	ldr.w	r3, [r8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d038      	beq.n	80011de <_malloc_r+0xf6>
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	42a2      	cmp	r2, r4
 8001170:	d12b      	bne.n	80011ca <_malloc_r+0xe2>
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	e00f      	b.n	8001198 <_malloc_r+0xb0>
 8001178:	6822      	ldr	r2, [r4, #0]
 800117a:	1b52      	subs	r2, r2, r5
 800117c:	d41f      	bmi.n	80011be <_malloc_r+0xd6>
 800117e:	2a0b      	cmp	r2, #11
 8001180:	d917      	bls.n	80011b2 <_malloc_r+0xca>
 8001182:	1961      	adds	r1, r4, r5
 8001184:	42a3      	cmp	r3, r4
 8001186:	6025      	str	r5, [r4, #0]
 8001188:	bf18      	it	ne
 800118a:	6059      	strne	r1, [r3, #4]
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	bf08      	it	eq
 8001190:	f8c8 1000 	streq.w	r1, [r8]
 8001194:	5162      	str	r2, [r4, r5]
 8001196:	604b      	str	r3, [r1, #4]
 8001198:	4638      	mov	r0, r7
 800119a:	f104 060b 	add.w	r6, r4, #11
 800119e:	f000 f829 	bl	80011f4 <__malloc_unlock>
 80011a2:	f026 0607 	bic.w	r6, r6, #7
 80011a6:	1d23      	adds	r3, r4, #4
 80011a8:	1af2      	subs	r2, r6, r3
 80011aa:	d0ae      	beq.n	800110a <_malloc_r+0x22>
 80011ac:	1b9b      	subs	r3, r3, r6
 80011ae:	50a3      	str	r3, [r4, r2]
 80011b0:	e7ab      	b.n	800110a <_malloc_r+0x22>
 80011b2:	42a3      	cmp	r3, r4
 80011b4:	6862      	ldr	r2, [r4, #4]
 80011b6:	d1dd      	bne.n	8001174 <_malloc_r+0x8c>
 80011b8:	f8c8 2000 	str.w	r2, [r8]
 80011bc:	e7ec      	b.n	8001198 <_malloc_r+0xb0>
 80011be:	4623      	mov	r3, r4
 80011c0:	6864      	ldr	r4, [r4, #4]
 80011c2:	e7ac      	b.n	800111e <_malloc_r+0x36>
 80011c4:	4634      	mov	r4, r6
 80011c6:	6876      	ldr	r6, [r6, #4]
 80011c8:	e7b4      	b.n	8001134 <_malloc_r+0x4c>
 80011ca:	4613      	mov	r3, r2
 80011cc:	e7cc      	b.n	8001168 <_malloc_r+0x80>
 80011ce:	230c      	movs	r3, #12
 80011d0:	4638      	mov	r0, r7
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	f000 f80e 	bl	80011f4 <__malloc_unlock>
 80011d8:	e797      	b.n	800110a <_malloc_r+0x22>
 80011da:	6025      	str	r5, [r4, #0]
 80011dc:	e7dc      	b.n	8001198 <_malloc_r+0xb0>
 80011de:	605b      	str	r3, [r3, #4]
 80011e0:	deff      	udf	#255	; 0xff
 80011e2:	bf00      	nop
 80011e4:	200001dc 	.word	0x200001dc

080011e8 <__malloc_lock>:
 80011e8:	4801      	ldr	r0, [pc, #4]	; (80011f0 <__malloc_lock+0x8>)
 80011ea:	f7ff bf12 	b.w	8001012 <__retarget_lock_acquire_recursive>
 80011ee:	bf00      	nop
 80011f0:	200001d8 	.word	0x200001d8

080011f4 <__malloc_unlock>:
 80011f4:	4801      	ldr	r0, [pc, #4]	; (80011fc <__malloc_unlock+0x8>)
 80011f6:	f7ff bf0d 	b.w	8001014 <__retarget_lock_release_recursive>
 80011fa:	bf00      	nop
 80011fc:	200001d8 	.word	0x200001d8

08001200 <__sfputc_r>:
 8001200:	6893      	ldr	r3, [r2, #8]
 8001202:	b410      	push	{r4}
 8001204:	3b01      	subs	r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	6093      	str	r3, [r2, #8]
 800120a:	da07      	bge.n	800121c <__sfputc_r+0x1c>
 800120c:	6994      	ldr	r4, [r2, #24]
 800120e:	42a3      	cmp	r3, r4
 8001210:	db01      	blt.n	8001216 <__sfputc_r+0x16>
 8001212:	290a      	cmp	r1, #10
 8001214:	d102      	bne.n	800121c <__sfputc_r+0x1c>
 8001216:	bc10      	pop	{r4}
 8001218:	f000 bb72 	b.w	8001900 <__swbuf_r>
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	1c58      	adds	r0, r3, #1
 8001220:	6010      	str	r0, [r2, #0]
 8001222:	7019      	strb	r1, [r3, #0]
 8001224:	4608      	mov	r0, r1
 8001226:	bc10      	pop	{r4}
 8001228:	4770      	bx	lr

0800122a <__sfputs_r>:
 800122a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122c:	4606      	mov	r6, r0
 800122e:	460f      	mov	r7, r1
 8001230:	4614      	mov	r4, r2
 8001232:	18d5      	adds	r5, r2, r3
 8001234:	42ac      	cmp	r4, r5
 8001236:	d101      	bne.n	800123c <__sfputs_r+0x12>
 8001238:	2000      	movs	r0, #0
 800123a:	e007      	b.n	800124c <__sfputs_r+0x22>
 800123c:	463a      	mov	r2, r7
 800123e:	4630      	mov	r0, r6
 8001240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001244:	f7ff ffdc 	bl	8001200 <__sfputc_r>
 8001248:	1c43      	adds	r3, r0, #1
 800124a:	d1f3      	bne.n	8001234 <__sfputs_r+0xa>
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001250 <_vfiprintf_r>:
 8001250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001254:	460d      	mov	r5, r1
 8001256:	4614      	mov	r4, r2
 8001258:	4698      	mov	r8, r3
 800125a:	4606      	mov	r6, r0
 800125c:	b09d      	sub	sp, #116	; 0x74
 800125e:	b118      	cbz	r0, 8001268 <_vfiprintf_r+0x18>
 8001260:	6a03      	ldr	r3, [r0, #32]
 8001262:	b90b      	cbnz	r3, 8001268 <_vfiprintf_r+0x18>
 8001264:	f7ff fdd0 	bl	8000e08 <__sinit>
 8001268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800126a:	07d9      	lsls	r1, r3, #31
 800126c:	d405      	bmi.n	800127a <_vfiprintf_r+0x2a>
 800126e:	89ab      	ldrh	r3, [r5, #12]
 8001270:	059a      	lsls	r2, r3, #22
 8001272:	d402      	bmi.n	800127a <_vfiprintf_r+0x2a>
 8001274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001276:	f7ff fecc 	bl	8001012 <__retarget_lock_acquire_recursive>
 800127a:	89ab      	ldrh	r3, [r5, #12]
 800127c:	071b      	lsls	r3, r3, #28
 800127e:	d501      	bpl.n	8001284 <_vfiprintf_r+0x34>
 8001280:	692b      	ldr	r3, [r5, #16]
 8001282:	b99b      	cbnz	r3, 80012ac <_vfiprintf_r+0x5c>
 8001284:	4629      	mov	r1, r5
 8001286:	4630      	mov	r0, r6
 8001288:	f000 fb78 	bl	800197c <__swsetup_r>
 800128c:	b170      	cbz	r0, 80012ac <_vfiprintf_r+0x5c>
 800128e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001290:	07dc      	lsls	r4, r3, #31
 8001292:	d504      	bpl.n	800129e <_vfiprintf_r+0x4e>
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	b01d      	add	sp, #116	; 0x74
 800129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800129e:	89ab      	ldrh	r3, [r5, #12]
 80012a0:	0598      	lsls	r0, r3, #22
 80012a2:	d4f7      	bmi.n	8001294 <_vfiprintf_r+0x44>
 80012a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012a6:	f7ff feb5 	bl	8001014 <__retarget_lock_release_recursive>
 80012aa:	e7f3      	b.n	8001294 <_vfiprintf_r+0x44>
 80012ac:	2300      	movs	r3, #0
 80012ae:	9309      	str	r3, [sp, #36]	; 0x24
 80012b0:	2320      	movs	r3, #32
 80012b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012b6:	2330      	movs	r3, #48	; 0x30
 80012b8:	f04f 0901 	mov.w	r9, #1
 80012bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80012c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001470 <_vfiprintf_r+0x220>
 80012c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012c8:	4623      	mov	r3, r4
 80012ca:	469a      	mov	sl, r3
 80012cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012d0:	b10a      	cbz	r2, 80012d6 <_vfiprintf_r+0x86>
 80012d2:	2a25      	cmp	r2, #37	; 0x25
 80012d4:	d1f9      	bne.n	80012ca <_vfiprintf_r+0x7a>
 80012d6:	ebba 0b04 	subs.w	fp, sl, r4
 80012da:	d00b      	beq.n	80012f4 <_vfiprintf_r+0xa4>
 80012dc:	465b      	mov	r3, fp
 80012de:	4622      	mov	r2, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	4630      	mov	r0, r6
 80012e4:	f7ff ffa1 	bl	800122a <__sfputs_r>
 80012e8:	3001      	adds	r0, #1
 80012ea:	f000 80a9 	beq.w	8001440 <_vfiprintf_r+0x1f0>
 80012ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012f0:	445a      	add	r2, fp
 80012f2:	9209      	str	r2, [sp, #36]	; 0x24
 80012f4:	f89a 3000 	ldrb.w	r3, [sl]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a1 	beq.w	8001440 <_vfiprintf_r+0x1f0>
 80012fe:	2300      	movs	r3, #0
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001308:	f10a 0a01 	add.w	sl, sl, #1
 800130c:	9304      	str	r3, [sp, #16]
 800130e:	9307      	str	r3, [sp, #28]
 8001310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001314:	931a      	str	r3, [sp, #104]	; 0x68
 8001316:	4654      	mov	r4, sl
 8001318:	2205      	movs	r2, #5
 800131a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800131e:	4854      	ldr	r0, [pc, #336]	; (8001470 <_vfiprintf_r+0x220>)
 8001320:	f000 fb94 	bl	8001a4c <memchr>
 8001324:	9a04      	ldr	r2, [sp, #16]
 8001326:	b9d8      	cbnz	r0, 8001360 <_vfiprintf_r+0x110>
 8001328:	06d1      	lsls	r1, r2, #27
 800132a:	bf44      	itt	mi
 800132c:	2320      	movmi	r3, #32
 800132e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001332:	0713      	lsls	r3, r2, #28
 8001334:	bf44      	itt	mi
 8001336:	232b      	movmi	r3, #43	; 0x2b
 8001338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800133c:	f89a 3000 	ldrb.w	r3, [sl]
 8001340:	2b2a      	cmp	r3, #42	; 0x2a
 8001342:	d015      	beq.n	8001370 <_vfiprintf_r+0x120>
 8001344:	4654      	mov	r4, sl
 8001346:	2000      	movs	r0, #0
 8001348:	f04f 0c0a 	mov.w	ip, #10
 800134c:	9a07      	ldr	r2, [sp, #28]
 800134e:	4621      	mov	r1, r4
 8001350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001354:	3b30      	subs	r3, #48	; 0x30
 8001356:	2b09      	cmp	r3, #9
 8001358:	d94d      	bls.n	80013f6 <_vfiprintf_r+0x1a6>
 800135a:	b1b0      	cbz	r0, 800138a <_vfiprintf_r+0x13a>
 800135c:	9207      	str	r2, [sp, #28]
 800135e:	e014      	b.n	800138a <_vfiprintf_r+0x13a>
 8001360:	eba0 0308 	sub.w	r3, r0, r8
 8001364:	fa09 f303 	lsl.w	r3, r9, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	46a2      	mov	sl, r4
 800136c:	9304      	str	r3, [sp, #16]
 800136e:	e7d2      	b.n	8001316 <_vfiprintf_r+0xc6>
 8001370:	9b03      	ldr	r3, [sp, #12]
 8001372:	1d19      	adds	r1, r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	9103      	str	r1, [sp, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	bfbb      	ittet	lt
 800137c:	425b      	neglt	r3, r3
 800137e:	f042 0202 	orrlt.w	r2, r2, #2
 8001382:	9307      	strge	r3, [sp, #28]
 8001384:	9307      	strlt	r3, [sp, #28]
 8001386:	bfb8      	it	lt
 8001388:	9204      	strlt	r2, [sp, #16]
 800138a:	7823      	ldrb	r3, [r4, #0]
 800138c:	2b2e      	cmp	r3, #46	; 0x2e
 800138e:	d10c      	bne.n	80013aa <_vfiprintf_r+0x15a>
 8001390:	7863      	ldrb	r3, [r4, #1]
 8001392:	2b2a      	cmp	r3, #42	; 0x2a
 8001394:	d134      	bne.n	8001400 <_vfiprintf_r+0x1b0>
 8001396:	9b03      	ldr	r3, [sp, #12]
 8001398:	3402      	adds	r4, #2
 800139a:	1d1a      	adds	r2, r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	9203      	str	r2, [sp, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bfb8      	it	lt
 80013a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80013a8:	9305      	str	r3, [sp, #20]
 80013aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001474 <_vfiprintf_r+0x224>
 80013ae:	2203      	movs	r2, #3
 80013b0:	4650      	mov	r0, sl
 80013b2:	7821      	ldrb	r1, [r4, #0]
 80013b4:	f000 fb4a 	bl	8001a4c <memchr>
 80013b8:	b138      	cbz	r0, 80013ca <_vfiprintf_r+0x17a>
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	9b04      	ldr	r3, [sp, #16]
 80013be:	eba0 000a 	sub.w	r0, r0, sl
 80013c2:	4082      	lsls	r2, r0
 80013c4:	4313      	orrs	r3, r2
 80013c6:	3401      	adds	r4, #1
 80013c8:	9304      	str	r3, [sp, #16]
 80013ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013ce:	2206      	movs	r2, #6
 80013d0:	4829      	ldr	r0, [pc, #164]	; (8001478 <_vfiprintf_r+0x228>)
 80013d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013d6:	f000 fb39 	bl	8001a4c <memchr>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d03f      	beq.n	800145e <_vfiprintf_r+0x20e>
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <_vfiprintf_r+0x22c>)
 80013e0:	bb1b      	cbnz	r3, 800142a <_vfiprintf_r+0x1da>
 80013e2:	9b03      	ldr	r3, [sp, #12]
 80013e4:	3307      	adds	r3, #7
 80013e6:	f023 0307 	bic.w	r3, r3, #7
 80013ea:	3308      	adds	r3, #8
 80013ec:	9303      	str	r3, [sp, #12]
 80013ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013f0:	443b      	add	r3, r7
 80013f2:	9309      	str	r3, [sp, #36]	; 0x24
 80013f4:	e768      	b.n	80012c8 <_vfiprintf_r+0x78>
 80013f6:	460c      	mov	r4, r1
 80013f8:	2001      	movs	r0, #1
 80013fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80013fe:	e7a6      	b.n	800134e <_vfiprintf_r+0xfe>
 8001400:	2300      	movs	r3, #0
 8001402:	f04f 0c0a 	mov.w	ip, #10
 8001406:	4619      	mov	r1, r3
 8001408:	3401      	adds	r4, #1
 800140a:	9305      	str	r3, [sp, #20]
 800140c:	4620      	mov	r0, r4
 800140e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001412:	3a30      	subs	r2, #48	; 0x30
 8001414:	2a09      	cmp	r2, #9
 8001416:	d903      	bls.n	8001420 <_vfiprintf_r+0x1d0>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0c6      	beq.n	80013aa <_vfiprintf_r+0x15a>
 800141c:	9105      	str	r1, [sp, #20]
 800141e:	e7c4      	b.n	80013aa <_vfiprintf_r+0x15a>
 8001420:	4604      	mov	r4, r0
 8001422:	2301      	movs	r3, #1
 8001424:	fb0c 2101 	mla	r1, ip, r1, r2
 8001428:	e7f0      	b.n	800140c <_vfiprintf_r+0x1bc>
 800142a:	ab03      	add	r3, sp, #12
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	462a      	mov	r2, r5
 8001430:	4630      	mov	r0, r6
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_vfiprintf_r+0x230>)
 8001434:	a904      	add	r1, sp, #16
 8001436:	f3af 8000 	nop.w
 800143a:	4607      	mov	r7, r0
 800143c:	1c78      	adds	r0, r7, #1
 800143e:	d1d6      	bne.n	80013ee <_vfiprintf_r+0x19e>
 8001440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001442:	07d9      	lsls	r1, r3, #31
 8001444:	d405      	bmi.n	8001452 <_vfiprintf_r+0x202>
 8001446:	89ab      	ldrh	r3, [r5, #12]
 8001448:	059a      	lsls	r2, r3, #22
 800144a:	d402      	bmi.n	8001452 <_vfiprintf_r+0x202>
 800144c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800144e:	f7ff fde1 	bl	8001014 <__retarget_lock_release_recursive>
 8001452:	89ab      	ldrh	r3, [r5, #12]
 8001454:	065b      	lsls	r3, r3, #25
 8001456:	f53f af1d 	bmi.w	8001294 <_vfiprintf_r+0x44>
 800145a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800145c:	e71c      	b.n	8001298 <_vfiprintf_r+0x48>
 800145e:	ab03      	add	r3, sp, #12
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	462a      	mov	r2, r5
 8001464:	4630      	mov	r0, r6
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <_vfiprintf_r+0x230>)
 8001468:	a904      	add	r1, sp, #16
 800146a:	f000 f87d 	bl	8001568 <_printf_i>
 800146e:	e7e4      	b.n	800143a <_vfiprintf_r+0x1ea>
 8001470:	08001bbb 	.word	0x08001bbb
 8001474:	08001bc1 	.word	0x08001bc1
 8001478:	08001bc5 	.word	0x08001bc5
 800147c:	00000000 	.word	0x00000000
 8001480:	0800122b 	.word	0x0800122b

08001484 <_printf_common>:
 8001484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001488:	4616      	mov	r6, r2
 800148a:	4699      	mov	r9, r3
 800148c:	688a      	ldr	r2, [r1, #8]
 800148e:	690b      	ldr	r3, [r1, #16]
 8001490:	4607      	mov	r7, r0
 8001492:	4293      	cmp	r3, r2
 8001494:	bfb8      	it	lt
 8001496:	4613      	movlt	r3, r2
 8001498:	6033      	str	r3, [r6, #0]
 800149a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800149e:	460c      	mov	r4, r1
 80014a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014a4:	b10a      	cbz	r2, 80014aa <_printf_common+0x26>
 80014a6:	3301      	adds	r3, #1
 80014a8:	6033      	str	r3, [r6, #0]
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	0699      	lsls	r1, r3, #26
 80014ae:	bf42      	ittt	mi
 80014b0:	6833      	ldrmi	r3, [r6, #0]
 80014b2:	3302      	addmi	r3, #2
 80014b4:	6033      	strmi	r3, [r6, #0]
 80014b6:	6825      	ldr	r5, [r4, #0]
 80014b8:	f015 0506 	ands.w	r5, r5, #6
 80014bc:	d106      	bne.n	80014cc <_printf_common+0x48>
 80014be:	f104 0a19 	add.w	sl, r4, #25
 80014c2:	68e3      	ldr	r3, [r4, #12]
 80014c4:	6832      	ldr	r2, [r6, #0]
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	42ab      	cmp	r3, r5
 80014ca:	dc2b      	bgt.n	8001524 <_printf_common+0xa0>
 80014cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	bf18      	it	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	0692      	lsls	r2, r2, #26
 80014da:	d430      	bmi.n	800153e <_printf_common+0xba>
 80014dc:	4649      	mov	r1, r9
 80014de:	4638      	mov	r0, r7
 80014e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014e4:	47c0      	blx	r8
 80014e6:	3001      	adds	r0, #1
 80014e8:	d023      	beq.n	8001532 <_printf_common+0xae>
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	6922      	ldr	r2, [r4, #16]
 80014ee:	f003 0306 	and.w	r3, r3, #6
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf14      	ite	ne
 80014f6:	2500      	movne	r5, #0
 80014f8:	6833      	ldreq	r3, [r6, #0]
 80014fa:	f04f 0600 	mov.w	r6, #0
 80014fe:	bf08      	it	eq
 8001500:	68e5      	ldreq	r5, [r4, #12]
 8001502:	f104 041a 	add.w	r4, r4, #26
 8001506:	bf08      	it	eq
 8001508:	1aed      	subeq	r5, r5, r3
 800150a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800150e:	bf08      	it	eq
 8001510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001514:	4293      	cmp	r3, r2
 8001516:	bfc4      	itt	gt
 8001518:	1a9b      	subgt	r3, r3, r2
 800151a:	18ed      	addgt	r5, r5, r3
 800151c:	42b5      	cmp	r5, r6
 800151e:	d11a      	bne.n	8001556 <_printf_common+0xd2>
 8001520:	2000      	movs	r0, #0
 8001522:	e008      	b.n	8001536 <_printf_common+0xb2>
 8001524:	2301      	movs	r3, #1
 8001526:	4652      	mov	r2, sl
 8001528:	4649      	mov	r1, r9
 800152a:	4638      	mov	r0, r7
 800152c:	47c0      	blx	r8
 800152e:	3001      	adds	r0, #1
 8001530:	d103      	bne.n	800153a <_printf_common+0xb6>
 8001532:	f04f 30ff 	mov.w	r0, #4294967295
 8001536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800153a:	3501      	adds	r5, #1
 800153c:	e7c1      	b.n	80014c2 <_printf_common+0x3e>
 800153e:	2030      	movs	r0, #48	; 0x30
 8001540:	18e1      	adds	r1, r4, r3
 8001542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800154c:	4422      	add	r2, r4
 800154e:	3302      	adds	r3, #2
 8001550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001554:	e7c2      	b.n	80014dc <_printf_common+0x58>
 8001556:	2301      	movs	r3, #1
 8001558:	4622      	mov	r2, r4
 800155a:	4649      	mov	r1, r9
 800155c:	4638      	mov	r0, r7
 800155e:	47c0      	blx	r8
 8001560:	3001      	adds	r0, #1
 8001562:	d0e6      	beq.n	8001532 <_printf_common+0xae>
 8001564:	3601      	adds	r6, #1
 8001566:	e7d9      	b.n	800151c <_printf_common+0x98>

08001568 <_printf_i>:
 8001568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800156c:	7e0f      	ldrb	r7, [r1, #24]
 800156e:	4691      	mov	r9, r2
 8001570:	2f78      	cmp	r7, #120	; 0x78
 8001572:	4680      	mov	r8, r0
 8001574:	460c      	mov	r4, r1
 8001576:	469a      	mov	sl, r3
 8001578:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800157a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800157e:	d807      	bhi.n	8001590 <_printf_i+0x28>
 8001580:	2f62      	cmp	r7, #98	; 0x62
 8001582:	d80a      	bhi.n	800159a <_printf_i+0x32>
 8001584:	2f00      	cmp	r7, #0
 8001586:	f000 80d5 	beq.w	8001734 <_printf_i+0x1cc>
 800158a:	2f58      	cmp	r7, #88	; 0x58
 800158c:	f000 80c1 	beq.w	8001712 <_printf_i+0x1aa>
 8001590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001598:	e03a      	b.n	8001610 <_printf_i+0xa8>
 800159a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800159e:	2b15      	cmp	r3, #21
 80015a0:	d8f6      	bhi.n	8001590 <_printf_i+0x28>
 80015a2:	a101      	add	r1, pc, #4	; (adr r1, 80015a8 <_printf_i+0x40>)
 80015a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015a8:	08001601 	.word	0x08001601
 80015ac:	08001615 	.word	0x08001615
 80015b0:	08001591 	.word	0x08001591
 80015b4:	08001591 	.word	0x08001591
 80015b8:	08001591 	.word	0x08001591
 80015bc:	08001591 	.word	0x08001591
 80015c0:	08001615 	.word	0x08001615
 80015c4:	08001591 	.word	0x08001591
 80015c8:	08001591 	.word	0x08001591
 80015cc:	08001591 	.word	0x08001591
 80015d0:	08001591 	.word	0x08001591
 80015d4:	0800171b 	.word	0x0800171b
 80015d8:	08001641 	.word	0x08001641
 80015dc:	080016d5 	.word	0x080016d5
 80015e0:	08001591 	.word	0x08001591
 80015e4:	08001591 	.word	0x08001591
 80015e8:	0800173d 	.word	0x0800173d
 80015ec:	08001591 	.word	0x08001591
 80015f0:	08001641 	.word	0x08001641
 80015f4:	08001591 	.word	0x08001591
 80015f8:	08001591 	.word	0x08001591
 80015fc:	080016dd 	.word	0x080016dd
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	1d1a      	adds	r2, r3, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	602a      	str	r2, [r5, #0]
 8001608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800160c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001610:	2301      	movs	r3, #1
 8001612:	e0a0      	b.n	8001756 <_printf_i+0x1ee>
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	0607      	lsls	r7, r0, #24
 800161a:	f103 0104 	add.w	r1, r3, #4
 800161e:	6029      	str	r1, [r5, #0]
 8001620:	d501      	bpl.n	8001626 <_printf_i+0xbe>
 8001622:	681e      	ldr	r6, [r3, #0]
 8001624:	e003      	b.n	800162e <_printf_i+0xc6>
 8001626:	0646      	lsls	r6, r0, #25
 8001628:	d5fb      	bpl.n	8001622 <_printf_i+0xba>
 800162a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800162e:	2e00      	cmp	r6, #0
 8001630:	da03      	bge.n	800163a <_printf_i+0xd2>
 8001632:	232d      	movs	r3, #45	; 0x2d
 8001634:	4276      	negs	r6, r6
 8001636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800163a:	230a      	movs	r3, #10
 800163c:	4859      	ldr	r0, [pc, #356]	; (80017a4 <_printf_i+0x23c>)
 800163e:	e012      	b.n	8001666 <_printf_i+0xfe>
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	6820      	ldr	r0, [r4, #0]
 8001644:	1d19      	adds	r1, r3, #4
 8001646:	6029      	str	r1, [r5, #0]
 8001648:	0605      	lsls	r5, r0, #24
 800164a:	d501      	bpl.n	8001650 <_printf_i+0xe8>
 800164c:	681e      	ldr	r6, [r3, #0]
 800164e:	e002      	b.n	8001656 <_printf_i+0xee>
 8001650:	0641      	lsls	r1, r0, #25
 8001652:	d5fb      	bpl.n	800164c <_printf_i+0xe4>
 8001654:	881e      	ldrh	r6, [r3, #0]
 8001656:	2f6f      	cmp	r7, #111	; 0x6f
 8001658:	bf0c      	ite	eq
 800165a:	2308      	moveq	r3, #8
 800165c:	230a      	movne	r3, #10
 800165e:	4851      	ldr	r0, [pc, #324]	; (80017a4 <_printf_i+0x23c>)
 8001660:	2100      	movs	r1, #0
 8001662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001666:	6865      	ldr	r5, [r4, #4]
 8001668:	2d00      	cmp	r5, #0
 800166a:	bfa8      	it	ge
 800166c:	6821      	ldrge	r1, [r4, #0]
 800166e:	60a5      	str	r5, [r4, #8]
 8001670:	bfa4      	itt	ge
 8001672:	f021 0104 	bicge.w	r1, r1, #4
 8001676:	6021      	strge	r1, [r4, #0]
 8001678:	b90e      	cbnz	r6, 800167e <_printf_i+0x116>
 800167a:	2d00      	cmp	r5, #0
 800167c:	d04b      	beq.n	8001716 <_printf_i+0x1ae>
 800167e:	4615      	mov	r5, r2
 8001680:	fbb6 f1f3 	udiv	r1, r6, r3
 8001684:	fb03 6711 	mls	r7, r3, r1, r6
 8001688:	5dc7      	ldrb	r7, [r0, r7]
 800168a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800168e:	4637      	mov	r7, r6
 8001690:	42bb      	cmp	r3, r7
 8001692:	460e      	mov	r6, r1
 8001694:	d9f4      	bls.n	8001680 <_printf_i+0x118>
 8001696:	2b08      	cmp	r3, #8
 8001698:	d10b      	bne.n	80016b2 <_printf_i+0x14a>
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	07de      	lsls	r6, r3, #31
 800169e:	d508      	bpl.n	80016b2 <_printf_i+0x14a>
 80016a0:	6923      	ldr	r3, [r4, #16]
 80016a2:	6861      	ldr	r1, [r4, #4]
 80016a4:	4299      	cmp	r1, r3
 80016a6:	bfde      	ittt	le
 80016a8:	2330      	movle	r3, #48	; 0x30
 80016aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80016ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80016b2:	1b52      	subs	r2, r2, r5
 80016b4:	6122      	str	r2, [r4, #16]
 80016b6:	464b      	mov	r3, r9
 80016b8:	4621      	mov	r1, r4
 80016ba:	4640      	mov	r0, r8
 80016bc:	f8cd a000 	str.w	sl, [sp]
 80016c0:	aa03      	add	r2, sp, #12
 80016c2:	f7ff fedf 	bl	8001484 <_printf_common>
 80016c6:	3001      	adds	r0, #1
 80016c8:	d14a      	bne.n	8001760 <_printf_i+0x1f8>
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
 80016ce:	b004      	add	sp, #16
 80016d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6023      	str	r3, [r4, #0]
 80016dc:	2778      	movs	r7, #120	; 0x78
 80016de:	4832      	ldr	r0, [pc, #200]	; (80017a8 <_printf_i+0x240>)
 80016e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	6829      	ldr	r1, [r5, #0]
 80016e8:	061f      	lsls	r7, r3, #24
 80016ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80016ee:	d402      	bmi.n	80016f6 <_printf_i+0x18e>
 80016f0:	065f      	lsls	r7, r3, #25
 80016f2:	bf48      	it	mi
 80016f4:	b2b6      	uxthmi	r6, r6
 80016f6:	07df      	lsls	r7, r3, #31
 80016f8:	bf48      	it	mi
 80016fa:	f043 0320 	orrmi.w	r3, r3, #32
 80016fe:	6029      	str	r1, [r5, #0]
 8001700:	bf48      	it	mi
 8001702:	6023      	strmi	r3, [r4, #0]
 8001704:	b91e      	cbnz	r6, 800170e <_printf_i+0x1a6>
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	f023 0320 	bic.w	r3, r3, #32
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	2310      	movs	r3, #16
 8001710:	e7a6      	b.n	8001660 <_printf_i+0xf8>
 8001712:	4824      	ldr	r0, [pc, #144]	; (80017a4 <_printf_i+0x23c>)
 8001714:	e7e4      	b.n	80016e0 <_printf_i+0x178>
 8001716:	4615      	mov	r5, r2
 8001718:	e7bd      	b.n	8001696 <_printf_i+0x12e>
 800171a:	682b      	ldr	r3, [r5, #0]
 800171c:	6826      	ldr	r6, [r4, #0]
 800171e:	1d18      	adds	r0, r3, #4
 8001720:	6961      	ldr	r1, [r4, #20]
 8001722:	6028      	str	r0, [r5, #0]
 8001724:	0635      	lsls	r5, r6, #24
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	d501      	bpl.n	800172e <_printf_i+0x1c6>
 800172a:	6019      	str	r1, [r3, #0]
 800172c:	e002      	b.n	8001734 <_printf_i+0x1cc>
 800172e:	0670      	lsls	r0, r6, #25
 8001730:	d5fb      	bpl.n	800172a <_printf_i+0x1c2>
 8001732:	8019      	strh	r1, [r3, #0]
 8001734:	2300      	movs	r3, #0
 8001736:	4615      	mov	r5, r2
 8001738:	6123      	str	r3, [r4, #16]
 800173a:	e7bc      	b.n	80016b6 <_printf_i+0x14e>
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	2100      	movs	r1, #0
 8001740:	1d1a      	adds	r2, r3, #4
 8001742:	602a      	str	r2, [r5, #0]
 8001744:	681d      	ldr	r5, [r3, #0]
 8001746:	6862      	ldr	r2, [r4, #4]
 8001748:	4628      	mov	r0, r5
 800174a:	f000 f97f 	bl	8001a4c <memchr>
 800174e:	b108      	cbz	r0, 8001754 <_printf_i+0x1ec>
 8001750:	1b40      	subs	r0, r0, r5
 8001752:	6060      	str	r0, [r4, #4]
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	6123      	str	r3, [r4, #16]
 8001758:	2300      	movs	r3, #0
 800175a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800175e:	e7aa      	b.n	80016b6 <_printf_i+0x14e>
 8001760:	462a      	mov	r2, r5
 8001762:	4649      	mov	r1, r9
 8001764:	4640      	mov	r0, r8
 8001766:	6923      	ldr	r3, [r4, #16]
 8001768:	47d0      	blx	sl
 800176a:	3001      	adds	r0, #1
 800176c:	d0ad      	beq.n	80016ca <_printf_i+0x162>
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	079b      	lsls	r3, r3, #30
 8001772:	d413      	bmi.n	800179c <_printf_i+0x234>
 8001774:	68e0      	ldr	r0, [r4, #12]
 8001776:	9b03      	ldr	r3, [sp, #12]
 8001778:	4298      	cmp	r0, r3
 800177a:	bfb8      	it	lt
 800177c:	4618      	movlt	r0, r3
 800177e:	e7a6      	b.n	80016ce <_printf_i+0x166>
 8001780:	2301      	movs	r3, #1
 8001782:	4632      	mov	r2, r6
 8001784:	4649      	mov	r1, r9
 8001786:	4640      	mov	r0, r8
 8001788:	47d0      	blx	sl
 800178a:	3001      	adds	r0, #1
 800178c:	d09d      	beq.n	80016ca <_printf_i+0x162>
 800178e:	3501      	adds	r5, #1
 8001790:	68e3      	ldr	r3, [r4, #12]
 8001792:	9903      	ldr	r1, [sp, #12]
 8001794:	1a5b      	subs	r3, r3, r1
 8001796:	42ab      	cmp	r3, r5
 8001798:	dcf2      	bgt.n	8001780 <_printf_i+0x218>
 800179a:	e7eb      	b.n	8001774 <_printf_i+0x20c>
 800179c:	2500      	movs	r5, #0
 800179e:	f104 0619 	add.w	r6, r4, #25
 80017a2:	e7f5      	b.n	8001790 <_printf_i+0x228>
 80017a4:	08001bcc 	.word	0x08001bcc
 80017a8:	08001bdd 	.word	0x08001bdd

080017ac <__sflush_r>:
 80017ac:	898a      	ldrh	r2, [r1, #12]
 80017ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b0:	4605      	mov	r5, r0
 80017b2:	0710      	lsls	r0, r2, #28
 80017b4:	460c      	mov	r4, r1
 80017b6:	d457      	bmi.n	8001868 <__sflush_r+0xbc>
 80017b8:	684b      	ldr	r3, [r1, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dc04      	bgt.n	80017c8 <__sflush_r+0x1c>
 80017be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dc01      	bgt.n	80017c8 <__sflush_r+0x1c>
 80017c4:	2000      	movs	r0, #0
 80017c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ca:	2e00      	cmp	r6, #0
 80017cc:	d0fa      	beq.n	80017c4 <__sflush_r+0x18>
 80017ce:	2300      	movs	r3, #0
 80017d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017d4:	682f      	ldr	r7, [r5, #0]
 80017d6:	6a21      	ldr	r1, [r4, #32]
 80017d8:	602b      	str	r3, [r5, #0]
 80017da:	d032      	beq.n	8001842 <__sflush_r+0x96>
 80017dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	075a      	lsls	r2, r3, #29
 80017e2:	d505      	bpl.n	80017f0 <__sflush_r+0x44>
 80017e4:	6863      	ldr	r3, [r4, #4]
 80017e6:	1ac0      	subs	r0, r0, r3
 80017e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017ea:	b10b      	cbz	r3, 80017f0 <__sflush_r+0x44>
 80017ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ee:	1ac0      	subs	r0, r0, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	4602      	mov	r2, r0
 80017f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f6:	4628      	mov	r0, r5
 80017f8:	6a21      	ldr	r1, [r4, #32]
 80017fa:	47b0      	blx	r6
 80017fc:	1c43      	adds	r3, r0, #1
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	d106      	bne.n	8001810 <__sflush_r+0x64>
 8001802:	6829      	ldr	r1, [r5, #0]
 8001804:	291d      	cmp	r1, #29
 8001806:	d82b      	bhi.n	8001860 <__sflush_r+0xb4>
 8001808:	4a28      	ldr	r2, [pc, #160]	; (80018ac <__sflush_r+0x100>)
 800180a:	410a      	asrs	r2, r1
 800180c:	07d6      	lsls	r6, r2, #31
 800180e:	d427      	bmi.n	8001860 <__sflush_r+0xb4>
 8001810:	2200      	movs	r2, #0
 8001812:	6062      	str	r2, [r4, #4]
 8001814:	6922      	ldr	r2, [r4, #16]
 8001816:	04d9      	lsls	r1, r3, #19
 8001818:	6022      	str	r2, [r4, #0]
 800181a:	d504      	bpl.n	8001826 <__sflush_r+0x7a>
 800181c:	1c42      	adds	r2, r0, #1
 800181e:	d101      	bne.n	8001824 <__sflush_r+0x78>
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	b903      	cbnz	r3, 8001826 <__sflush_r+0x7a>
 8001824:	6560      	str	r0, [r4, #84]	; 0x54
 8001826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001828:	602f      	str	r7, [r5, #0]
 800182a:	2900      	cmp	r1, #0
 800182c:	d0ca      	beq.n	80017c4 <__sflush_r+0x18>
 800182e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001832:	4299      	cmp	r1, r3
 8001834:	d002      	beq.n	800183c <__sflush_r+0x90>
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff fbee 	bl	8001018 <_free_r>
 800183c:	2000      	movs	r0, #0
 800183e:	6360      	str	r0, [r4, #52]	; 0x34
 8001840:	e7c1      	b.n	80017c6 <__sflush_r+0x1a>
 8001842:	2301      	movs	r3, #1
 8001844:	4628      	mov	r0, r5
 8001846:	47b0      	blx	r6
 8001848:	1c41      	adds	r1, r0, #1
 800184a:	d1c8      	bne.n	80017de <__sflush_r+0x32>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0c5      	beq.n	80017de <__sflush_r+0x32>
 8001852:	2b1d      	cmp	r3, #29
 8001854:	d001      	beq.n	800185a <__sflush_r+0xae>
 8001856:	2b16      	cmp	r3, #22
 8001858:	d101      	bne.n	800185e <__sflush_r+0xb2>
 800185a:	602f      	str	r7, [r5, #0]
 800185c:	e7b2      	b.n	80017c4 <__sflush_r+0x18>
 800185e:	89a3      	ldrh	r3, [r4, #12]
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	81a3      	strh	r3, [r4, #12]
 8001866:	e7ae      	b.n	80017c6 <__sflush_r+0x1a>
 8001868:	690f      	ldr	r7, [r1, #16]
 800186a:	2f00      	cmp	r7, #0
 800186c:	d0aa      	beq.n	80017c4 <__sflush_r+0x18>
 800186e:	0793      	lsls	r3, r2, #30
 8001870:	bf18      	it	ne
 8001872:	2300      	movne	r3, #0
 8001874:	680e      	ldr	r6, [r1, #0]
 8001876:	bf08      	it	eq
 8001878:	694b      	ldreq	r3, [r1, #20]
 800187a:	1bf6      	subs	r6, r6, r7
 800187c:	600f      	str	r7, [r1, #0]
 800187e:	608b      	str	r3, [r1, #8]
 8001880:	2e00      	cmp	r6, #0
 8001882:	dd9f      	ble.n	80017c4 <__sflush_r+0x18>
 8001884:	4633      	mov	r3, r6
 8001886:	463a      	mov	r2, r7
 8001888:	4628      	mov	r0, r5
 800188a:	6a21      	ldr	r1, [r4, #32]
 800188c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001890:	47e0      	blx	ip
 8001892:	2800      	cmp	r0, #0
 8001894:	dc06      	bgt.n	80018a4 <__sflush_r+0xf8>
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	81a3      	strh	r3, [r4, #12]
 80018a2:	e790      	b.n	80017c6 <__sflush_r+0x1a>
 80018a4:	4407      	add	r7, r0
 80018a6:	1a36      	subs	r6, r6, r0
 80018a8:	e7ea      	b.n	8001880 <__sflush_r+0xd4>
 80018aa:	bf00      	nop
 80018ac:	dfbffffe 	.word	0xdfbffffe

080018b0 <_fflush_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	690b      	ldr	r3, [r1, #16]
 80018b4:	4605      	mov	r5, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	b913      	cbnz	r3, 80018c0 <_fflush_r+0x10>
 80018ba:	2500      	movs	r5, #0
 80018bc:	4628      	mov	r0, r5
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	b118      	cbz	r0, 80018ca <_fflush_r+0x1a>
 80018c2:	6a03      	ldr	r3, [r0, #32]
 80018c4:	b90b      	cbnz	r3, 80018ca <_fflush_r+0x1a>
 80018c6:	f7ff fa9f 	bl	8000e08 <__sinit>
 80018ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f3      	beq.n	80018ba <_fflush_r+0xa>
 80018d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018d4:	07d0      	lsls	r0, r2, #31
 80018d6:	d404      	bmi.n	80018e2 <_fflush_r+0x32>
 80018d8:	0599      	lsls	r1, r3, #22
 80018da:	d402      	bmi.n	80018e2 <_fflush_r+0x32>
 80018dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018de:	f7ff fb98 	bl	8001012 <__retarget_lock_acquire_recursive>
 80018e2:	4628      	mov	r0, r5
 80018e4:	4621      	mov	r1, r4
 80018e6:	f7ff ff61 	bl	80017ac <__sflush_r>
 80018ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018ec:	4605      	mov	r5, r0
 80018ee:	07da      	lsls	r2, r3, #31
 80018f0:	d4e4      	bmi.n	80018bc <_fflush_r+0xc>
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	059b      	lsls	r3, r3, #22
 80018f6:	d4e1      	bmi.n	80018bc <_fflush_r+0xc>
 80018f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018fa:	f7ff fb8b 	bl	8001014 <__retarget_lock_release_recursive>
 80018fe:	e7dd      	b.n	80018bc <_fflush_r+0xc>

08001900 <__swbuf_r>:
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	460e      	mov	r6, r1
 8001904:	4614      	mov	r4, r2
 8001906:	4605      	mov	r5, r0
 8001908:	b118      	cbz	r0, 8001912 <__swbuf_r+0x12>
 800190a:	6a03      	ldr	r3, [r0, #32]
 800190c:	b90b      	cbnz	r3, 8001912 <__swbuf_r+0x12>
 800190e:	f7ff fa7b 	bl	8000e08 <__sinit>
 8001912:	69a3      	ldr	r3, [r4, #24]
 8001914:	60a3      	str	r3, [r4, #8]
 8001916:	89a3      	ldrh	r3, [r4, #12]
 8001918:	071a      	lsls	r2, r3, #28
 800191a:	d525      	bpl.n	8001968 <__swbuf_r+0x68>
 800191c:	6923      	ldr	r3, [r4, #16]
 800191e:	b31b      	cbz	r3, 8001968 <__swbuf_r+0x68>
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	6922      	ldr	r2, [r4, #16]
 8001924:	b2f6      	uxtb	r6, r6
 8001926:	1a98      	subs	r0, r3, r2
 8001928:	6963      	ldr	r3, [r4, #20]
 800192a:	4637      	mov	r7, r6
 800192c:	4283      	cmp	r3, r0
 800192e:	dc04      	bgt.n	800193a <__swbuf_r+0x3a>
 8001930:	4621      	mov	r1, r4
 8001932:	4628      	mov	r0, r5
 8001934:	f7ff ffbc 	bl	80018b0 <_fflush_r>
 8001938:	b9e0      	cbnz	r0, 8001974 <__swbuf_r+0x74>
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60a3      	str	r3, [r4, #8]
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	6022      	str	r2, [r4, #0]
 8001946:	701e      	strb	r6, [r3, #0]
 8001948:	6962      	ldr	r2, [r4, #20]
 800194a:	1c43      	adds	r3, r0, #1
 800194c:	429a      	cmp	r2, r3
 800194e:	d004      	beq.n	800195a <__swbuf_r+0x5a>
 8001950:	89a3      	ldrh	r3, [r4, #12]
 8001952:	07db      	lsls	r3, r3, #31
 8001954:	d506      	bpl.n	8001964 <__swbuf_r+0x64>
 8001956:	2e0a      	cmp	r6, #10
 8001958:	d104      	bne.n	8001964 <__swbuf_r+0x64>
 800195a:	4621      	mov	r1, r4
 800195c:	4628      	mov	r0, r5
 800195e:	f7ff ffa7 	bl	80018b0 <_fflush_r>
 8001962:	b938      	cbnz	r0, 8001974 <__swbuf_r+0x74>
 8001964:	4638      	mov	r0, r7
 8001966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001968:	4621      	mov	r1, r4
 800196a:	4628      	mov	r0, r5
 800196c:	f000 f806 	bl	800197c <__swsetup_r>
 8001970:	2800      	cmp	r0, #0
 8001972:	d0d5      	beq.n	8001920 <__swbuf_r+0x20>
 8001974:	f04f 37ff 	mov.w	r7, #4294967295
 8001978:	e7f4      	b.n	8001964 <__swbuf_r+0x64>
	...

0800197c <__swsetup_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <__swsetup_r+0xac>)
 8001980:	4605      	mov	r5, r0
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	460c      	mov	r4, r1
 8001986:	b118      	cbz	r0, 8001990 <__swsetup_r+0x14>
 8001988:	6a03      	ldr	r3, [r0, #32]
 800198a:	b90b      	cbnz	r3, 8001990 <__swsetup_r+0x14>
 800198c:	f7ff fa3c 	bl	8000e08 <__sinit>
 8001990:	89a3      	ldrh	r3, [r4, #12]
 8001992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001996:	0718      	lsls	r0, r3, #28
 8001998:	d422      	bmi.n	80019e0 <__swsetup_r+0x64>
 800199a:	06d9      	lsls	r1, r3, #27
 800199c:	d407      	bmi.n	80019ae <__swsetup_r+0x32>
 800199e:	2309      	movs	r3, #9
 80019a0:	602b      	str	r3, [r5, #0]
 80019a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80019a6:	f04f 30ff 	mov.w	r0, #4294967295
 80019aa:	81a3      	strh	r3, [r4, #12]
 80019ac:	e034      	b.n	8001a18 <__swsetup_r+0x9c>
 80019ae:	0758      	lsls	r0, r3, #29
 80019b0:	d512      	bpl.n	80019d8 <__swsetup_r+0x5c>
 80019b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019b4:	b141      	cbz	r1, 80019c8 <__swsetup_r+0x4c>
 80019b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019ba:	4299      	cmp	r1, r3
 80019bc:	d002      	beq.n	80019c4 <__swsetup_r+0x48>
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff fb2a 	bl	8001018 <_free_r>
 80019c4:	2300      	movs	r3, #0
 80019c6:	6363      	str	r3, [r4, #52]	; 0x34
 80019c8:	89a3      	ldrh	r3, [r4, #12]
 80019ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019ce:	81a3      	strh	r3, [r4, #12]
 80019d0:	2300      	movs	r3, #0
 80019d2:	6063      	str	r3, [r4, #4]
 80019d4:	6923      	ldr	r3, [r4, #16]
 80019d6:	6023      	str	r3, [r4, #0]
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	81a3      	strh	r3, [r4, #12]
 80019e0:	6923      	ldr	r3, [r4, #16]
 80019e2:	b94b      	cbnz	r3, 80019f8 <__swsetup_r+0x7c>
 80019e4:	89a3      	ldrh	r3, [r4, #12]
 80019e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ee:	d003      	beq.n	80019f8 <__swsetup_r+0x7c>
 80019f0:	4621      	mov	r1, r4
 80019f2:	4628      	mov	r0, r5
 80019f4:	f000 f85d 	bl	8001ab2 <__smakebuf_r>
 80019f8:	89a0      	ldrh	r0, [r4, #12]
 80019fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019fe:	f010 0301 	ands.w	r3, r0, #1
 8001a02:	d00a      	beq.n	8001a1a <__swsetup_r+0x9e>
 8001a04:	2300      	movs	r3, #0
 8001a06:	60a3      	str	r3, [r4, #8]
 8001a08:	6963      	ldr	r3, [r4, #20]
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	61a3      	str	r3, [r4, #24]
 8001a0e:	6923      	ldr	r3, [r4, #16]
 8001a10:	b943      	cbnz	r3, 8001a24 <__swsetup_r+0xa8>
 8001a12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a16:	d1c4      	bne.n	80019a2 <__swsetup_r+0x26>
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
 8001a1a:	0781      	lsls	r1, r0, #30
 8001a1c:	bf58      	it	pl
 8001a1e:	6963      	ldrpl	r3, [r4, #20]
 8001a20:	60a3      	str	r3, [r4, #8]
 8001a22:	e7f4      	b.n	8001a0e <__swsetup_r+0x92>
 8001a24:	2000      	movs	r0, #0
 8001a26:	e7f7      	b.n	8001a18 <__swsetup_r+0x9c>
 8001a28:	20000064 	.word	0x20000064

08001a2c <_sbrk_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	2300      	movs	r3, #0
 8001a30:	4d05      	ldr	r5, [pc, #20]	; (8001a48 <_sbrk_r+0x1c>)
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	602b      	str	r3, [r5, #0]
 8001a38:	f7ff f8fa 	bl	8000c30 <_sbrk>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	d102      	bne.n	8001a46 <_sbrk_r+0x1a>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	b103      	cbz	r3, 8001a46 <_sbrk_r+0x1a>
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	200001d4 	.word	0x200001d4

08001a4c <memchr>:
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b510      	push	{r4, lr}
 8001a50:	b2c9      	uxtb	r1, r1
 8001a52:	4402      	add	r2, r0
 8001a54:	4293      	cmp	r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	d101      	bne.n	8001a5e <memchr+0x12>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	e003      	b.n	8001a66 <memchr+0x1a>
 8001a5e:	7804      	ldrb	r4, [r0, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	428c      	cmp	r4, r1
 8001a64:	d1f6      	bne.n	8001a54 <memchr+0x8>
 8001a66:	bd10      	pop	{r4, pc}

08001a68 <__swhatbuf_r>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a70:	4615      	mov	r5, r2
 8001a72:	2900      	cmp	r1, #0
 8001a74:	461e      	mov	r6, r3
 8001a76:	b096      	sub	sp, #88	; 0x58
 8001a78:	da0c      	bge.n	8001a94 <__swhatbuf_r+0x2c>
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a82:	bf0c      	ite	eq
 8001a84:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001a88:	2340      	movne	r3, #64	; 0x40
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	6031      	str	r1, [r6, #0]
 8001a8e:	602b      	str	r3, [r5, #0]
 8001a90:	b016      	add	sp, #88	; 0x58
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	466a      	mov	r2, sp
 8001a96:	f000 f849 	bl	8001b2c <_fstat_r>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	dbed      	blt.n	8001a7a <__swhatbuf_r+0x12>
 8001a9e:	9901      	ldr	r1, [sp, #4]
 8001aa0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001aa4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001aa8:	4259      	negs	r1, r3
 8001aaa:	4159      	adcs	r1, r3
 8001aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab0:	e7eb      	b.n	8001a8a <__swhatbuf_r+0x22>

08001ab2 <__smakebuf_r>:
 8001ab2:	898b      	ldrh	r3, [r1, #12]
 8001ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ab6:	079d      	lsls	r5, r3, #30
 8001ab8:	4606      	mov	r6, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	d507      	bpl.n	8001ace <__smakebuf_r+0x1c>
 8001abe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ac2:	6023      	str	r3, [r4, #0]
 8001ac4:	6123      	str	r3, [r4, #16]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	6163      	str	r3, [r4, #20]
 8001aca:	b002      	add	sp, #8
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
 8001ace:	466a      	mov	r2, sp
 8001ad0:	ab01      	add	r3, sp, #4
 8001ad2:	f7ff ffc9 	bl	8001a68 <__swhatbuf_r>
 8001ad6:	9900      	ldr	r1, [sp, #0]
 8001ad8:	4605      	mov	r5, r0
 8001ada:	4630      	mov	r0, r6
 8001adc:	f7ff fb04 	bl	80010e8 <_malloc_r>
 8001ae0:	b948      	cbnz	r0, 8001af6 <__smakebuf_r+0x44>
 8001ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ae6:	059a      	lsls	r2, r3, #22
 8001ae8:	d4ef      	bmi.n	8001aca <__smakebuf_r+0x18>
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	81a3      	strh	r3, [r4, #12]
 8001af4:	e7e3      	b.n	8001abe <__smakebuf_r+0xc>
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	6020      	str	r0, [r4, #0]
 8001afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afe:	81a3      	strh	r3, [r4, #12]
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	6120      	str	r0, [r4, #16]
 8001b04:	6163      	str	r3, [r4, #20]
 8001b06:	9b01      	ldr	r3, [sp, #4]
 8001b08:	b15b      	cbz	r3, 8001b22 <__smakebuf_r+0x70>
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b10:	f000 f81e 	bl	8001b50 <_isatty_r>
 8001b14:	b128      	cbz	r0, 8001b22 <__smakebuf_r+0x70>
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	81a3      	strh	r3, [r4, #12]
 8001b22:	89a3      	ldrh	r3, [r4, #12]
 8001b24:	431d      	orrs	r5, r3
 8001b26:	81a5      	strh	r5, [r4, #12]
 8001b28:	e7cf      	b.n	8001aca <__smakebuf_r+0x18>
	...

08001b2c <_fstat_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	2300      	movs	r3, #0
 8001b30:	4d06      	ldr	r5, [pc, #24]	; (8001b4c <_fstat_r+0x20>)
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	f7ff f853 	bl	8000be4 <_fstat>
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	d102      	bne.n	8001b48 <_fstat_r+0x1c>
 8001b42:	682b      	ldr	r3, [r5, #0]
 8001b44:	b103      	cbz	r3, 8001b48 <_fstat_r+0x1c>
 8001b46:	6023      	str	r3, [r4, #0]
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001d4 	.word	0x200001d4

08001b50 <_isatty_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	2300      	movs	r3, #0
 8001b54:	4d05      	ldr	r5, [pc, #20]	; (8001b6c <_isatty_r+0x1c>)
 8001b56:	4604      	mov	r4, r0
 8001b58:	4608      	mov	r0, r1
 8001b5a:	602b      	str	r3, [r5, #0]
 8001b5c:	f7ff f851 	bl	8000c02 <_isatty>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d102      	bne.n	8001b6a <_isatty_r+0x1a>
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	b103      	cbz	r3, 8001b6a <_isatty_r+0x1a>
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	200001d4 	.word	0x200001d4

08001b70 <_init>:
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	bf00      	nop
 8001b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b76:	bc08      	pop	{r3}
 8001b78:	469e      	mov	lr, r3
 8001b7a:	4770      	bx	lr

08001b7c <_fini>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	bf00      	nop
 8001b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b82:	bc08      	pop	{r3}
 8001b84:	469e      	mov	lr, r3
 8001b86:	4770      	bx	lr
