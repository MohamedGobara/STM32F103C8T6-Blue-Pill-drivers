
PandaKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000410  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000410  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010439  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006d5  00000000  00000000  0001047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000256  00000000  00000000  00010b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00010da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005a  00000000  00000000  00010e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000cbc  00000000  00000000  00010e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ca2  00000000  00000000  00011b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007b58  00000000  00000000  000127e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000130  00000000  00000000  0001a340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0001a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003ec 	.word	0x080003ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003ec 	.word	0x080003ec

08000170 <RCC_RETURNtInit>:
#include "RCC/inc/RCC_config.h"
#include "RCC/inc/RCC_private.h"



RETURN_t RCC_RETURNtInit(void) {
 8000170:	b480      	push	{r7}
 8000172:	b097      	sub	sp, #92	; 0x5c
 8000174:	af00      	add	r7, sp, #0

    RETURN_t Local_error_state = OK_ret ;
 8000176:	2301      	movs	r3, #1
 8000178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Configuring ADC prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 14, 2, ADC_PRESCALER);
 800017c:	2303      	movs	r3, #3
 800017e:	653b      	str	r3, [r7, #80]	; 0x50
 8000180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000182:	039b      	lsls	r3, r3, #14
 8000184:	43db      	mvns	r3, r3
 8000186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800018a:	039b      	lsls	r3, r3, #14
 800018c:	b29b      	uxth	r3, r3
 800018e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000190:	4b44      	ldr	r3, [pc, #272]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000192:	685a      	ldr	r2, [r3, #4]
 8000194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000196:	401a      	ands	r2, r3
 8000198:	4942      	ldr	r1, [pc, #264]	; (80002a4 <RCC_RETURNtInit+0x134>)
 800019a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800019c:	4313      	orrs	r3, r2
 800019e:	604b      	str	r3, [r1, #4]

    /* Configuring APB2 high-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 11, 3, APB2_prescaler);
 80001a0:	2307      	movs	r3, #7
 80001a2:	647b      	str	r3, [r7, #68]	; 0x44
 80001a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001a6:	02db      	lsls	r3, r3, #11
 80001a8:	43db      	mvns	r3, r3
 80001aa:	643b      	str	r3, [r7, #64]	; 0x40
 80001ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001ae:	02db      	lsls	r3, r3, #11
 80001b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80001b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80001b6:	4b3b      	ldr	r3, [pc, #236]	; (80002a4 <RCC_RETURNtInit+0x134>)
 80001b8:	685a      	ldr	r2, [r3, #4]
 80001ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80001bc:	401a      	ands	r2, r3
 80001be:	4939      	ldr	r1, [pc, #228]	; (80002a4 <RCC_RETURNtInit+0x134>)
 80001c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c2:	4313      	orrs	r3, r2
 80001c4:	604b      	str	r3, [r1, #4]

    /* Configuring APB1 low-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 8, 3, APB1_prescaler);
 80001c6:	2307      	movs	r3, #7
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80001ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80001cc:	021b      	lsls	r3, r3, #8
 80001ce:	43db      	mvns	r3, r3
 80001d0:	637b      	str	r3, [r7, #52]	; 0x34
 80001d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80001d4:	021b      	lsls	r3, r3, #8
 80001d6:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 80001da:	633b      	str	r3, [r7, #48]	; 0x30
 80001dc:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <RCC_RETURNtInit+0x134>)
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80001e2:	401a      	ands	r2, r3
 80001e4:	492f      	ldr	r1, [pc, #188]	; (80002a4 <RCC_RETURNtInit+0x134>)
 80001e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80001e8:	4313      	orrs	r3, r2
 80001ea:	604b      	str	r3, [r1, #4]

    /* Configuring AHB prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 4, 4, AHP_prescaler);
 80001ec:	230f      	movs	r3, #15
 80001ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001f2:	011b      	lsls	r3, r3, #4
 80001f4:	43db      	mvns	r3, r3
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80001f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001fa:	011b      	lsls	r3, r3, #4
 80001fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000200:	627b      	str	r3, [r7, #36]	; 0x24
 8000202:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000204:	685a      	ldr	r2, [r3, #4]
 8000206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000208:	401a      	ands	r2, r3
 800020a:	4926      	ldr	r1, [pc, #152]	; (80002a4 <RCC_RETURNtInit+0x134>)
 800020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800020e:	4313      	orrs	r3, r2
 8000210:	604b      	str	r3, [r1, #4]

    /* Configuring Microcontroller clock output */
    MOD_NUM_OF_BITS(RCC->CFGR, 24, 3, MCO_clk);
 8000212:	2307      	movs	r3, #7
 8000214:	623b      	str	r3, [r7, #32]
 8000216:	6a3b      	ldr	r3, [r7, #32]
 8000218:	061b      	lsls	r3, r3, #24
 800021a:	43db      	mvns	r3, r3
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	6a3b      	ldr	r3, [r7, #32]
 8000220:	061b      	lsls	r3, r3, #24
 8000222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000226:	61bb      	str	r3, [r7, #24]
 8000228:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <RCC_RETURNtInit+0x134>)
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	401a      	ands	r2, r3
 8000230:	491c      	ldr	r1, [pc, #112]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000232:	69bb      	ldr	r3, [r7, #24]
 8000234:	4313      	orrs	r3, r2
 8000236:	604b      	str	r3, [r1, #4]

    /* Configuring clock security system */
    MOD_NUM_OF_BITS(RCC->CR, 19, 0, Clock_security);
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	04db      	lsls	r3, r3, #19
 8000240:	43db      	mvns	r3, r3
 8000242:	613b      	str	r3, [r7, #16]
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	04db      	lsls	r3, r3, #19
 8000248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	401a      	ands	r2, r3
 8000256:	4913      	ldr	r1, [pc, #76]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4313      	orrs	r3, r2
 800025c:	600b      	str	r3, [r1, #0]

    /* Configuring main clock source */
    #if MAIN_CLK == HSI
        SET_BIT(RCC->CR, 0);
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]
        while(!READ_BIT(RCC->CR, 1));
 800026a:	bf00      	nop
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <RCC_RETURNtInit+0x134>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f003 0302 	and.w	r3, r3, #2
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <RCC_RETURNtInit+0xfc>
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 0);
 8000278:	2303      	movs	r3, #3
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	43db      	mvns	r3, r3
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000288:	685a      	ldr	r2, [r3, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	401a      	ands	r2, r3
 800028e:	4905      	ldr	r1, [pc, #20]	; (80002a4 <RCC_RETURNtInit+0x134>)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4313      	orrs	r3, r2
 8000294:	604b      	str	r3, [r1, #4]
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 2);
        /* Turning off HSI */
        CLEAR_BIT(RCC->CR, 0);
    #endif

    return Local_error_state;
 8000296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800029a:	4618      	mov	r0, r3
 800029c:	375c      	adds	r7, #92	; 0x5c
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40021000 	.word	0x40021000

080002a8 <RCC_RETURNtPeripheralEn>:

/*  functions for enabling various peripherals */


RETURN_t RCC_RETURNtPeripheralEn(uint8_t BusType, uint8_t PeripheralName) {
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	460a      	mov	r2, r1
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
    RETURN_t Local_error_state = OK_ret ;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]


	switch(BusType){
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d01c      	beq.n	80002fc <RCC_RETURNtPeripheralEn+0x54>
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	dc25      	bgt.n	8000312 <RCC_RETURNtPeripheralEn+0x6a>
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d002      	beq.n	80002d0 <RCC_RETURNtPeripheralEn+0x28>
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d00b      	beq.n	80002e6 <RCC_RETURNtPeripheralEn+0x3e>
 80002ce:	e020      	b.n	8000312 <RCC_RETURNtPeripheralEn+0x6a>

	case AHB :

		SET_BIT(RCC->AHBENR ,PeripheralName ) ;
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <RCC_RETURNtPeripheralEn+0x7c>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	2101      	movs	r1, #1
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <RCC_RETURNtPeripheralEn+0x7c>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6153      	str	r3, [r2, #20]

		break ;
 80002e4:	e018      	b.n	8000318 <RCC_RETURNtPeripheralEn+0x70>
	case APB1 :
		SET_BIT(RCC->APB1ENR ,PeripheralName ) ;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <RCC_RETURNtPeripheralEn+0x7c>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	79ba      	ldrb	r2, [r7, #6]
 80002ec:	2101      	movs	r1, #1
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	4611      	mov	r1, r2
 80002f4:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <RCC_RETURNtPeripheralEn+0x7c>)
 80002f6:	430b      	orrs	r3, r1
 80002f8:	61d3      	str	r3, [r2, #28]

		break ;
 80002fa:	e00d      	b.n	8000318 <RCC_RETURNtPeripheralEn+0x70>

	case APB2 :
		SET_BIT(RCC->APB2ENR ,PeripheralName ) ;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <RCC_RETURNtPeripheralEn+0x7c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	2101      	movs	r1, #1
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	4611      	mov	r1, r2
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <RCC_RETURNtPeripheralEn+0x7c>)
 800030c:	430b      	orrs	r3, r1
 800030e:	6193      	str	r3, [r2, #24]
		break  ;
 8000310:	e002      	b.n	8000318 <RCC_RETURNtPeripheralEn+0x70>

	default :
		Local_error_state = ERROR_ret ;
 8000312:	2300      	movs	r3, #0
 8000314:	73fb      	strb	r3, [r7, #15]
		break ;
 8000316:	bf00      	nop

	}
	return  Local_error_state  ;
 8000318:	7bfb      	ldrb	r3, [r7, #15]
}
 800031a:	4618      	mov	r0, r3
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000

08000328 <main>:
 */



int main()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0



	GPIO_PinConfig Pina2 = {
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <main+0x24>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	607b      	str	r3, [r7, #4]
			LOW_O

	} ;


	RCC_RETURNtInit() ;
 8000334:	f7ff ff1c 	bl	8000170 <RCC_RETURNtInit>

	RCC_RETURNtPeripheralEn(APB2, PORTA_APB2_peripherals) ;
 8000338:	2102      	movs	r1, #2
 800033a:	2002      	movs	r0, #2
 800033c:	f7ff ffb4 	bl	80002a8 <RCC_RETURNtPeripheralEn>
	GPIO_RETURNtPinOut(GPIO_PORTA, GPIO_Pin2, LOW_O) ;
	GPIO_RETURNtPinOut(GPIO_PORTA, GPIO_Pin2, High_O) ;

*/

	return 0;
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	08000404 	.word	0x08000404

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ffd1 	bl	8000328 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	2000001c 	.word	0x2000001c

080003a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC1_2_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	2600      	movs	r6, #0
 80003a8:	4d0c      	ldr	r5, [pc, #48]	; (80003dc <__libc_init_array+0x38>)
 80003aa:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	f000 f81a 	bl	80003ec <_init>
 80003b8:	2600      	movs	r6, #0
 80003ba:	4d0a      	ldr	r5, [pc, #40]	; (80003e4 <__libc_init_array+0x40>)
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <__libc_init_array+0x44>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000408 	.word	0x08000408
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	0800040c 	.word	0x0800040c

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
