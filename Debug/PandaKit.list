
PandaKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e60  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002010  08002010  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002010  08002010  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002010  08002010  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002014  08002014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000006c  08002084  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002084  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002717  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c36  00000000  00000000  000227ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000330  00000000  00000000  00023428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000259  00000000  00000000  00023758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000326b  00000000  00000000  000239b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003ec9  00000000  00000000  00026c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b192  00000000  00000000  0002aae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001268  00000000  00000000  00035c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00036ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001f78 	.word	0x08001f78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001f78 	.word	0x08001f78

08000170 <WriteInsterction>:

/* check mode is 4 bit or 8 bit */

#elif LCD_MODE==_4_BIT

static void WriteInsterction(uint8_t ins) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, LOW_O);
 800017a:	2200      	movs	r2, #0
 800017c:	210b      	movs	r1, #11
 800017e:	2000      	movs	r0, #0
 8000180:	f000 fb64 	bl	800084c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 7));
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	09db      	lsrs	r3, r3, #7
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	210c      	movs	r1, #12
 800018e:	2001      	movs	r0, #1
 8000190:	f000 fb5c 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 6));
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	099b      	lsrs	r3, r3, #6
 8000198:	b2db      	uxtb	r3, r3
 800019a:	f003 0301 	and.w	r3, r3, #1
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	461a      	mov	r2, r3
 80001a2:	210d      	movs	r1, #13
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 fb51 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 5));
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	095b      	lsrs	r3, r3, #5
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	f003 0301 	and.w	r3, r3, #1
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	461a      	mov	r2, r3
 80001b8:	210e      	movs	r1, #14
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 fb46 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 4));
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	091b      	lsrs	r3, r3, #4
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	f003 0301 	and.w	r3, r3, #1
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	461a      	mov	r2, r3
 80001ce:	210f      	movs	r1, #15
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 fb3b 	bl	800084c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2108      	movs	r1, #8
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 fb36 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f000 fd21 	bl	8000c28 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 fb2e 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fd19 	bl	8000c28 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 3));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	08db      	lsrs	r3, r3, #3
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	461a      	mov	r2, r3
 8000204:	210c      	movs	r1, #12
 8000206:	2001      	movs	r0, #1
 8000208:	f000 fb20 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 2));
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	089b      	lsrs	r3, r3, #2
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	b2db      	uxtb	r3, r3
 8000218:	461a      	mov	r2, r3
 800021a:	210d      	movs	r1, #13
 800021c:	2001      	movs	r0, #1
 800021e:	f000 fb15 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 1));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	085b      	lsrs	r3, r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	461a      	mov	r2, r3
 8000230:	210e      	movs	r1, #14
 8000232:	2001      	movs	r0, #1
 8000234:	f000 fb0a 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 0));
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	210f      	movs	r1, #15
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fb01 	bl	800084c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800024a:	2201      	movs	r2, #1
 800024c:	2108      	movs	r1, #8
 800024e:	2000      	movs	r0, #0
 8000250:	f000 fafc 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fce7 	bl	8000c28 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800025a:	2200      	movs	r2, #0
 800025c:	2108      	movs	r1, #8
 800025e:	2000      	movs	r0, #0
 8000260:	f000 faf4 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fcdf 	bl	8000c28 <SysTick_vDelayms>

}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <WriteData>:

static void WriteData(uint8_t data) {
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	4603      	mov	r3, r0
 800027a:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, High_O);
 800027c:	2201      	movs	r2, #1
 800027e:	210b      	movs	r1, #11
 8000280:	2000      	movs	r0, #0
 8000282:	f000 fae3 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 7));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	09db      	lsrs	r3, r3, #7
 800028a:	b2db      	uxtb	r3, r3
 800028c:	461a      	mov	r2, r3
 800028e:	210c      	movs	r1, #12
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fadb 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 6));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	099b      	lsrs	r3, r3, #6
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	210d      	movs	r1, #13
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 fad0 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 5));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	210e      	movs	r1, #14
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fac5 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 4));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	091b      	lsrs	r3, r3, #4
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	210f      	movs	r1, #15
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 faba 	bl	800084c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80002d8:	2201      	movs	r2, #1
 80002da:	2108      	movs	r1, #8
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fab5 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fca0 	bl	8000c28 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2108      	movs	r1, #8
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 faad 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fc98 	bl	8000c28 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 3));
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	08db      	lsrs	r3, r3, #3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	461a      	mov	r2, r3
 8000306:	210c      	movs	r1, #12
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fa9f 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 2));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	089b      	lsrs	r3, r3, #2
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	210d      	movs	r1, #13
 800031e:	2001      	movs	r0, #1
 8000320:	f000 fa94 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 1));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	085b      	lsrs	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	461a      	mov	r2, r3
 8000332:	210e      	movs	r1, #14
 8000334:	2001      	movs	r0, #1
 8000336:	f000 fa89 	bl	800084c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 0));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	210f      	movs	r1, #15
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fa80 	bl	800084c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800034c:	2201      	movs	r2, #1
 800034e:	2108      	movs	r1, #8
 8000350:	2000      	movs	r0, #0
 8000352:	f000 fa7b 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 fc66 	bl	8000c28 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fa73 	bl	800084c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fc5e 	bl	8000c28 <SysTick_vDelayms>

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <LCD_Init>:

void LCD_Init(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	SysTick_vDelayms(50);
 8000378:	2032      	movs	r0, #50	; 0x32
 800037a:	f000 fc55 	bl	8000c28 <SysTick_vDelayms>
	WriteInsterction(0x02);
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff fef6 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x28); //screen on 4 bit mode  with 2 line 5*7
 8000384:	2028      	movs	r0, #40	; 0x28
 8000386:	f7ff fef3 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x0c); //cursor off 0x0e ,0x0f
 800038a:	200c      	movs	r0, #12
 800038c:	f7ff fef0 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x01); //clear screen
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff feed 	bl	8000170 <WriteInsterction>
	SysTick_vDelayms(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fc46 	bl	8000c28 <SysTick_vDelayms>
	WriteInsterction(0x06); //increase DDRAM address no shift
 800039c:	2006      	movs	r0, #6
 800039e:	f7ff fee7 	bl	8000170 <WriteInsterction>

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <LCD_WriteChar>:

#endif

void LCD_WriteChar(uint8_t ch) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	4603      	mov	r3, r0
 80003ae:	71fb      	strb	r3, [r7, #7]

	WriteData(ch);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff5d 	bl	8000272 <WriteData>

}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <LCD_Clear>:

void LCD_Clear(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

	WriteInsterction(0x01);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff fed3 	bl	8000170 <WriteInsterction>

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <LCD_WriteNumber>:

void LCD_WriteNumber(int32_t num) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

	uint8_t i = 0, str[16], negative_flag = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	77fb      	strb	r3, [r7, #31]
 80003dc:	2300      	movs	r3, #0
 80003de:	77bb      	strb	r3, [r7, #30]

	int8_t j;

	//zero
	if (num == 0) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d102      	bne.n	80003ec <LCD_WriteNumber+0x1c>

		LCD_WriteChar('0');
 80003e6:	2030      	movs	r0, #48	; 0x30
 80003e8:	f7ff ffdd 	bl	80003a6 <LCD_WriteChar>

	}

	if (num < 0) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	da24      	bge.n	800043c <LCD_WriteNumber+0x6c>
		negative_flag = 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	77bb      	strb	r3, [r7, #30]
		num = num * -1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	425b      	negs	r3, r3
 80003fa:	607b      	str	r3, [r7, #4]
	}

	//positive number
	while (num) {
 80003fc:	e01e      	b.n	800043c <LCD_WriteNumber+0x6c>
		str[i] = (num % 10) + '0';
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <LCD_WriteNumber+0xb8>)
 8000402:	fb83 1302 	smull	r1, r3, r3, r2
 8000406:	1099      	asrs	r1, r3, #2
 8000408:	17d3      	asrs	r3, r2, #31
 800040a:	1ac9      	subs	r1, r1, r3
 800040c:	460b      	mov	r3, r1
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	440b      	add	r3, r1
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	1ad1      	subs	r1, r2, r3
 8000416:	b2ca      	uxtb	r2, r1
 8000418:	7ffb      	ldrb	r3, [r7, #31]
 800041a:	3230      	adds	r2, #48	; 0x30
 800041c:	b2d2      	uxtb	r2, r2
 800041e:	3320      	adds	r3, #32
 8000420:	443b      	add	r3, r7
 8000422:	f803 2c14 	strb.w	r2, [r3, #-20]
		num = num / 10;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <LCD_WriteNumber+0xb8>)
 800042a:	fb82 1203 	smull	r1, r2, r2, r3
 800042e:	1092      	asrs	r2, r2, #2
 8000430:	17db      	asrs	r3, r3, #31
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	607b      	str	r3, [r7, #4]
		i++;
 8000436:	7ffb      	ldrb	r3, [r7, #31]
 8000438:	3301      	adds	r3, #1
 800043a:	77fb      	strb	r3, [r7, #31]
	while (num) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1dd      	bne.n	80003fe <LCD_WriteNumber+0x2e>
	}

	if (negative_flag == 1) {
 8000442:	7fbb      	ldrb	r3, [r7, #30]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d102      	bne.n	800044e <LCD_WriteNumber+0x7e>
		LCD_WriteChar('-');
 8000448:	202d      	movs	r0, #45	; 0x2d
 800044a:	f7ff ffac 	bl	80003a6 <LCD_WriteChar>
	}
	for (j = i; j > 0; j--) {
 800044e:	7ffb      	ldrb	r3, [r7, #31]
 8000450:	777b      	strb	r3, [r7, #29]
 8000452:	e00f      	b.n	8000474 <LCD_WriteNumber+0xa4>

		LCD_WriteChar(str[j - 1]);
 8000454:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000458:	3b01      	subs	r3, #1
 800045a:	3320      	adds	r3, #32
 800045c:	443b      	add	r3, r7
 800045e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff9f 	bl	80003a6 <LCD_WriteChar>
	for (j = i; j > 0; j--) {
 8000468:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	3b01      	subs	r3, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	777b      	strb	r3, [r7, #29]
 8000474:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000478:	2b00      	cmp	r3, #0
 800047a:	dceb      	bgt.n	8000454 <LCD_WriteNumber+0x84>

	}

}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	66666667 	.word	0x66666667

0800048c <LCD_WriteString>:

void LCD_WriteString(uint8_t *str) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

	uint8_t *ptr = str;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60fb      	str	r3, [r7, #12]

	while (*ptr) {
 8000498:	e007      	b.n	80004aa <LCD_WriteString+0x1e>

		LCD_WriteChar(*ptr);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff81 	bl	80003a6 <LCD_WriteChar>
		ptr++;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3301      	adds	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
	while (*ptr) {
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f3      	bne.n	800049a <LCD_WriteString+0xe>

	}

}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <LCD_GoTo>:

	WriteInsterction(0x02);

}

void LCD_GoTo(uint8_t line, uint8_t cell) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	460a      	mov	r2, r1
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	4613      	mov	r3, r2
 80004ca:	71bb      	strb	r3, [r7, #6]

	if (line == 0) {
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d106      	bne.n	80004e0 <LCD_GoTo+0x24>

		WriteInsterction(0x80 + cell);
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	3b80      	subs	r3, #128	; 0x80
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe49 	bl	8000170 <WriteInsterction>

		WriteInsterction((0x80 + 0x40) + cell);

	}

}
 80004de:	e008      	b.n	80004f2 <LCD_GoTo+0x36>
	} else if (line == 1) {
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d105      	bne.n	80004f2 <LCD_GoTo+0x36>
		WriteInsterction((0x80 + 0x40) + cell);
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	3b40      	subs	r3, #64	; 0x40
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fe3f 	bl	8000170 <WriteInsterction>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <EXTI_RETURNtSetInterruptStatus>:
/*********************  Global Variable Definition ****************************/


/*********************  APIs Definition ***************************************/

RETURN_t EXTI_RETURNtSetInterruptStatus(EXTI_Numbers Copy_u8EXTINumber, uint8_t Copy_u8EXTIStatus){
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	460a      	mov	r2, r1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	4613      	mov	r3, r2
 800050a:	71bb      	strb	r3, [r7, #6]

	RETURN_t local_returnState = OK_ret ;
 800050c:	2301      	movs	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8EXTINumber<EXTI_LINE0 || Copy_u8EXTINumber>EXTI_LINE19)
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	2b13      	cmp	r3, #19
 8000514:	d902      	bls.n	800051c <EXTI_RETURNtSetInterruptStatus+0x20>
	{
		local_returnState =  ERROR_ret ;
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e01b      	b.n	8000554 <EXTI_RETURNtSetInterruptStatus+0x58>

	}
	else
	{

		if (Copy_u8EXTIStatus== EXTIMasked )
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10b      	bne.n	800053a <EXTI_RETURNtSetInterruptStatus+0x3e>
		{

			CLEAR_BIT(EXTI->IMR,Copy_u8EXTINumber);
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <EXTI_RETURNtSetInterruptStatus+0x64>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	2101      	movs	r1, #1
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <EXTI_RETURNtSetInterruptStatus+0x64>)
 8000534:	400b      	ands	r3, r1
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	e00c      	b.n	8000554 <EXTI_RETURNtSetInterruptStatus+0x58>
		}
		else if (Copy_u8EXTIStatus== EXTINonMasked)
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d109      	bne.n	8000554 <EXTI_RETURNtSetInterruptStatus+0x58>
		{
			 SET_BIT(EXTI->IMR,Copy_u8EXTINumber);
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <EXTI_RETURNtSetInterruptStatus+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	79fa      	ldrb	r2, [r7, #7]
 8000546:	2101      	movs	r1, #1
 8000548:	fa01 f202 	lsl.w	r2, r1, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI_RETURNtSetInterruptStatus+0x64>)
 8000550:	430b      	orrs	r3, r1
 8000552:	6013      	str	r3, [r2, #0]
		}
	}
	return local_returnState ;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40010400 	.word	0x40010400

08000564 <EXTI_RETURNtSetInterruptEdge>:

}



RETURN_t EXTI_RETURNtSetInterruptEdge(EXTI_Numbers Copy_u8EXTINumber, uint8_t Copy_u8EXTIEdge){
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]
	RETURN_t local_returnState = OK_ret ;
 8000574:	2301      	movs	r3, #1
 8000576:	73fb      	strb	r3, [r7, #15]

	if (Copy_u8EXTINumber<EXTI_LINE0 || Copy_u8EXTINumber>EXTI_LINE19)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b13      	cmp	r3, #19
 800057c:	d902      	bls.n	8000584 <EXTI_RETURNtSetInterruptEdge+0x20>
	{
		local_returnState =  ERROR_ret ;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	e048      	b.n	8000616 <EXTI_RETURNtSetInterruptEdge+0xb2>
	}
	else {
			if (Copy_u8EXTIEdge== RISING_EDGE )
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d115      	bne.n	80005b6 <EXTI_RETURNtSetInterruptEdge+0x52>
			{
				 SET_BIT(EXTI->RSTR,Copy_u8EXTINumber);
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	2101      	movs	r1, #1
 8000592:	fa01 f202 	lsl.w	r2, r1, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6093      	str	r3, [r2, #8]
				 CLEAR_BIT(EXTI->FTSR,Copy_u8EXTINumber);
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	79fa      	ldrb	r2, [r7, #7]
 80005a4:	2101      	movs	r1, #1
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005b0:	400b      	ands	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
 80005b4:	e02f      	b.n	8000616 <EXTI_RETURNtSetInterruptEdge+0xb2>
			}
			else if (Copy_u8EXTIEdge== FALLING_EDGE )
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d115      	bne.n	80005e8 <EXTI_RETURNtSetInterruptEdge+0x84>
			{

				CLEAR_BIT(EXTI->RSTR,Copy_u8EXTINumber);
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6093      	str	r3, [r2, #8]
				SET_BIT(EXTI->FTSR,Copy_u8EXTINumber);
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	2101      	movs	r1, #1
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]
 80005e6:	e016      	b.n	8000616 <EXTI_RETURNtSetInterruptEdge+0xb2>
			}
			else if (Copy_u8EXTIEdge== ON_CHANGE)
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d113      	bne.n	8000616 <EXTI_RETURNtSetInterruptEdge+0xb2>
			{
				SET_BIT(EXTI->FTSR,Copy_u8EXTINumber);
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a09      	ldr	r2, [pc, #36]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
				SET_BIT(EXTI->RSTR,Copy_u8EXTINumber);
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	79fa      	ldrb	r2, [r7, #7]
 8000608:	2101      	movs	r1, #1
 800060a:	fa01 f202 	lsl.w	r2, r1, r2
 800060e:	4611      	mov	r1, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI_RETURNtSetInterruptEdge+0xc0>)
 8000612:	430b      	orrs	r3, r1
 8000614:	6093      	str	r3, [r2, #8]
			}
	     }

	return local_returnState ;
 8000616:	7bfb      	ldrb	r3, [r7, #15]

}
 8000618:	4618      	mov	r0, r3
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400

08000628 <EXTI_vClearPendingFlag>:

}


void EXTI_vClearPendingFlag (EXTI_Numbers Copy_u8EXTINumber)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]


	if (Copy_u8EXTINumber<EXTI_LINE0 || Copy_u8EXTINumber>EXTI_LINE19)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b13      	cmp	r3, #19
 8000636:	d809      	bhi.n	800064c <EXTI_vClearPendingFlag+0x24>
	{

	}
	else
	{
		SET_BIT(EXTI->PR,Copy_u8EXTINumber);
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <EXTI_vClearPendingFlag+0x30>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <EXTI_vClearPendingFlag+0x30>)
 8000648:	430b      	orrs	r3, r1
 800064a:	6153      	str	r3, [r2, #20]
	}

}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40010400 	.word	0x40010400

0800065c <EXTI_RETURNtSetCalbackFunction>:




RETURN_t EXTI_RETURNtSetCalbackFunction(EXTI_Numbers Copy_u8EXTINumber,void(*Ptrfunction)(void))
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
	RETURN_t local_returnState = OK_ret ;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]

     if (Copy_u8EXTINumber<EXTI_LINE0 || Copy_u8EXTINumber>EXTI_LINE19)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b13      	cmp	r3, #19
 8000670:	d902      	bls.n	8000678 <EXTI_RETURNtSetCalbackFunction+0x1c>
	{
 		local_returnState =  ERROR_ret ;
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e004      	b.n	8000682 <EXTI_RETURNtSetCalbackFunction+0x26>
	}
	else
	{
		PtrfuncArray[Copy_u8EXTINumber]=Ptrfunction;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4905      	ldr	r1, [pc, #20]	; (8000690 <EXTI_RETURNtSetCalbackFunction+0x34>)
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

		return local_returnState ;
 8000682:	7bfb      	ldrb	r3, [r7, #15]



}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000088 	.word	0x20000088

08000694 <EXTI0_IRQHandler>:

/**********************ISR EXTI*************************************************/


void EXTI0_IRQHandler (void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE0);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ffc5 	bl	8000628 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE0]!=NULL_FPTR)
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <EXTI0_IRQHandler+0x1c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <EXTI0_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE0]();
 80006a6:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <EXTI0_IRQHandler+0x1c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4798      	blx	r3
	}

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000088 	.word	0x20000088

080006b4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ffb5 	bl	8000628 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE1]!=NULL_FPTR)
 80006be:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <EXTI1_IRQHandler+0x1c>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d002      	beq.n	80006cc <EXTI1_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE1]();
 80006c6:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <EXTI1_IRQHandler+0x1c>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4798      	blx	r3
	}


}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000088 	.word	0x20000088

080006d4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE2);
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff ffa5 	bl	8000628 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE2]!=NULL_FPTR)
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <EXTI2_IRQHandler+0x1c>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <EXTI2_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE2]();
 80006e6:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <EXTI2_IRQHandler+0x1c>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	4798      	blx	r3
	}

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000088 	.word	0x20000088

080006f4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

	EXTI_vClearPendingFlag(EXTI_LINE3);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f7ff ff95 	bl	8000628 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE3]!=NULL_FPTR)
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <EXTI3_IRQHandler+0x1c>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <EXTI3_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE3]();
 8000706:	4b02      	ldr	r3, [pc, #8]	; (8000710 <EXTI3_IRQHandler+0x1c>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4798      	blx	r3
	}

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000088 	.word	0x20000088

08000714 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	EXTI_vClearPendingFlag(EXTI_LINE4);
 8000718:	2004      	movs	r0, #4
 800071a:	f7ff ff85 	bl	8000628 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE4]!=NULL_FPTR)
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <EXTI4_IRQHandler+0x1c>)
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <EXTI4_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE4]();
 8000726:	4b02      	ldr	r3, [pc, #8]	; (8000730 <EXTI4_IRQHandler+0x1c>)
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	4798      	blx	r3
	}

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000088 	.word	0x20000088

08000734 <GPIO_RETURNtPinInit>:
#include "GPIO/inc/GPIO_interface.h"


static GPIO_r *GPIO_ArraysOfPtr[Number_OfPorts] = { GPIOA, GPIOB, GPIOC };

RETURN_t GPIO_RETURNtPinInit(GPIO_PinConfig *Localptr_PinConfig) {
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

	RETURN_t LocalRetState = OK_ret;
 800073c:	2301      	movs	r3, #1
 800073e:	77fb      	strb	r3, [r7, #31]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
			&& Localptr_PinConfig->Port_Name <= GPIO_PORTC)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
 8000744:	2b02      	cmp	r3, #2
 8000746:	d903      	bls.n	8000750 <GPIO_RETURNtPinInit+0x1c>
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	785b      	ldrb	r3, [r3, #1]
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d173      	bne.n	8000838 <GPIO_RETURNtPinInit+0x104>

		GPIO_r *LocalGPIO_Ptr = GPIO_ArraysOfPtr[Localptr_PinConfig->Port_Name];
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <GPIO_RETURNtPinInit+0x114>)
 8000758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800075c:	61bb      	str	r3, [r7, #24]
		/* configure mode */
		MOD_NUM_OF_BITS(LocalGPIO_Ptr->CR[(Localptr_PinConfig->PIN_Name) / 8],
 800075e:	230f      	movs	r3, #15
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	461a      	mov	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	401a      	ands	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	785b      	ldrb	r3, [r3, #1]
 8000794:	08db      	lsrs	r3, r3, #3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	401a      	ands	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				((Localptr_PinConfig->PIN_Name) % 8) * 4, 4,
				Localptr_PinConfig->PIN_MODE);



if( Localptr_PinConfig->PIN_MODE == GPIO_PinModeInput_PU)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	2b18      	cmp	r3, #24
 80007be:	d10a      	bne.n	80007d6 <GPIO_RETURNtPinInit+0xa2>
{
	SET_BIT(LocalGPIO_Ptr->ODR ,Localptr_PinConfig->PIN_Name );
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	7852      	ldrb	r2, [r2, #1]
 80007c8:	4611      	mov	r1, r2
 80007ca:	2201      	movs	r2, #1
 80007cc:	408a      	lsls	r2, r1
 80007ce:	431a      	orrs	r2, r3
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	e00e      	b.n	80007f4 <GPIO_RETURNtPinInit+0xc0>


}


else if( Localptr_PinConfig->PIN_MODE == GPIO_PinModeInput_PD )
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d10a      	bne.n	80007f4 <GPIO_RETURNtPinInit+0xc0>
{
	CLEAR_BIT(LocalGPIO_Ptr->ODR ,Localptr_PinConfig->PIN_Name );
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	7852      	ldrb	r2, [r2, #1]
 80007e6:	4611      	mov	r1, r2
 80007e8:	2201      	movs	r2, #1
 80007ea:	408a      	lsls	r2, r1
 80007ec:	43d2      	mvns	r2, r2
 80007ee:	401a      	ands	r2, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	60da      	str	r2, [r3, #12]

}

		/* configure set and reset */
		if (Localptr_PinConfig->PIN_MODE == High_O) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	789b      	ldrb	r3, [r3, #2]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10a      	bne.n	8000812 <GPIO_RETURNtPinInit+0xde>

			SET_BIT(LocalGPIO_Ptr->BSRR , Localptr_PinConfig->PIN_Name);
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7852      	ldrb	r2, [r2, #1]
 8000804:	4611      	mov	r1, r2
 8000806:	2201      	movs	r2, #1
 8000808:	408a      	lsls	r2, r1
 800080a:	431a      	orrs	r2, r3
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000810:	e014      	b.n	800083c <GPIO_RETURNtPinInit+0x108>

		} else if (Localptr_PinConfig->PIN_MODE == LOW_O) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	789b      	ldrb	r3, [r3, #2]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10b      	bne.n	8000832 <GPIO_RETURNtPinInit+0xfe>

			SET_BIT(LocalGPIO_Ptr->BSRR , ((Localptr_PinConfig->PIN_Name)+GPIO_PortsOutOfRange) );
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	7852      	ldrb	r2, [r2, #1]
 8000822:	3203      	adds	r2, #3
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	431a      	orrs	r2, r3
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000830:	e004      	b.n	800083c <GPIO_RETURNtPinInit+0x108>

		} else {
			LocalRetState = ERROR_ret;
 8000832:	2300      	movs	r3, #0
 8000834:	77fb      	strb	r3, [r7, #31]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000836:	e001      	b.n	800083c <GPIO_RETURNtPinInit+0x108>
		}

	} else {

		LocalRetState = ERROR_ret;
 8000838:	2300      	movs	r3, #0
 800083a:	77fb      	strb	r3, [r7, #31]
	}

	return LocalRetState;
 800083c:	7ffb      	ldrb	r3, [r7, #31]

}
 800083e:	4618      	mov	r0, r3
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000000 	.word	0x20000000

0800084c <GPIO_RETURNtPinOut>:
 * @param  Local_PortName: The GPIO port to which the pin belongs.
 * @param  Local_PinName: The specific pin in the port.
 * @param  Local_OutVal: The output value to be set (High_O or LOW_O).
 * @retval RETURN_t: Indicates the success or failure of the operation.
 */
RETURN_t GPIO_RETURNtPinOut(GPIO_Ports Local_PortName, GPIO_Pins Local_PinName,GPIO_PinStateOut Local_OutVal) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	460b      	mov	r3, r1
 8000858:	71bb      	strb	r3, [r7, #6]
 800085a:	4613      	mov	r3, r2
 800085c:	717b      	strb	r3, [r7, #5]

	RETURN_t local_RETURN_t = OK_ret;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
	if (Local_PortName >= GPIO_PortsOutOfRange|| Local_PinName >= GPIO_PinsOutOfRange) {
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d802      	bhi.n	800086e <GPIO_RETURNtPinOut+0x22>
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b0f      	cmp	r3, #15
 800086c:	d902      	bls.n	8000874 <GPIO_RETURNtPinOut+0x28>

		local_RETURN_t = ERROR_ret;
 800086e:	2300      	movs	r3, #0
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e02a      	b.n	80008ca <GPIO_RETURNtPinOut+0x7e>

	} else {

		if (Local_OutVal == High_O) {
 8000874:	797b      	ldrb	r3, [r7, #5]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d110      	bne.n	800089c <GPIO_RETURNtPinOut+0x50>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,Local_PinName) ;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <GPIO_RETURNtPinOut+0x8c>)
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4618      	mov	r0, r3
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4911      	ldr	r1, [pc, #68]	; (80008d8 <GPIO_RETURNtPinOut+0x8c>)
 8000892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000896:	4302      	orrs	r2, r0
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	e016      	b.n	80008ca <GPIO_RETURNtPinOut+0x7e>

		}

		else if (Local_OutVal == LOW_O) {
 800089c:	797b      	ldrb	r3, [r7, #5]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d111      	bne.n	80008c6 <GPIO_RETURNtPinOut+0x7a>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,(Local_PinName+GPIO_PinsOutOfRange) ) ;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <GPIO_RETURNtPinOut+0x8c>)
 80008a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	3310      	adds	r3, #16
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4907      	ldr	r1, [pc, #28]	; (80008d8 <GPIO_RETURNtPinOut+0x8c>)
 80008bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c0:	4302      	orrs	r2, r0
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	e001      	b.n	80008ca <GPIO_RETURNtPinOut+0x7e>

		} else {

			local_RETURN_t = ERROR_ret;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]

		}

	}

	return local_RETURN_t;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000

080008dc <NVIC_SetPriorityConfig>:


static uint8_t StaticGlobal_u8PriorityConfig ;


void NVIC_SetPriorityConfig(uint8_t Copy_u8Priority) {
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]

	 StaticGlobal_u8PriorityConfig=Copy_u8Priority;
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <NVIC_SetPriorityConfig+0x3c>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	7013      	strb	r3, [r2, #0]
	 uint32_t LocalTempRegValue=(VECT_KEY<<16)|(Copy_u8Priority<<8)|(SCB_AIRCR&0b111) ;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <NVIC_SetPriorityConfig+0x40>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	4313      	orrs	r3, r2
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60fb      	str	r3, [r7, #12]
	 SCB_AIRCR =LocalTempRegValue ;
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <NVIC_SetPriorityConfig+0x40>)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6013      	str	r3, [r2, #0]

}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	200000d8 	.word	0x200000d8
 800091c:	e000ed0c 	.word	0xe000ed0c

08000920 <NVIC_voidSetInterruptPriority>:
 * Copy_u8GroupId    :the desired Group Id of interrupt note:if PriorityConfig= NVIC_GROUB0BITS_SUB4BITS then enter 0
 * Copy_u8SubGroupId :the desired SubGroup Id of interrupt note:if PriorityConfig= NVIC_GROUB4BITS_SUB0BITS then enter 0
 *
 */
void NVIC_voidSetInterruptPriority(NVIC_EXTPreprheial Copyu8InterruptNumber,
		uint8_t Copy_u8GroupId, uint8_t Copy_u8SubGroupId) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	460b      	mov	r3, r1
 800092c:	71bb      	strb	r3, [r7, #6]
 800092e:	4613      	mov	r3, r2
 8000930:	717b      	strb	r3, [r7, #5]



	switch (StaticGlobal_u8PriorityConfig) {
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <NVIC_voidSetInterruptPriority+0xe4>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3b03      	subs	r3, #3
 8000938:	2b04      	cmp	r3, #4
 800093a:	d85c      	bhi.n	80009f6 <NVIC_voidSetInterruptPriority+0xd6>
 800093c:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <NVIC_voidSetInterruptPriority+0x24>)
 800093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000942:	bf00      	nop
 8000944:	08000959 	.word	0x08000959
 8000948:	0800096b 	.word	0x0800096b
 800094c:	08000991 	.word	0x08000991
 8000950:	080009b7 	.word	0x080009b7
 8000954:	080009e3 	.word	0x080009e3
		case NVIC_16GROUB_0SUB:
			NVIC->IPR[Copyu8InterruptNumber]=(Copy_u8GroupId<<4);
 8000958:	492b      	ldr	r1, [pc, #172]	; (8000a08 <NVIC_voidSetInterruptPriority+0xe8>)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	79ba      	ldrb	r2, [r7, #6]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000968:	e046      	b.n	80009f8 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_8GROUB_2SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b111)<<5)|((Copy_u8SubGroupId & 0b1)<<4);
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	015b      	lsls	r3, r3, #5
 800096e:	b25a      	sxtb	r2, r3
 8000970:	797b      	ldrb	r3, [r7, #5]
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	b25b      	sxtb	r3, r3
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	b25b      	sxtb	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	b259      	sxtb	r1, r3
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <NVIC_voidSetInterruptPriority+0xe8>)
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	b2c9      	uxtb	r1, r1
 8000986:	4413      	add	r3, r2
 8000988:	460a      	mov	r2, r1
 800098a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 800098e:	e033      	b.n	80009f8 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_4GROUB_4SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<6)|((Copy_u8SubGroupId & 0b11)<<4);
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	019b      	lsls	r3, r3, #6
 8000994:	b25a      	sxtb	r2, r3
 8000996:	797b      	ldrb	r3, [r7, #5]
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b259      	sxtb	r1, r3
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <NVIC_voidSetInterruptPriority+0xe8>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	b2c9      	uxtb	r1, r1
 80009ac:	4413      	add	r3, r2
 80009ae:	460a      	mov	r2, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 80009b4:	e020      	b.n	80009f8 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_2GROUB_8SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<7)|((Copy_u8SubGroupId & 0b111)<<4);
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	01db      	lsls	r3, r3, #7
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009c0:	b25a      	sxtb	r2, r3
 80009c2:	797b      	ldrb	r3, [r7, #5]
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b259      	sxtb	r1, r3
 80009d2:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <NVIC_voidSetInterruptPriority+0xe8>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	b2c9      	uxtb	r1, r1
 80009d8:	4413      	add	r3, r2
 80009da:	460a      	mov	r2, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 80009e0:	e00a      	b.n	80009f8 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_0GROUB_16SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8SubGroupId & 0b1111)<<4);
 80009e2:	797b      	ldrb	r3, [r7, #5]
 80009e4:	0119      	lsls	r1, r3, #4
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <NVIC_voidSetInterruptPriority+0xe8>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	b2c9      	uxtb	r1, r1
 80009ec:	4413      	add	r3, r2
 80009ee:	460a      	mov	r2, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 80009f4:	e000      	b.n	80009f8 <NVIC_voidSetInterruptPriority+0xd8>
		default:
			break;
 80009f6:	bf00      	nop
	}



}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000d8 	.word	0x200000d8
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <NVIC_vEnableInterrupt>:
/**
 * @brief Enables the specified interrupt in the NVIC (Nested Vector Interrupt Controller).
 * @param Copy_u8InterruptNum: The interrupt number to be enabled.
 * @return None
 */
void NVIC_vEnableInterrupt(NVIC_EXTPreprheial Copy_u8InterruptNum){
 8000a0c:	b490      	push	{r4, r7}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]


	SET_BIT(NVIC->ISER[Copy_u8InterruptNum/32],Copy_u8InterruptNum%32);
 8000a16:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <NVIC_vEnableInterrupt+0x3c>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	f002 021f 	and.w	r2, r2, #31
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a30:	4614      	mov	r4, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <NVIC_vEnableInterrupt+0x3c>)
 8000a34:	4601      	mov	r1, r0
 8000a36:	4323      	orrs	r3, r4
 8000a38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc90      	pop	{r4, r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <RCC_RETURNtInit>:
#include "RCC/inc/RCC_interface.h"




RETURN_t RCC_RETURNtInit(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b097      	sub	sp, #92	; 0x5c
 8000a50:	af00      	add	r7, sp, #0

    RETURN_t Local_error_state = OK_ret ;
 8000a52:	2301      	movs	r3, #1
 8000a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Configuring ADC prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 14, 2, ADC_PRESCALER);
 8000a58:	2303      	movs	r3, #3
 8000a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8000a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5e:	039b      	lsls	r3, r3, #14
 8000a60:	43db      	mvns	r3, r3
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a66:	039b      	lsls	r3, r3, #14
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a6c:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a72:	401a      	ands	r2, r3
 8000a74:	4941      	ldr	r1, [pc, #260]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]

    /* Configuring APB2 high-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 11, 3, APB2_prescaler);
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8000a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a82:	02db      	lsls	r3, r3, #11
 8000a84:	43db      	mvns	r3, r3
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
 8000a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a8a:	02db      	lsls	r3, r3, #11
 8000a8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a92:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4938      	ldr	r1, [pc, #224]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	604b      	str	r3, [r1, #4]

    /* Configuring APB1 low-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 8, 3, APB1_prescaler);
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
 8000aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abe:	401a      	ands	r2, r3
 8000ac0:	492e      	ldr	r1, [pc, #184]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]

    /* Configuring AHB prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 4, 4, AHP_prescaler);
 8000ac8:	230f      	movs	r3, #15
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	401a      	ands	r2, r3
 8000ae0:	4926      	ldr	r1, [pc, #152]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]

    /* Configuring Microcontroller clock output */
    MOD_NUM_OF_BITS(RCC->CFGR, 24, 3, MCO_clk);
 8000ae8:	2307      	movs	r3, #7
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	061b      	lsls	r3, r3, #24
 8000af0:	43db      	mvns	r3, r3
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	061b      	lsls	r3, r3, #24
 8000af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	401a      	ands	r2, r3
 8000b06:	491d      	ldr	r1, [pc, #116]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	604b      	str	r3, [r1, #4]

    /* Configuring clock security system */
    MOD_NUM_OF_BITS(RCC->CR, 19, 0, Clock_security);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	04db      	lsls	r3, r3, #19
 8000b16:	43db      	mvns	r3, r3
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	04db      	lsls	r3, r3, #19
 8000b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4913      	ldr	r1, [pc, #76]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]

    /* Configuring main clock source */
    #if MAIN_CLK == HSI
        SET_BIT(RCC->CR, 0);
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]
        while(!READ_BIT(RCC->CR, 1));
 8000b40:	bf00      	nop
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f9      	beq.n	8000b42 <RCC_RETURNtInit+0xf6>
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 0);
 8000b4e:	2303      	movs	r3, #3
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	401a      	ands	r2, r3
 8000b64:	4905      	ldr	r1, [pc, #20]	; (8000b7c <RCC_RETURNtInit+0x130>)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 2);
        /* Turning off HSI */
        CLEAR_BIT(RCC->CR, 0);
    #endif

    return Local_error_state;
 8000b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	375c      	adds	r7, #92	; 0x5c
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <RCC_RETURNtPeripheralEn>:

/*  functions for enabling various peripherals */


RETURN_t RCC_RETURNtPeripheralEn(uint8_t BusType, uint8_t PeripheralName) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
    RETURN_t Local_error_state = OK_ret ;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]


	switch(BusType){
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d01c      	beq.n	8000bd4 <RCC_RETURNtPeripheralEn+0x54>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	dc25      	bgt.n	8000bea <RCC_RETURNtPeripheralEn+0x6a>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <RCC_RETURNtPeripheralEn+0x28>
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d00b      	beq.n	8000bbe <RCC_RETURNtPeripheralEn+0x3e>
 8000ba6:	e020      	b.n	8000bea <RCC_RETURNtPeripheralEn+0x6a>

	case AHB :

		SET_BIT(RCC->AHBENR ,PeripheralName ) ;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <RCC_RETURNtPeripheralEn+0x7c>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <RCC_RETURNtPeripheralEn+0x7c>)
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	6153      	str	r3, [r2, #20]

		break ;
 8000bbc:	e018      	b.n	8000bf0 <RCC_RETURNtPeripheralEn+0x70>
	case APB1 :
		SET_BIT(RCC->APB1ENR ,PeripheralName ) ;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <RCC_RETURNtPeripheralEn+0x7c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	79ba      	ldrb	r2, [r7, #6]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <RCC_RETURNtPeripheralEn+0x7c>)
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	61d3      	str	r3, [r2, #28]

		break ;
 8000bd2:	e00d      	b.n	8000bf0 <RCC_RETURNtPeripheralEn+0x70>

	case APB2 :
		SET_BIT(RCC->APB2ENR ,PeripheralName ) ;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <RCC_RETURNtPeripheralEn+0x7c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	79ba      	ldrb	r2, [r7, #6]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <RCC_RETURNtPeripheralEn+0x7c>)
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6193      	str	r3, [r2, #24]
		break  ;
 8000be8:	e002      	b.n	8000bf0 <RCC_RETURNtPeripheralEn+0x70>

	default :
		Local_error_state = ERROR_ret ;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
		break ;
 8000bee:	bf00      	nop

	}
	return  Local_error_state  ;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000

08000c00 <SysTick_vInit>:
 */


#include "SysTick/inc/SysTick_interface.h"

void SysTick_vInit(void) {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

	/* disable SysTick exception */
	CLEAR_BIT(SysTick->CTRL, 1);
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <SysTick_vInit+0x24>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <SysTick_vInit+0x24>)
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	6013      	str	r3, [r2, #0]
#if SysTick_ClkSource==SysTick_AHB_8
	CLEAR_BIT(SysTick->CTRL, 2);
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_vInit+0x24>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <SysTick_vInit+0x24>)
 8000c16:	f023 0304 	bic.w	r3, r3, #4
 8000c1a:	6013      	str	r3, [r2, #0]
#elif SysTick_ClkSource==SysTick_AHB
	SET_BIT(SysTick->CTRL  , 2 ) ;

#endif

}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <SysTick_vDelayms>:

	}

}

void SysTick_vDelayms(uint32_t local_time) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

	local_time *= 1000;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	607b      	str	r3, [r7, #4]

	if (local_time < (1 << 25)) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c42:	d216      	bcs.n	8000c72 <SysTick_vDelayms+0x4a>

		SysTick->LOAD = local_time;
 8000c44:	4a35      	ldr	r2, [pc, #212]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6053      	str	r3, [r2, #4]

		SET_BIT(SysTick->CTRL, 0);
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a33      	ldr	r2, [pc, #204]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6013      	str	r3, [r2, #0]

		while (!READ_BIT(SysTick->CTRL, 16))
 8000c56:	bf00      	nop
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f9      	beq.n	8000c58 <SysTick_vDelayms+0x30>
			;

		CLEAR_BIT(SysTick->CTRL, 0);
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a2c      	ldr	r2, [pc, #176]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000c6a:	f023 0301 	bic.w	r3, r3, #1
 8000c6e:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000c70:	e04e      	b.n	8000d10 <SysTick_vDelayms+0xe8>
	else if (local_time > (1 << 25)) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c78:	d94a      	bls.n	8000d10 <SysTick_vDelayms+0xe8>
		uint32_t overfolow = local_time / 0xffffff;
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	f240 1301 	movw	r3, #257	; 0x101
 8000c80:	fba3 1302 	umull	r1, r3, r3, r2
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	0852      	lsrs	r2, r2, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	0ddb      	lsrs	r3, r3, #23
 8000c8c:	613b      	str	r3, [r7, #16]
		uint32_t rem = local_time / 0xffffff;
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	f240 1301 	movw	r3, #257	; 0x101
 8000c94:	fba3 1302 	umull	r1, r3, r3, r2
 8000c98:	1ad2      	subs	r2, r2, r3
 8000c9a:	0852      	lsrs	r2, r2, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	0ddb      	lsrs	r3, r3, #23
 8000ca0:	60fb      	str	r3, [r7, #12]
		SysTick->LOAD = rem;
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6053      	str	r3, [r2, #4]
		SET_BIT(SysTick->CTRL, 0);
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
		while (!READ_BIT(SysTick->CTRL, 16))
 8000cb4:	bf00      	nop
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f9      	beq.n	8000cb6 <SysTick_vDelayms+0x8e>
		CLEAR_BIT(SysTick->CTRL, 0);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e019      	b.n	8000d08 <SysTick_vDelayms+0xe0>
			SysTick->LOAD = 0xffffff;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cd6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000cda:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]
			while (!READ_BIT(SysTick->CTRL, 16))
 8000ce8:	bf00      	nop
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f9      	beq.n	8000cea <SysTick_vDelayms+0xc2>
			CLEAR_BIT(SysTick->CTRL, 0);
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <SysTick_vDelayms+0xf4>)
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d3e1      	bcc.n	8000cd4 <SysTick_vDelayms+0xac>
}
 8000d10:	bf00      	nop
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <SysTick_Handler>:

	}

}

void SysTick_Handler(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	if (Overflow_needFlag == 0) {
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <SysTick_Handler+0x94>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10d      	bne.n	8000d48 <SysTick_Handler+0x28>

		/* stop timer */
		SET_BIT(SysTick->CTRL, 0);
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SysTick_Handler+0x98>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <SysTick_Handler+0x98>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]

		if (SysTickHandler_ptr != NULL_FPTR) {
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <SysTick_Handler+0x9c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d037      	beq.n	8000db0 <SysTick_Handler+0x90>
			SysTickHandler_ptr();
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <SysTick_Handler+0x9c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4798      	blx	r3

		}

	}

}
 8000d46:	e033      	b.n	8000db0 <SysTick_Handler+0x90>
	} else if (Overflow_needFlag == 1) {
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <SysTick_Handler+0x94>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d12f      	bne.n	8000db0 <SysTick_Handler+0x90>
		CLEAR_BIT(SysTick->CTRL, 0);
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <SysTick_Handler+0x98>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <SysTick_Handler+0x98>)
 8000d56:	f023 0301 	bic.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <SysTick_Handler+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e00e      	b.n	8000d82 <SysTick_Handler+0x62>
			SysTick->LOAD = 0xffffff;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <SysTick_Handler+0x98>)
 8000d66:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000d6a:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <SysTick_Handler+0x98>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <SysTick_Handler+0x98>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <SysTick_Handler+0xa0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <SysTick_Handler+0xa0>)
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <SysTick_Handler+0xa0>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <SysTick_Handler+0xa4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3ea      	bcc.n	8000d64 <SysTick_Handler+0x44>
		if(i==(overflowInterrupt-1)){
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <SysTick_Handler+0xa4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <SysTick_Handler+0xa0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d109      	bne.n	8000db0 <SysTick_Handler+0x90>
			if (SysTickHandler_ptr != NULL_FPTR) {
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <SysTick_Handler+0x9c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <SysTick_Handler+0x8a>
						SysTickHandler_ptr();
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Handler+0x9c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4798      	blx	r3
			i=0 ;
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Handler+0xa0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200000d9 	.word	0x200000d9
 8000db8:	e000e010 	.word	0xe000e010
 8000dbc:	200000e0 	.word	0x200000e0
 8000dc0:	200000e4 	.word	0x200000e4
 8000dc4:	200000dc 	.word	0x200000dc

08000dc8 <TogglePinB0>:
GPIO_PORTA, GPIO_Pin2,
GPIO_PinModeOutput_PP, LOW_O

};

void TogglePinB0 (void)  {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

	LCD_Clear() ;
 8000dcc:	f7ff faf8 	bl	80003c0 <LCD_Clear>
	LCD_WriteString("ISR now..") ;
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <TogglePinB0+0x44>)
 8000dd2:	f7ff fb5b 	bl	800048c <LCD_WriteString>
	SysTick_vDelayms(1000) ;
 8000dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dda:	f7ff ff25 	bl	8000c28 <SysTick_vDelayms>
	LCD_WriteString("1") ;
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <TogglePinB0+0x48>)
 8000de0:	f7ff fb54 	bl	800048c <LCD_WriteString>
	SysTick_vDelayms(500) ;
 8000de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de8:	f7ff ff1e 	bl	8000c28 <SysTick_vDelayms>
	LCD_WriteString("2") ;
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <TogglePinB0+0x4c>)
 8000dee:	f7ff fb4d 	bl	800048c <LCD_WriteString>
	SysTick_vDelayms(500) ;
 8000df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df6:	f7ff ff17 	bl	8000c28 <SysTick_vDelayms>
	LCD_WriteString("3") ;
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <TogglePinB0+0x50>)
 8000dfc:	f7ff fb46 	bl	800048c <LCD_WriteString>
	SysTick_vDelayms(500) ;
 8000e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e04:	f7ff ff10 	bl	8000c28 <SysTick_vDelayms>
	// GPIO_RETURNtPinToggle(GPIO_PORTA, GPIO_Pin2) ;
//SysTick_vDelayms(1000) ;

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08001f90 	.word	0x08001f90
 8000e10:	08001f9c 	.word	0x08001f9c
 8000e14:	08001fa0 	.word	0x08001fa0
 8000e18:	08001fa4 	.word	0x08001fa4

08000e1c <main>:

int main() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0



	NVIC_SetPriorityConfig(NVIC_0GROUB_16SUB) ;
 8000e22:	2007      	movs	r0, #7
 8000e24:	f7ff fd5a 	bl	80008dc <NVIC_SetPriorityConfig>

	NVIC_voidSetInterruptPriority(EXTI0_LINE, 0, 0) ;
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2006      	movs	r0, #6
 8000e2e:	f7ff fd77 	bl	8000920 <NVIC_voidSetInterruptPriority>

	NVIC_vEnableInterrupt(EXTI0_LINE) ;
 8000e32:	2006      	movs	r0, #6
 8000e34:	f7ff fdea 	bl	8000a0c <NVIC_vEnableInterrupt>




	GPIO_PinConfig Pinb12 = { GPIO_PORTB, GPIO_Pin12,
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <main+0x108>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61bb      	str	r3, [r7, #24]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb13 = { GPIO_PORTB, GPIO_Pin13,
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <main+0x10c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	617b      	str	r3, [r7, #20]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb14 = { GPIO_PORTB, GPIO_Pin14,
 8000e44:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <main+0x110>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	613b      	str	r3, [r7, #16]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb15 = { GPIO_PORTB, GPIO_Pin15,
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <main+0x114>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	60fb      	str	r3, [r7, #12]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pina8 = { GPIO_PORTA, GPIO_Pin8,
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <main+0x118>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60bb      	str	r3, [r7, #8]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pina11 = { GPIO_PORTA, GPIO_Pin11,
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <main+0x11c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	607b      	str	r3, [r7, #4]
	GPIO_PinModeOutput_PP, LOW_O

	};


	GPIO_PinConfig Pinb0 = { GPIO_PORTB, GPIO_Pin0,
 8000e5c:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <main+0x120>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	603b      	str	r3, [r7, #0]

	};



	RCC_RETURNtInit();
 8000e62:	f7ff fdf3 	bl	8000a4c <RCC_RETURNtInit>

	RCC_RETURNtPeripheralEn(APB2, AFIO_APB2_peripherals);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff fe89 	bl	8000b80 <RCC_RETURNtPeripheralEn>

	RCC_RETURNtPeripheralEn(APB2, PORTA_APB2_peripherals);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fe85 	bl	8000b80 <RCC_RETURNtPeripheralEn>
	RCC_RETURNtPeripheralEn(APB2, PORTB_APB2_peripherals);
 8000e76:	2103      	movs	r1, #3
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff fe81 	bl	8000b80 <RCC_RETURNtPeripheralEn>

	/* alternate EXT0 -> PORTB0 */
	*(uint32_t*)0x40010008=1 ;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <main+0x124>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]


	GPIO_RETURNtPinInit(&Pina2);
 8000e84:	482f      	ldr	r0, [pc, #188]	; (8000f44 <main+0x128>)
 8000e86:	f7ff fc55 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb12);
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fc50 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb13);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc4b 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb14);
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fc46 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb15);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc41 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pina8);
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc3c 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pina11);
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc38 	bl	8000734 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb0);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc34 	bl	8000734 <GPIO_RETURNtPinInit>


	SysTick_vInit();
 8000ecc:	f7ff fe98 	bl	8000c00 <SysTick_vInit>

	LCD_Init();
 8000ed0:	f7ff fa50 	bl	8000374 <LCD_Init>

	EXTI_RETURNtSetInterruptEdge(EXTI_LINE0, FALLING_EDGE) ;
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fb44 	bl	8000564 <EXTI_RETURNtSetInterruptEdge>
	EXTI_RETURNtSetInterruptStatus(EXTI_LINE0 ,EXTINonMasked) ;
 8000edc:	2101      	movs	r1, #1
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fb0c 	bl	80004fc <EXTI_RETURNtSetInterruptStatus>
	EXTI_RETURNtSetCalbackFunction(EXTI_LINE0, TogglePinB0)  ;
 8000ee4:	4918      	ldr	r1, [pc, #96]	; (8000f48 <main+0x12c>)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fbb8 	bl	800065c <EXTI_RETURNtSetCalbackFunction>

uint32_t x  = 0  ;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]

	while (1) {

		LCD_GoTo(0, 0) ;
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fae2 	bl	80004bc <LCD_GoTo>
		LCD_WriteNumber(x++) ;
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	61fa      	str	r2, [r7, #28]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa66 	bl	80003d0 <LCD_WriteNumber>
		LCD_WriteString("               ") ;
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <main+0x130>)
 8000f06:	f7ff fac1 	bl	800048c <LCD_WriteString>
		SysTick_vDelayms(1500) ;
 8000f0a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f0e:	f7ff fe8b 	bl	8000c28 <SysTick_vDelayms>
		if(x==65000) {
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d1e9      	bne.n	8000ef0 <main+0xd4>

			x= 0 ;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
		LCD_GoTo(0, 0) ;
 8000f20:	e7e6      	b.n	8000ef0 <main+0xd4>
 8000f22:	bf00      	nop
 8000f24:	08001fb8 	.word	0x08001fb8
 8000f28:	08001fbc 	.word	0x08001fbc
 8000f2c:	08001fc0 	.word	0x08001fc0
 8000f30:	08001fc4 	.word	0x08001fc4
 8000f34:	08001fc8 	.word	0x08001fc8
 8000f38:	08001fcc 	.word	0x08001fcc
 8000f3c:	08001fd0 	.word	0x08001fd0
 8000f40:	40010008 	.word	0x40010008
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	08000dc9 	.word	0x08000dc9
 8000f4c:	08001fa8 	.word	0x08001fa8

08000f50 <WWDG_IRQHandler>:
	 */

	return 0;
}

void WWDG_IRQHandler(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

	printf("Hello ") ;
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <WWDG_IRQHandler+0x10>)
 8000f56:	f000 f991 	bl	800127c <iprintf>

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08001fd4 	.word	0x08001fd4

08000f64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
  }

  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
  }
  return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101e:	b480      	push	{r7}
 8001020:	b085      	sub	sp, #20
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
	...

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f000 f9ac 	bl	80013c4 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20005000 	.word	0x20005000
 8001098:	00000400 	.word	0x00000400
 800109c:	200000e8 	.word	0x200000e8
 80010a0:	20000238 	.word	0x20000238

080010a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	; (80010e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <LoopForever+0xe>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	; (80010f0 <LoopForever+0x16>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010d2:	f000 f97d 	bl	80013d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff fea1 	bl	8000e1c <main>

080010da <LoopForever>:

LoopForever:
  b LoopForever
 80010da:	e7fe      	b.n	80010da <LoopForever>
  ldr   r0, =_estack
 80010dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010e8:	08002018 	.word	0x08002018
  ldr r2, =_sbss
 80010ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010f0:	20000238 	.word	0x20000238

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>
	...

080010f8 <std>:
 80010f8:	2300      	movs	r3, #0
 80010fa:	b510      	push	{r4, lr}
 80010fc:	4604      	mov	r4, r0
 80010fe:	e9c0 3300 	strd	r3, r3, [r0]
 8001102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001106:	6083      	str	r3, [r0, #8]
 8001108:	8181      	strh	r1, [r0, #12]
 800110a:	6643      	str	r3, [r0, #100]	; 0x64
 800110c:	81c2      	strh	r2, [r0, #14]
 800110e:	6183      	str	r3, [r0, #24]
 8001110:	4619      	mov	r1, r3
 8001112:	2208      	movs	r2, #8
 8001114:	305c      	adds	r0, #92	; 0x5c
 8001116:	f000 f906 	bl	8001326 <memset>
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <std+0x58>)
 800111c:	6224      	str	r4, [r4, #32]
 800111e:	6263      	str	r3, [r4, #36]	; 0x24
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <std+0x5c>)
 8001122:	62a3      	str	r3, [r4, #40]	; 0x28
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <std+0x60>)
 8001126:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <std+0x64>)
 800112a:	6323      	str	r3, [r4, #48]	; 0x30
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <std+0x68>)
 800112e:	429c      	cmp	r4, r3
 8001130:	d006      	beq.n	8001140 <std+0x48>
 8001132:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001136:	4294      	cmp	r4, r2
 8001138:	d002      	beq.n	8001140 <std+0x48>
 800113a:	33d0      	adds	r3, #208	; 0xd0
 800113c:	429c      	cmp	r4, r3
 800113e:	d105      	bne.n	800114c <std+0x54>
 8001140:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001148:	f000 b966 	b.w	8001418 <__retarget_lock_init_recursive>
 800114c:	bd10      	pop	{r4, pc}
 800114e:	bf00      	nop
 8001150:	080012a1 	.word	0x080012a1
 8001154:	080012c3 	.word	0x080012c3
 8001158:	080012fb 	.word	0x080012fb
 800115c:	0800131f 	.word	0x0800131f
 8001160:	200000ec 	.word	0x200000ec

08001164 <stdio_exit_handler>:
 8001164:	4a02      	ldr	r2, [pc, #8]	; (8001170 <stdio_exit_handler+0xc>)
 8001166:	4903      	ldr	r1, [pc, #12]	; (8001174 <stdio_exit_handler+0x10>)
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <stdio_exit_handler+0x14>)
 800116a:	f000 b869 	b.w	8001240 <_fwalk_sglue>
 800116e:	bf00      	nop
 8001170:	20000010 	.word	0x20000010
 8001174:	08001cb9 	.word	0x08001cb9
 8001178:	2000001c 	.word	0x2000001c

0800117c <cleanup_stdio>:
 800117c:	6841      	ldr	r1, [r0, #4]
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <cleanup_stdio+0x34>)
 8001180:	b510      	push	{r4, lr}
 8001182:	4299      	cmp	r1, r3
 8001184:	4604      	mov	r4, r0
 8001186:	d001      	beq.n	800118c <cleanup_stdio+0x10>
 8001188:	f000 fd96 	bl	8001cb8 <_fflush_r>
 800118c:	68a1      	ldr	r1, [r4, #8]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <cleanup_stdio+0x38>)
 8001190:	4299      	cmp	r1, r3
 8001192:	d002      	beq.n	800119a <cleanup_stdio+0x1e>
 8001194:	4620      	mov	r0, r4
 8001196:	f000 fd8f 	bl	8001cb8 <_fflush_r>
 800119a:	68e1      	ldr	r1, [r4, #12]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <cleanup_stdio+0x3c>)
 800119e:	4299      	cmp	r1, r3
 80011a0:	d004      	beq.n	80011ac <cleanup_stdio+0x30>
 80011a2:	4620      	mov	r0, r4
 80011a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011a8:	f000 bd86 	b.w	8001cb8 <_fflush_r>
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	bf00      	nop
 80011b0:	200000ec 	.word	0x200000ec
 80011b4:	20000154 	.word	0x20000154
 80011b8:	200001bc 	.word	0x200001bc

080011bc <global_stdio_init.part.0>:
 80011bc:	b510      	push	{r4, lr}
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <global_stdio_init.part.0+0x30>)
 80011c0:	4c0b      	ldr	r4, [pc, #44]	; (80011f0 <global_stdio_init.part.0+0x34>)
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <global_stdio_init.part.0+0x38>)
 80011c4:	4620      	mov	r0, r4
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	2104      	movs	r1, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	f7ff ff94 	bl	80010f8 <std>
 80011d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80011d4:	2201      	movs	r2, #1
 80011d6:	2109      	movs	r1, #9
 80011d8:	f7ff ff8e 	bl	80010f8 <std>
 80011dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80011e0:	2202      	movs	r2, #2
 80011e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e6:	2112      	movs	r1, #18
 80011e8:	f7ff bf86 	b.w	80010f8 <std>
 80011ec:	20000224 	.word	0x20000224
 80011f0:	200000ec 	.word	0x200000ec
 80011f4:	08001165 	.word	0x08001165

080011f8 <__sfp_lock_acquire>:
 80011f8:	4801      	ldr	r0, [pc, #4]	; (8001200 <__sfp_lock_acquire+0x8>)
 80011fa:	f000 b90e 	b.w	800141a <__retarget_lock_acquire_recursive>
 80011fe:	bf00      	nop
 8001200:	2000022d 	.word	0x2000022d

08001204 <__sfp_lock_release>:
 8001204:	4801      	ldr	r0, [pc, #4]	; (800120c <__sfp_lock_release+0x8>)
 8001206:	f000 b909 	b.w	800141c <__retarget_lock_release_recursive>
 800120a:	bf00      	nop
 800120c:	2000022d 	.word	0x2000022d

08001210 <__sinit>:
 8001210:	b510      	push	{r4, lr}
 8001212:	4604      	mov	r4, r0
 8001214:	f7ff fff0 	bl	80011f8 <__sfp_lock_acquire>
 8001218:	6a23      	ldr	r3, [r4, #32]
 800121a:	b11b      	cbz	r3, 8001224 <__sinit+0x14>
 800121c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001220:	f7ff bff0 	b.w	8001204 <__sfp_lock_release>
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__sinit+0x28>)
 8001226:	6223      	str	r3, [r4, #32]
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__sinit+0x2c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f5      	bne.n	800121c <__sinit+0xc>
 8001230:	f7ff ffc4 	bl	80011bc <global_stdio_init.part.0>
 8001234:	e7f2      	b.n	800121c <__sinit+0xc>
 8001236:	bf00      	nop
 8001238:	0800117d 	.word	0x0800117d
 800123c:	20000224 	.word	0x20000224

08001240 <_fwalk_sglue>:
 8001240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001244:	4607      	mov	r7, r0
 8001246:	4688      	mov	r8, r1
 8001248:	4614      	mov	r4, r2
 800124a:	2600      	movs	r6, #0
 800124c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001250:	f1b9 0901 	subs.w	r9, r9, #1
 8001254:	d505      	bpl.n	8001262 <_fwalk_sglue+0x22>
 8001256:	6824      	ldr	r4, [r4, #0]
 8001258:	2c00      	cmp	r4, #0
 800125a:	d1f7      	bne.n	800124c <_fwalk_sglue+0xc>
 800125c:	4630      	mov	r0, r6
 800125e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001262:	89ab      	ldrh	r3, [r5, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d907      	bls.n	8001278 <_fwalk_sglue+0x38>
 8001268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800126c:	3301      	adds	r3, #1
 800126e:	d003      	beq.n	8001278 <_fwalk_sglue+0x38>
 8001270:	4629      	mov	r1, r5
 8001272:	4638      	mov	r0, r7
 8001274:	47c0      	blx	r8
 8001276:	4306      	orrs	r6, r0
 8001278:	3568      	adds	r5, #104	; 0x68
 800127a:	e7e9      	b.n	8001250 <_fwalk_sglue+0x10>

0800127c <iprintf>:
 800127c:	b40f      	push	{r0, r1, r2, r3}
 800127e:	b507      	push	{r0, r1, r2, lr}
 8001280:	4906      	ldr	r1, [pc, #24]	; (800129c <iprintf+0x20>)
 8001282:	ab04      	add	r3, sp, #16
 8001284:	6808      	ldr	r0, [r1, #0]
 8001286:	f853 2b04 	ldr.w	r2, [r3], #4
 800128a:	6881      	ldr	r1, [r0, #8]
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	f000 f9e3 	bl	8001658 <_vfiprintf_r>
 8001292:	b003      	add	sp, #12
 8001294:	f85d eb04 	ldr.w	lr, [sp], #4
 8001298:	b004      	add	sp, #16
 800129a:	4770      	bx	lr
 800129c:	20000068 	.word	0x20000068

080012a0 <__sread>:
 80012a0:	b510      	push	{r4, lr}
 80012a2:	460c      	mov	r4, r1
 80012a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012a8:	f000 f868 	bl	800137c <_read_r>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	bfab      	itete	ge
 80012b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012b2:	89a3      	ldrhlt	r3, [r4, #12]
 80012b4:	181b      	addge	r3, r3, r0
 80012b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012ba:	bfac      	ite	ge
 80012bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80012be:	81a3      	strhlt	r3, [r4, #12]
 80012c0:	bd10      	pop	{r4, pc}

080012c2 <__swrite>:
 80012c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c6:	461f      	mov	r7, r3
 80012c8:	898b      	ldrh	r3, [r1, #12]
 80012ca:	4605      	mov	r5, r0
 80012cc:	05db      	lsls	r3, r3, #23
 80012ce:	460c      	mov	r4, r1
 80012d0:	4616      	mov	r6, r2
 80012d2:	d505      	bpl.n	80012e0 <__swrite+0x1e>
 80012d4:	2302      	movs	r3, #2
 80012d6:	2200      	movs	r2, #0
 80012d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012dc:	f000 f83c 	bl	8001358 <_lseek_r>
 80012e0:	89a3      	ldrh	r3, [r4, #12]
 80012e2:	4632      	mov	r2, r6
 80012e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012e8:	81a3      	strh	r3, [r4, #12]
 80012ea:	4628      	mov	r0, r5
 80012ec:	463b      	mov	r3, r7
 80012ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012f6:	f000 b853 	b.w	80013a0 <_write_r>

080012fa <__sseek>:
 80012fa:	b510      	push	{r4, lr}
 80012fc:	460c      	mov	r4, r1
 80012fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001302:	f000 f829 	bl	8001358 <_lseek_r>
 8001306:	1c43      	adds	r3, r0, #1
 8001308:	89a3      	ldrh	r3, [r4, #12]
 800130a:	bf15      	itete	ne
 800130c:	6560      	strne	r0, [r4, #84]	; 0x54
 800130e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001316:	81a3      	strheq	r3, [r4, #12]
 8001318:	bf18      	it	ne
 800131a:	81a3      	strhne	r3, [r4, #12]
 800131c:	bd10      	pop	{r4, pc}

0800131e <__sclose>:
 800131e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001322:	f000 b809 	b.w	8001338 <_close_r>

08001326 <memset>:
 8001326:	4603      	mov	r3, r0
 8001328:	4402      	add	r2, r0
 800132a:	4293      	cmp	r3, r2
 800132c:	d100      	bne.n	8001330 <memset+0xa>
 800132e:	4770      	bx	lr
 8001330:	f803 1b01 	strb.w	r1, [r3], #1
 8001334:	e7f9      	b.n	800132a <memset+0x4>
	...

08001338 <_close_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	2300      	movs	r3, #0
 800133c:	4d05      	ldr	r5, [pc, #20]	; (8001354 <_close_r+0x1c>)
 800133e:	4604      	mov	r4, r0
 8001340:	4608      	mov	r0, r1
 8001342:	602b      	str	r3, [r5, #0]
 8001344:	f7ff fe47 	bl	8000fd6 <_close>
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	d102      	bne.n	8001352 <_close_r+0x1a>
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	b103      	cbz	r3, 8001352 <_close_r+0x1a>
 8001350:	6023      	str	r3, [r4, #0]
 8001352:	bd38      	pop	{r3, r4, r5, pc}
 8001354:	20000228 	.word	0x20000228

08001358 <_lseek_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	4611      	mov	r1, r2
 8001360:	2200      	movs	r2, #0
 8001362:	4d05      	ldr	r5, [pc, #20]	; (8001378 <_lseek_r+0x20>)
 8001364:	602a      	str	r2, [r5, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f7ff fe59 	bl	800101e <_lseek>
 800136c:	1c43      	adds	r3, r0, #1
 800136e:	d102      	bne.n	8001376 <_lseek_r+0x1e>
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	b103      	cbz	r3, 8001376 <_lseek_r+0x1e>
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	20000228 	.word	0x20000228

0800137c <_read_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	2200      	movs	r2, #0
 8001386:	4d05      	ldr	r5, [pc, #20]	; (800139c <_read_r+0x20>)
 8001388:	602a      	str	r2, [r5, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	f7ff fdea 	bl	8000f64 <_read>
 8001390:	1c43      	adds	r3, r0, #1
 8001392:	d102      	bne.n	800139a <_read_r+0x1e>
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	b103      	cbz	r3, 800139a <_read_r+0x1e>
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	20000228 	.word	0x20000228

080013a0 <_write_r>:
 80013a0:	b538      	push	{r3, r4, r5, lr}
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	4d05      	ldr	r5, [pc, #20]	; (80013c0 <_write_r+0x20>)
 80013ac:	602a      	str	r2, [r5, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	f7ff fdf5 	bl	8000f9e <_write>
 80013b4:	1c43      	adds	r3, r0, #1
 80013b6:	d102      	bne.n	80013be <_write_r+0x1e>
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	b103      	cbz	r3, 80013be <_write_r+0x1e>
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	20000228 	.word	0x20000228

080013c4 <__errno>:
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <__errno+0x8>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000068 	.word	0x20000068

080013d0 <__libc_init_array>:
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	2600      	movs	r6, #0
 80013d4:	4d0c      	ldr	r5, [pc, #48]	; (8001408 <__libc_init_array+0x38>)
 80013d6:	4c0d      	ldr	r4, [pc, #52]	; (800140c <__libc_init_array+0x3c>)
 80013d8:	1b64      	subs	r4, r4, r5
 80013da:	10a4      	asrs	r4, r4, #2
 80013dc:	42a6      	cmp	r6, r4
 80013de:	d109      	bne.n	80013f4 <__libc_init_array+0x24>
 80013e0:	f000 fdca 	bl	8001f78 <_init>
 80013e4:	2600      	movs	r6, #0
 80013e6:	4d0a      	ldr	r5, [pc, #40]	; (8001410 <__libc_init_array+0x40>)
 80013e8:	4c0a      	ldr	r4, [pc, #40]	; (8001414 <__libc_init_array+0x44>)
 80013ea:	1b64      	subs	r4, r4, r5
 80013ec:	10a4      	asrs	r4, r4, #2
 80013ee:	42a6      	cmp	r6, r4
 80013f0:	d105      	bne.n	80013fe <__libc_init_array+0x2e>
 80013f2:	bd70      	pop	{r4, r5, r6, pc}
 80013f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013f8:	4798      	blx	r3
 80013fa:	3601      	adds	r6, #1
 80013fc:	e7ee      	b.n	80013dc <__libc_init_array+0xc>
 80013fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001402:	4798      	blx	r3
 8001404:	3601      	adds	r6, #1
 8001406:	e7f2      	b.n	80013ee <__libc_init_array+0x1e>
 8001408:	08002010 	.word	0x08002010
 800140c:	08002010 	.word	0x08002010
 8001410:	08002010 	.word	0x08002010
 8001414:	08002014 	.word	0x08002014

08001418 <__retarget_lock_init_recursive>:
 8001418:	4770      	bx	lr

0800141a <__retarget_lock_acquire_recursive>:
 800141a:	4770      	bx	lr

0800141c <__retarget_lock_release_recursive>:
 800141c:	4770      	bx	lr
	...

08001420 <_free_r>:
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4605      	mov	r5, r0
 8001424:	2900      	cmp	r1, #0
 8001426:	d040      	beq.n	80014aa <_free_r+0x8a>
 8001428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800142c:	1f0c      	subs	r4, r1, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	bfb8      	it	lt
 8001432:	18e4      	addlt	r4, r4, r3
 8001434:	f000 f8dc 	bl	80015f0 <__malloc_lock>
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <_free_r+0x8c>)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	b933      	cbnz	r3, 800144c <_free_r+0x2c>
 800143e:	6063      	str	r3, [r4, #4]
 8001440:	6014      	str	r4, [r2, #0]
 8001442:	4628      	mov	r0, r5
 8001444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001448:	f000 b8d8 	b.w	80015fc <__malloc_unlock>
 800144c:	42a3      	cmp	r3, r4
 800144e:	d908      	bls.n	8001462 <_free_r+0x42>
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	1821      	adds	r1, r4, r0
 8001454:	428b      	cmp	r3, r1
 8001456:	bf01      	itttt	eq
 8001458:	6819      	ldreq	r1, [r3, #0]
 800145a:	685b      	ldreq	r3, [r3, #4]
 800145c:	1809      	addeq	r1, r1, r0
 800145e:	6021      	streq	r1, [r4, #0]
 8001460:	e7ed      	b.n	800143e <_free_r+0x1e>
 8001462:	461a      	mov	r2, r3
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	b10b      	cbz	r3, 800146c <_free_r+0x4c>
 8001468:	42a3      	cmp	r3, r4
 800146a:	d9fa      	bls.n	8001462 <_free_r+0x42>
 800146c:	6811      	ldr	r1, [r2, #0]
 800146e:	1850      	adds	r0, r2, r1
 8001470:	42a0      	cmp	r0, r4
 8001472:	d10b      	bne.n	800148c <_free_r+0x6c>
 8001474:	6820      	ldr	r0, [r4, #0]
 8001476:	4401      	add	r1, r0
 8001478:	1850      	adds	r0, r2, r1
 800147a:	4283      	cmp	r3, r0
 800147c:	6011      	str	r1, [r2, #0]
 800147e:	d1e0      	bne.n	8001442 <_free_r+0x22>
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4408      	add	r0, r1
 8001486:	6010      	str	r0, [r2, #0]
 8001488:	6053      	str	r3, [r2, #4]
 800148a:	e7da      	b.n	8001442 <_free_r+0x22>
 800148c:	d902      	bls.n	8001494 <_free_r+0x74>
 800148e:	230c      	movs	r3, #12
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	e7d6      	b.n	8001442 <_free_r+0x22>
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	1821      	adds	r1, r4, r0
 8001498:	428b      	cmp	r3, r1
 800149a:	bf01      	itttt	eq
 800149c:	6819      	ldreq	r1, [r3, #0]
 800149e:	685b      	ldreq	r3, [r3, #4]
 80014a0:	1809      	addeq	r1, r1, r0
 80014a2:	6021      	streq	r1, [r4, #0]
 80014a4:	6063      	str	r3, [r4, #4]
 80014a6:	6054      	str	r4, [r2, #4]
 80014a8:	e7cb      	b.n	8001442 <_free_r+0x22>
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
 80014ac:	20000230 	.word	0x20000230

080014b0 <sbrk_aligned>:
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	4e0e      	ldr	r6, [pc, #56]	; (80014ec <sbrk_aligned+0x3c>)
 80014b4:	460c      	mov	r4, r1
 80014b6:	6831      	ldr	r1, [r6, #0]
 80014b8:	4605      	mov	r5, r0
 80014ba:	b911      	cbnz	r1, 80014c2 <sbrk_aligned+0x12>
 80014bc:	f000 fcba 	bl	8001e34 <_sbrk_r>
 80014c0:	6030      	str	r0, [r6, #0]
 80014c2:	4621      	mov	r1, r4
 80014c4:	4628      	mov	r0, r5
 80014c6:	f000 fcb5 	bl	8001e34 <_sbrk_r>
 80014ca:	1c43      	adds	r3, r0, #1
 80014cc:	d00a      	beq.n	80014e4 <sbrk_aligned+0x34>
 80014ce:	1cc4      	adds	r4, r0, #3
 80014d0:	f024 0403 	bic.w	r4, r4, #3
 80014d4:	42a0      	cmp	r0, r4
 80014d6:	d007      	beq.n	80014e8 <sbrk_aligned+0x38>
 80014d8:	1a21      	subs	r1, r4, r0
 80014da:	4628      	mov	r0, r5
 80014dc:	f000 fcaa 	bl	8001e34 <_sbrk_r>
 80014e0:	3001      	adds	r0, #1
 80014e2:	d101      	bne.n	80014e8 <sbrk_aligned+0x38>
 80014e4:	f04f 34ff 	mov.w	r4, #4294967295
 80014e8:	4620      	mov	r0, r4
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	20000234 	.word	0x20000234

080014f0 <_malloc_r>:
 80014f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014f4:	1ccd      	adds	r5, r1, #3
 80014f6:	f025 0503 	bic.w	r5, r5, #3
 80014fa:	3508      	adds	r5, #8
 80014fc:	2d0c      	cmp	r5, #12
 80014fe:	bf38      	it	cc
 8001500:	250c      	movcc	r5, #12
 8001502:	2d00      	cmp	r5, #0
 8001504:	4607      	mov	r7, r0
 8001506:	db01      	blt.n	800150c <_malloc_r+0x1c>
 8001508:	42a9      	cmp	r1, r5
 800150a:	d905      	bls.n	8001518 <_malloc_r+0x28>
 800150c:	230c      	movs	r3, #12
 800150e:	2600      	movs	r6, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4630      	mov	r0, r6
 8001514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001518:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80015ec <_malloc_r+0xfc>
 800151c:	f000 f868 	bl	80015f0 <__malloc_lock>
 8001520:	f8d8 3000 	ldr.w	r3, [r8]
 8001524:	461c      	mov	r4, r3
 8001526:	bb5c      	cbnz	r4, 8001580 <_malloc_r+0x90>
 8001528:	4629      	mov	r1, r5
 800152a:	4638      	mov	r0, r7
 800152c:	f7ff ffc0 	bl	80014b0 <sbrk_aligned>
 8001530:	1c43      	adds	r3, r0, #1
 8001532:	4604      	mov	r4, r0
 8001534:	d155      	bne.n	80015e2 <_malloc_r+0xf2>
 8001536:	f8d8 4000 	ldr.w	r4, [r8]
 800153a:	4626      	mov	r6, r4
 800153c:	2e00      	cmp	r6, #0
 800153e:	d145      	bne.n	80015cc <_malloc_r+0xdc>
 8001540:	2c00      	cmp	r4, #0
 8001542:	d048      	beq.n	80015d6 <_malloc_r+0xe6>
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	4631      	mov	r1, r6
 8001548:	4638      	mov	r0, r7
 800154a:	eb04 0903 	add.w	r9, r4, r3
 800154e:	f000 fc71 	bl	8001e34 <_sbrk_r>
 8001552:	4581      	cmp	r9, r0
 8001554:	d13f      	bne.n	80015d6 <_malloc_r+0xe6>
 8001556:	6821      	ldr	r1, [r4, #0]
 8001558:	4638      	mov	r0, r7
 800155a:	1a6d      	subs	r5, r5, r1
 800155c:	4629      	mov	r1, r5
 800155e:	f7ff ffa7 	bl	80014b0 <sbrk_aligned>
 8001562:	3001      	adds	r0, #1
 8001564:	d037      	beq.n	80015d6 <_malloc_r+0xe6>
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	442b      	add	r3, r5
 800156a:	6023      	str	r3, [r4, #0]
 800156c:	f8d8 3000 	ldr.w	r3, [r8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d038      	beq.n	80015e6 <_malloc_r+0xf6>
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	42a2      	cmp	r2, r4
 8001578:	d12b      	bne.n	80015d2 <_malloc_r+0xe2>
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	e00f      	b.n	80015a0 <_malloc_r+0xb0>
 8001580:	6822      	ldr	r2, [r4, #0]
 8001582:	1b52      	subs	r2, r2, r5
 8001584:	d41f      	bmi.n	80015c6 <_malloc_r+0xd6>
 8001586:	2a0b      	cmp	r2, #11
 8001588:	d917      	bls.n	80015ba <_malloc_r+0xca>
 800158a:	1961      	adds	r1, r4, r5
 800158c:	42a3      	cmp	r3, r4
 800158e:	6025      	str	r5, [r4, #0]
 8001590:	bf18      	it	ne
 8001592:	6059      	strne	r1, [r3, #4]
 8001594:	6863      	ldr	r3, [r4, #4]
 8001596:	bf08      	it	eq
 8001598:	f8c8 1000 	streq.w	r1, [r8]
 800159c:	5162      	str	r2, [r4, r5]
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	4638      	mov	r0, r7
 80015a2:	f104 060b 	add.w	r6, r4, #11
 80015a6:	f000 f829 	bl	80015fc <__malloc_unlock>
 80015aa:	f026 0607 	bic.w	r6, r6, #7
 80015ae:	1d23      	adds	r3, r4, #4
 80015b0:	1af2      	subs	r2, r6, r3
 80015b2:	d0ae      	beq.n	8001512 <_malloc_r+0x22>
 80015b4:	1b9b      	subs	r3, r3, r6
 80015b6:	50a3      	str	r3, [r4, r2]
 80015b8:	e7ab      	b.n	8001512 <_malloc_r+0x22>
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	6862      	ldr	r2, [r4, #4]
 80015be:	d1dd      	bne.n	800157c <_malloc_r+0x8c>
 80015c0:	f8c8 2000 	str.w	r2, [r8]
 80015c4:	e7ec      	b.n	80015a0 <_malloc_r+0xb0>
 80015c6:	4623      	mov	r3, r4
 80015c8:	6864      	ldr	r4, [r4, #4]
 80015ca:	e7ac      	b.n	8001526 <_malloc_r+0x36>
 80015cc:	4634      	mov	r4, r6
 80015ce:	6876      	ldr	r6, [r6, #4]
 80015d0:	e7b4      	b.n	800153c <_malloc_r+0x4c>
 80015d2:	4613      	mov	r3, r2
 80015d4:	e7cc      	b.n	8001570 <_malloc_r+0x80>
 80015d6:	230c      	movs	r3, #12
 80015d8:	4638      	mov	r0, r7
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	f000 f80e 	bl	80015fc <__malloc_unlock>
 80015e0:	e797      	b.n	8001512 <_malloc_r+0x22>
 80015e2:	6025      	str	r5, [r4, #0]
 80015e4:	e7dc      	b.n	80015a0 <_malloc_r+0xb0>
 80015e6:	605b      	str	r3, [r3, #4]
 80015e8:	deff      	udf	#255	; 0xff
 80015ea:	bf00      	nop
 80015ec:	20000230 	.word	0x20000230

080015f0 <__malloc_lock>:
 80015f0:	4801      	ldr	r0, [pc, #4]	; (80015f8 <__malloc_lock+0x8>)
 80015f2:	f7ff bf12 	b.w	800141a <__retarget_lock_acquire_recursive>
 80015f6:	bf00      	nop
 80015f8:	2000022c 	.word	0x2000022c

080015fc <__malloc_unlock>:
 80015fc:	4801      	ldr	r0, [pc, #4]	; (8001604 <__malloc_unlock+0x8>)
 80015fe:	f7ff bf0d 	b.w	800141c <__retarget_lock_release_recursive>
 8001602:	bf00      	nop
 8001604:	2000022c 	.word	0x2000022c

08001608 <__sfputc_r>:
 8001608:	6893      	ldr	r3, [r2, #8]
 800160a:	b410      	push	{r4}
 800160c:	3b01      	subs	r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	6093      	str	r3, [r2, #8]
 8001612:	da07      	bge.n	8001624 <__sfputc_r+0x1c>
 8001614:	6994      	ldr	r4, [r2, #24]
 8001616:	42a3      	cmp	r3, r4
 8001618:	db01      	blt.n	800161e <__sfputc_r+0x16>
 800161a:	290a      	cmp	r1, #10
 800161c:	d102      	bne.n	8001624 <__sfputc_r+0x1c>
 800161e:	bc10      	pop	{r4}
 8001620:	f000 bb72 	b.w	8001d08 <__swbuf_r>
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	1c58      	adds	r0, r3, #1
 8001628:	6010      	str	r0, [r2, #0]
 800162a:	7019      	strb	r1, [r3, #0]
 800162c:	4608      	mov	r0, r1
 800162e:	bc10      	pop	{r4}
 8001630:	4770      	bx	lr

08001632 <__sfputs_r>:
 8001632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001634:	4606      	mov	r6, r0
 8001636:	460f      	mov	r7, r1
 8001638:	4614      	mov	r4, r2
 800163a:	18d5      	adds	r5, r2, r3
 800163c:	42ac      	cmp	r4, r5
 800163e:	d101      	bne.n	8001644 <__sfputs_r+0x12>
 8001640:	2000      	movs	r0, #0
 8001642:	e007      	b.n	8001654 <__sfputs_r+0x22>
 8001644:	463a      	mov	r2, r7
 8001646:	4630      	mov	r0, r6
 8001648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800164c:	f7ff ffdc 	bl	8001608 <__sfputc_r>
 8001650:	1c43      	adds	r3, r0, #1
 8001652:	d1f3      	bne.n	800163c <__sfputs_r+0xa>
 8001654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001658 <_vfiprintf_r>:
 8001658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800165c:	460d      	mov	r5, r1
 800165e:	4614      	mov	r4, r2
 8001660:	4698      	mov	r8, r3
 8001662:	4606      	mov	r6, r0
 8001664:	b09d      	sub	sp, #116	; 0x74
 8001666:	b118      	cbz	r0, 8001670 <_vfiprintf_r+0x18>
 8001668:	6a03      	ldr	r3, [r0, #32]
 800166a:	b90b      	cbnz	r3, 8001670 <_vfiprintf_r+0x18>
 800166c:	f7ff fdd0 	bl	8001210 <__sinit>
 8001670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001672:	07d9      	lsls	r1, r3, #31
 8001674:	d405      	bmi.n	8001682 <_vfiprintf_r+0x2a>
 8001676:	89ab      	ldrh	r3, [r5, #12]
 8001678:	059a      	lsls	r2, r3, #22
 800167a:	d402      	bmi.n	8001682 <_vfiprintf_r+0x2a>
 800167c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800167e:	f7ff fecc 	bl	800141a <__retarget_lock_acquire_recursive>
 8001682:	89ab      	ldrh	r3, [r5, #12]
 8001684:	071b      	lsls	r3, r3, #28
 8001686:	d501      	bpl.n	800168c <_vfiprintf_r+0x34>
 8001688:	692b      	ldr	r3, [r5, #16]
 800168a:	b99b      	cbnz	r3, 80016b4 <_vfiprintf_r+0x5c>
 800168c:	4629      	mov	r1, r5
 800168e:	4630      	mov	r0, r6
 8001690:	f000 fb78 	bl	8001d84 <__swsetup_r>
 8001694:	b170      	cbz	r0, 80016b4 <_vfiprintf_r+0x5c>
 8001696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001698:	07dc      	lsls	r4, r3, #31
 800169a:	d504      	bpl.n	80016a6 <_vfiprintf_r+0x4e>
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	b01d      	add	sp, #116	; 0x74
 80016a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016a6:	89ab      	ldrh	r3, [r5, #12]
 80016a8:	0598      	lsls	r0, r3, #22
 80016aa:	d4f7      	bmi.n	800169c <_vfiprintf_r+0x44>
 80016ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016ae:	f7ff feb5 	bl	800141c <__retarget_lock_release_recursive>
 80016b2:	e7f3      	b.n	800169c <_vfiprintf_r+0x44>
 80016b4:	2300      	movs	r3, #0
 80016b6:	9309      	str	r3, [sp, #36]	; 0x24
 80016b8:	2320      	movs	r3, #32
 80016ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016be:	2330      	movs	r3, #48	; 0x30
 80016c0:	f04f 0901 	mov.w	r9, #1
 80016c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80016c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001878 <_vfiprintf_r+0x220>
 80016cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016d0:	4623      	mov	r3, r4
 80016d2:	469a      	mov	sl, r3
 80016d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016d8:	b10a      	cbz	r2, 80016de <_vfiprintf_r+0x86>
 80016da:	2a25      	cmp	r2, #37	; 0x25
 80016dc:	d1f9      	bne.n	80016d2 <_vfiprintf_r+0x7a>
 80016de:	ebba 0b04 	subs.w	fp, sl, r4
 80016e2:	d00b      	beq.n	80016fc <_vfiprintf_r+0xa4>
 80016e4:	465b      	mov	r3, fp
 80016e6:	4622      	mov	r2, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	4630      	mov	r0, r6
 80016ec:	f7ff ffa1 	bl	8001632 <__sfputs_r>
 80016f0:	3001      	adds	r0, #1
 80016f2:	f000 80a9 	beq.w	8001848 <_vfiprintf_r+0x1f0>
 80016f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016f8:	445a      	add	r2, fp
 80016fa:	9209      	str	r2, [sp, #36]	; 0x24
 80016fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a1 	beq.w	8001848 <_vfiprintf_r+0x1f0>
 8001706:	2300      	movs	r3, #0
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001710:	f10a 0a01 	add.w	sl, sl, #1
 8001714:	9304      	str	r3, [sp, #16]
 8001716:	9307      	str	r3, [sp, #28]
 8001718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800171c:	931a      	str	r3, [sp, #104]	; 0x68
 800171e:	4654      	mov	r4, sl
 8001720:	2205      	movs	r2, #5
 8001722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001726:	4854      	ldr	r0, [pc, #336]	; (8001878 <_vfiprintf_r+0x220>)
 8001728:	f000 fb94 	bl	8001e54 <memchr>
 800172c:	9a04      	ldr	r2, [sp, #16]
 800172e:	b9d8      	cbnz	r0, 8001768 <_vfiprintf_r+0x110>
 8001730:	06d1      	lsls	r1, r2, #27
 8001732:	bf44      	itt	mi
 8001734:	2320      	movmi	r3, #32
 8001736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800173a:	0713      	lsls	r3, r2, #28
 800173c:	bf44      	itt	mi
 800173e:	232b      	movmi	r3, #43	; 0x2b
 8001740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001744:	f89a 3000 	ldrb.w	r3, [sl]
 8001748:	2b2a      	cmp	r3, #42	; 0x2a
 800174a:	d015      	beq.n	8001778 <_vfiprintf_r+0x120>
 800174c:	4654      	mov	r4, sl
 800174e:	2000      	movs	r0, #0
 8001750:	f04f 0c0a 	mov.w	ip, #10
 8001754:	9a07      	ldr	r2, [sp, #28]
 8001756:	4621      	mov	r1, r4
 8001758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800175c:	3b30      	subs	r3, #48	; 0x30
 800175e:	2b09      	cmp	r3, #9
 8001760:	d94d      	bls.n	80017fe <_vfiprintf_r+0x1a6>
 8001762:	b1b0      	cbz	r0, 8001792 <_vfiprintf_r+0x13a>
 8001764:	9207      	str	r2, [sp, #28]
 8001766:	e014      	b.n	8001792 <_vfiprintf_r+0x13a>
 8001768:	eba0 0308 	sub.w	r3, r0, r8
 800176c:	fa09 f303 	lsl.w	r3, r9, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	46a2      	mov	sl, r4
 8001774:	9304      	str	r3, [sp, #16]
 8001776:	e7d2      	b.n	800171e <_vfiprintf_r+0xc6>
 8001778:	9b03      	ldr	r3, [sp, #12]
 800177a:	1d19      	adds	r1, r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	9103      	str	r1, [sp, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	bfbb      	ittet	lt
 8001784:	425b      	neglt	r3, r3
 8001786:	f042 0202 	orrlt.w	r2, r2, #2
 800178a:	9307      	strge	r3, [sp, #28]
 800178c:	9307      	strlt	r3, [sp, #28]
 800178e:	bfb8      	it	lt
 8001790:	9204      	strlt	r2, [sp, #16]
 8001792:	7823      	ldrb	r3, [r4, #0]
 8001794:	2b2e      	cmp	r3, #46	; 0x2e
 8001796:	d10c      	bne.n	80017b2 <_vfiprintf_r+0x15a>
 8001798:	7863      	ldrb	r3, [r4, #1]
 800179a:	2b2a      	cmp	r3, #42	; 0x2a
 800179c:	d134      	bne.n	8001808 <_vfiprintf_r+0x1b0>
 800179e:	9b03      	ldr	r3, [sp, #12]
 80017a0:	3402      	adds	r4, #2
 80017a2:	1d1a      	adds	r2, r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	9203      	str	r2, [sp, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bfb8      	it	lt
 80017ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80017b0:	9305      	str	r3, [sp, #20]
 80017b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800187c <_vfiprintf_r+0x224>
 80017b6:	2203      	movs	r2, #3
 80017b8:	4650      	mov	r0, sl
 80017ba:	7821      	ldrb	r1, [r4, #0]
 80017bc:	f000 fb4a 	bl	8001e54 <memchr>
 80017c0:	b138      	cbz	r0, 80017d2 <_vfiprintf_r+0x17a>
 80017c2:	2240      	movs	r2, #64	; 0x40
 80017c4:	9b04      	ldr	r3, [sp, #16]
 80017c6:	eba0 000a 	sub.w	r0, r0, sl
 80017ca:	4082      	lsls	r2, r0
 80017cc:	4313      	orrs	r3, r2
 80017ce:	3401      	adds	r4, #1
 80017d0:	9304      	str	r3, [sp, #16]
 80017d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017d6:	2206      	movs	r2, #6
 80017d8:	4829      	ldr	r0, [pc, #164]	; (8001880 <_vfiprintf_r+0x228>)
 80017da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017de:	f000 fb39 	bl	8001e54 <memchr>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d03f      	beq.n	8001866 <_vfiprintf_r+0x20e>
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <_vfiprintf_r+0x22c>)
 80017e8:	bb1b      	cbnz	r3, 8001832 <_vfiprintf_r+0x1da>
 80017ea:	9b03      	ldr	r3, [sp, #12]
 80017ec:	3307      	adds	r3, #7
 80017ee:	f023 0307 	bic.w	r3, r3, #7
 80017f2:	3308      	adds	r3, #8
 80017f4:	9303      	str	r3, [sp, #12]
 80017f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f8:	443b      	add	r3, r7
 80017fa:	9309      	str	r3, [sp, #36]	; 0x24
 80017fc:	e768      	b.n	80016d0 <_vfiprintf_r+0x78>
 80017fe:	460c      	mov	r4, r1
 8001800:	2001      	movs	r0, #1
 8001802:	fb0c 3202 	mla	r2, ip, r2, r3
 8001806:	e7a6      	b.n	8001756 <_vfiprintf_r+0xfe>
 8001808:	2300      	movs	r3, #0
 800180a:	f04f 0c0a 	mov.w	ip, #10
 800180e:	4619      	mov	r1, r3
 8001810:	3401      	adds	r4, #1
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	4620      	mov	r0, r4
 8001816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800181a:	3a30      	subs	r2, #48	; 0x30
 800181c:	2a09      	cmp	r2, #9
 800181e:	d903      	bls.n	8001828 <_vfiprintf_r+0x1d0>
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0c6      	beq.n	80017b2 <_vfiprintf_r+0x15a>
 8001824:	9105      	str	r1, [sp, #20]
 8001826:	e7c4      	b.n	80017b2 <_vfiprintf_r+0x15a>
 8001828:	4604      	mov	r4, r0
 800182a:	2301      	movs	r3, #1
 800182c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001830:	e7f0      	b.n	8001814 <_vfiprintf_r+0x1bc>
 8001832:	ab03      	add	r3, sp, #12
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	462a      	mov	r2, r5
 8001838:	4630      	mov	r0, r6
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_vfiprintf_r+0x230>)
 800183c:	a904      	add	r1, sp, #16
 800183e:	f3af 8000 	nop.w
 8001842:	4607      	mov	r7, r0
 8001844:	1c78      	adds	r0, r7, #1
 8001846:	d1d6      	bne.n	80017f6 <_vfiprintf_r+0x19e>
 8001848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800184a:	07d9      	lsls	r1, r3, #31
 800184c:	d405      	bmi.n	800185a <_vfiprintf_r+0x202>
 800184e:	89ab      	ldrh	r3, [r5, #12]
 8001850:	059a      	lsls	r2, r3, #22
 8001852:	d402      	bmi.n	800185a <_vfiprintf_r+0x202>
 8001854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001856:	f7ff fde1 	bl	800141c <__retarget_lock_release_recursive>
 800185a:	89ab      	ldrh	r3, [r5, #12]
 800185c:	065b      	lsls	r3, r3, #25
 800185e:	f53f af1d 	bmi.w	800169c <_vfiprintf_r+0x44>
 8001862:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001864:	e71c      	b.n	80016a0 <_vfiprintf_r+0x48>
 8001866:	ab03      	add	r3, sp, #12
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	462a      	mov	r2, r5
 800186c:	4630      	mov	r0, r6
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <_vfiprintf_r+0x230>)
 8001870:	a904      	add	r1, sp, #16
 8001872:	f000 f87d 	bl	8001970 <_printf_i>
 8001876:	e7e4      	b.n	8001842 <_vfiprintf_r+0x1ea>
 8001878:	08001fdb 	.word	0x08001fdb
 800187c:	08001fe1 	.word	0x08001fe1
 8001880:	08001fe5 	.word	0x08001fe5
 8001884:	00000000 	.word	0x00000000
 8001888:	08001633 	.word	0x08001633

0800188c <_printf_common>:
 800188c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001890:	4616      	mov	r6, r2
 8001892:	4699      	mov	r9, r3
 8001894:	688a      	ldr	r2, [r1, #8]
 8001896:	690b      	ldr	r3, [r1, #16]
 8001898:	4607      	mov	r7, r0
 800189a:	4293      	cmp	r3, r2
 800189c:	bfb8      	it	lt
 800189e:	4613      	movlt	r3, r2
 80018a0:	6033      	str	r3, [r6, #0]
 80018a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018a6:	460c      	mov	r4, r1
 80018a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018ac:	b10a      	cbz	r2, 80018b2 <_printf_common+0x26>
 80018ae:	3301      	adds	r3, #1
 80018b0:	6033      	str	r3, [r6, #0]
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	0699      	lsls	r1, r3, #26
 80018b6:	bf42      	ittt	mi
 80018b8:	6833      	ldrmi	r3, [r6, #0]
 80018ba:	3302      	addmi	r3, #2
 80018bc:	6033      	strmi	r3, [r6, #0]
 80018be:	6825      	ldr	r5, [r4, #0]
 80018c0:	f015 0506 	ands.w	r5, r5, #6
 80018c4:	d106      	bne.n	80018d4 <_printf_common+0x48>
 80018c6:	f104 0a19 	add.w	sl, r4, #25
 80018ca:	68e3      	ldr	r3, [r4, #12]
 80018cc:	6832      	ldr	r2, [r6, #0]
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	42ab      	cmp	r3, r5
 80018d2:	dc2b      	bgt.n	800192c <_printf_common+0xa0>
 80018d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018d8:	1e13      	subs	r3, r2, #0
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	bf18      	it	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	0692      	lsls	r2, r2, #26
 80018e2:	d430      	bmi.n	8001946 <_printf_common+0xba>
 80018e4:	4649      	mov	r1, r9
 80018e6:	4638      	mov	r0, r7
 80018e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018ec:	47c0      	blx	r8
 80018ee:	3001      	adds	r0, #1
 80018f0:	d023      	beq.n	800193a <_printf_common+0xae>
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	6922      	ldr	r2, [r4, #16]
 80018f6:	f003 0306 	and.w	r3, r3, #6
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf14      	ite	ne
 80018fe:	2500      	movne	r5, #0
 8001900:	6833      	ldreq	r3, [r6, #0]
 8001902:	f04f 0600 	mov.w	r6, #0
 8001906:	bf08      	it	eq
 8001908:	68e5      	ldreq	r5, [r4, #12]
 800190a:	f104 041a 	add.w	r4, r4, #26
 800190e:	bf08      	it	eq
 8001910:	1aed      	subeq	r5, r5, r3
 8001912:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001916:	bf08      	it	eq
 8001918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800191c:	4293      	cmp	r3, r2
 800191e:	bfc4      	itt	gt
 8001920:	1a9b      	subgt	r3, r3, r2
 8001922:	18ed      	addgt	r5, r5, r3
 8001924:	42b5      	cmp	r5, r6
 8001926:	d11a      	bne.n	800195e <_printf_common+0xd2>
 8001928:	2000      	movs	r0, #0
 800192a:	e008      	b.n	800193e <_printf_common+0xb2>
 800192c:	2301      	movs	r3, #1
 800192e:	4652      	mov	r2, sl
 8001930:	4649      	mov	r1, r9
 8001932:	4638      	mov	r0, r7
 8001934:	47c0      	blx	r8
 8001936:	3001      	adds	r0, #1
 8001938:	d103      	bne.n	8001942 <_printf_common+0xb6>
 800193a:	f04f 30ff 	mov.w	r0, #4294967295
 800193e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001942:	3501      	adds	r5, #1
 8001944:	e7c1      	b.n	80018ca <_printf_common+0x3e>
 8001946:	2030      	movs	r0, #48	; 0x30
 8001948:	18e1      	adds	r1, r4, r3
 800194a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001954:	4422      	add	r2, r4
 8001956:	3302      	adds	r3, #2
 8001958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800195c:	e7c2      	b.n	80018e4 <_printf_common+0x58>
 800195e:	2301      	movs	r3, #1
 8001960:	4622      	mov	r2, r4
 8001962:	4649      	mov	r1, r9
 8001964:	4638      	mov	r0, r7
 8001966:	47c0      	blx	r8
 8001968:	3001      	adds	r0, #1
 800196a:	d0e6      	beq.n	800193a <_printf_common+0xae>
 800196c:	3601      	adds	r6, #1
 800196e:	e7d9      	b.n	8001924 <_printf_common+0x98>

08001970 <_printf_i>:
 8001970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001974:	7e0f      	ldrb	r7, [r1, #24]
 8001976:	4691      	mov	r9, r2
 8001978:	2f78      	cmp	r7, #120	; 0x78
 800197a:	4680      	mov	r8, r0
 800197c:	460c      	mov	r4, r1
 800197e:	469a      	mov	sl, r3
 8001980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001986:	d807      	bhi.n	8001998 <_printf_i+0x28>
 8001988:	2f62      	cmp	r7, #98	; 0x62
 800198a:	d80a      	bhi.n	80019a2 <_printf_i+0x32>
 800198c:	2f00      	cmp	r7, #0
 800198e:	f000 80d5 	beq.w	8001b3c <_printf_i+0x1cc>
 8001992:	2f58      	cmp	r7, #88	; 0x58
 8001994:	f000 80c1 	beq.w	8001b1a <_printf_i+0x1aa>
 8001998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800199c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019a0:	e03a      	b.n	8001a18 <_printf_i+0xa8>
 80019a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019a6:	2b15      	cmp	r3, #21
 80019a8:	d8f6      	bhi.n	8001998 <_printf_i+0x28>
 80019aa:	a101      	add	r1, pc, #4	; (adr r1, 80019b0 <_printf_i+0x40>)
 80019ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019b0:	08001a09 	.word	0x08001a09
 80019b4:	08001a1d 	.word	0x08001a1d
 80019b8:	08001999 	.word	0x08001999
 80019bc:	08001999 	.word	0x08001999
 80019c0:	08001999 	.word	0x08001999
 80019c4:	08001999 	.word	0x08001999
 80019c8:	08001a1d 	.word	0x08001a1d
 80019cc:	08001999 	.word	0x08001999
 80019d0:	08001999 	.word	0x08001999
 80019d4:	08001999 	.word	0x08001999
 80019d8:	08001999 	.word	0x08001999
 80019dc:	08001b23 	.word	0x08001b23
 80019e0:	08001a49 	.word	0x08001a49
 80019e4:	08001add 	.word	0x08001add
 80019e8:	08001999 	.word	0x08001999
 80019ec:	08001999 	.word	0x08001999
 80019f0:	08001b45 	.word	0x08001b45
 80019f4:	08001999 	.word	0x08001999
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001999 	.word	0x08001999
 8001a00:	08001999 	.word	0x08001999
 8001a04:	08001ae5 	.word	0x08001ae5
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	1d1a      	adds	r2, r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	602a      	str	r2, [r5, #0]
 8001a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0a0      	b.n	8001b5e <_printf_i+0x1ee>
 8001a1c:	6820      	ldr	r0, [r4, #0]
 8001a1e:	682b      	ldr	r3, [r5, #0]
 8001a20:	0607      	lsls	r7, r0, #24
 8001a22:	f103 0104 	add.w	r1, r3, #4
 8001a26:	6029      	str	r1, [r5, #0]
 8001a28:	d501      	bpl.n	8001a2e <_printf_i+0xbe>
 8001a2a:	681e      	ldr	r6, [r3, #0]
 8001a2c:	e003      	b.n	8001a36 <_printf_i+0xc6>
 8001a2e:	0646      	lsls	r6, r0, #25
 8001a30:	d5fb      	bpl.n	8001a2a <_printf_i+0xba>
 8001a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001a36:	2e00      	cmp	r6, #0
 8001a38:	da03      	bge.n	8001a42 <_printf_i+0xd2>
 8001a3a:	232d      	movs	r3, #45	; 0x2d
 8001a3c:	4276      	negs	r6, r6
 8001a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a42:	230a      	movs	r3, #10
 8001a44:	4859      	ldr	r0, [pc, #356]	; (8001bac <_printf_i+0x23c>)
 8001a46:	e012      	b.n	8001a6e <_printf_i+0xfe>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	6820      	ldr	r0, [r4, #0]
 8001a4c:	1d19      	adds	r1, r3, #4
 8001a4e:	6029      	str	r1, [r5, #0]
 8001a50:	0605      	lsls	r5, r0, #24
 8001a52:	d501      	bpl.n	8001a58 <_printf_i+0xe8>
 8001a54:	681e      	ldr	r6, [r3, #0]
 8001a56:	e002      	b.n	8001a5e <_printf_i+0xee>
 8001a58:	0641      	lsls	r1, r0, #25
 8001a5a:	d5fb      	bpl.n	8001a54 <_printf_i+0xe4>
 8001a5c:	881e      	ldrh	r6, [r3, #0]
 8001a5e:	2f6f      	cmp	r7, #111	; 0x6f
 8001a60:	bf0c      	ite	eq
 8001a62:	2308      	moveq	r3, #8
 8001a64:	230a      	movne	r3, #10
 8001a66:	4851      	ldr	r0, [pc, #324]	; (8001bac <_printf_i+0x23c>)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a6e:	6865      	ldr	r5, [r4, #4]
 8001a70:	2d00      	cmp	r5, #0
 8001a72:	bfa8      	it	ge
 8001a74:	6821      	ldrge	r1, [r4, #0]
 8001a76:	60a5      	str	r5, [r4, #8]
 8001a78:	bfa4      	itt	ge
 8001a7a:	f021 0104 	bicge.w	r1, r1, #4
 8001a7e:	6021      	strge	r1, [r4, #0]
 8001a80:	b90e      	cbnz	r6, 8001a86 <_printf_i+0x116>
 8001a82:	2d00      	cmp	r5, #0
 8001a84:	d04b      	beq.n	8001b1e <_printf_i+0x1ae>
 8001a86:	4615      	mov	r5, r2
 8001a88:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a8c:	fb03 6711 	mls	r7, r3, r1, r6
 8001a90:	5dc7      	ldrb	r7, [r0, r7]
 8001a92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a96:	4637      	mov	r7, r6
 8001a98:	42bb      	cmp	r3, r7
 8001a9a:	460e      	mov	r6, r1
 8001a9c:	d9f4      	bls.n	8001a88 <_printf_i+0x118>
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d10b      	bne.n	8001aba <_printf_i+0x14a>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	07de      	lsls	r6, r3, #31
 8001aa6:	d508      	bpl.n	8001aba <_printf_i+0x14a>
 8001aa8:	6923      	ldr	r3, [r4, #16]
 8001aaa:	6861      	ldr	r1, [r4, #4]
 8001aac:	4299      	cmp	r1, r3
 8001aae:	bfde      	ittt	le
 8001ab0:	2330      	movle	r3, #48	; 0x30
 8001ab2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ab6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001aba:	1b52      	subs	r2, r2, r5
 8001abc:	6122      	str	r2, [r4, #16]
 8001abe:	464b      	mov	r3, r9
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	f8cd a000 	str.w	sl, [sp]
 8001ac8:	aa03      	add	r2, sp, #12
 8001aca:	f7ff fedf 	bl	800188c <_printf_common>
 8001ace:	3001      	adds	r0, #1
 8001ad0:	d14a      	bne.n	8001b68 <_printf_i+0x1f8>
 8001ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad6:	b004      	add	sp, #16
 8001ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	f043 0320 	orr.w	r3, r3, #32
 8001ae2:	6023      	str	r3, [r4, #0]
 8001ae4:	2778      	movs	r7, #120	; 0x78
 8001ae6:	4832      	ldr	r0, [pc, #200]	; (8001bb0 <_printf_i+0x240>)
 8001ae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	6829      	ldr	r1, [r5, #0]
 8001af0:	061f      	lsls	r7, r3, #24
 8001af2:	f851 6b04 	ldr.w	r6, [r1], #4
 8001af6:	d402      	bmi.n	8001afe <_printf_i+0x18e>
 8001af8:	065f      	lsls	r7, r3, #25
 8001afa:	bf48      	it	mi
 8001afc:	b2b6      	uxthmi	r6, r6
 8001afe:	07df      	lsls	r7, r3, #31
 8001b00:	bf48      	it	mi
 8001b02:	f043 0320 	orrmi.w	r3, r3, #32
 8001b06:	6029      	str	r1, [r5, #0]
 8001b08:	bf48      	it	mi
 8001b0a:	6023      	strmi	r3, [r4, #0]
 8001b0c:	b91e      	cbnz	r6, 8001b16 <_printf_i+0x1a6>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f023 0320 	bic.w	r3, r3, #32
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	2310      	movs	r3, #16
 8001b18:	e7a6      	b.n	8001a68 <_printf_i+0xf8>
 8001b1a:	4824      	ldr	r0, [pc, #144]	; (8001bac <_printf_i+0x23c>)
 8001b1c:	e7e4      	b.n	8001ae8 <_printf_i+0x178>
 8001b1e:	4615      	mov	r5, r2
 8001b20:	e7bd      	b.n	8001a9e <_printf_i+0x12e>
 8001b22:	682b      	ldr	r3, [r5, #0]
 8001b24:	6826      	ldr	r6, [r4, #0]
 8001b26:	1d18      	adds	r0, r3, #4
 8001b28:	6961      	ldr	r1, [r4, #20]
 8001b2a:	6028      	str	r0, [r5, #0]
 8001b2c:	0635      	lsls	r5, r6, #24
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	d501      	bpl.n	8001b36 <_printf_i+0x1c6>
 8001b32:	6019      	str	r1, [r3, #0]
 8001b34:	e002      	b.n	8001b3c <_printf_i+0x1cc>
 8001b36:	0670      	lsls	r0, r6, #25
 8001b38:	d5fb      	bpl.n	8001b32 <_printf_i+0x1c2>
 8001b3a:	8019      	strh	r1, [r3, #0]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4615      	mov	r5, r2
 8001b40:	6123      	str	r3, [r4, #16]
 8001b42:	e7bc      	b.n	8001abe <_printf_i+0x14e>
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	2100      	movs	r1, #0
 8001b48:	1d1a      	adds	r2, r3, #4
 8001b4a:	602a      	str	r2, [r5, #0]
 8001b4c:	681d      	ldr	r5, [r3, #0]
 8001b4e:	6862      	ldr	r2, [r4, #4]
 8001b50:	4628      	mov	r0, r5
 8001b52:	f000 f97f 	bl	8001e54 <memchr>
 8001b56:	b108      	cbz	r0, 8001b5c <_printf_i+0x1ec>
 8001b58:	1b40      	subs	r0, r0, r5
 8001b5a:	6060      	str	r0, [r4, #4]
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	6123      	str	r3, [r4, #16]
 8001b60:	2300      	movs	r3, #0
 8001b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b66:	e7aa      	b.n	8001abe <_printf_i+0x14e>
 8001b68:	462a      	mov	r2, r5
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	6923      	ldr	r3, [r4, #16]
 8001b70:	47d0      	blx	sl
 8001b72:	3001      	adds	r0, #1
 8001b74:	d0ad      	beq.n	8001ad2 <_printf_i+0x162>
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	079b      	lsls	r3, r3, #30
 8001b7a:	d413      	bmi.n	8001ba4 <_printf_i+0x234>
 8001b7c:	68e0      	ldr	r0, [r4, #12]
 8001b7e:	9b03      	ldr	r3, [sp, #12]
 8001b80:	4298      	cmp	r0, r3
 8001b82:	bfb8      	it	lt
 8001b84:	4618      	movlt	r0, r3
 8001b86:	e7a6      	b.n	8001ad6 <_printf_i+0x166>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	4632      	mov	r2, r6
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	4640      	mov	r0, r8
 8001b90:	47d0      	blx	sl
 8001b92:	3001      	adds	r0, #1
 8001b94:	d09d      	beq.n	8001ad2 <_printf_i+0x162>
 8001b96:	3501      	adds	r5, #1
 8001b98:	68e3      	ldr	r3, [r4, #12]
 8001b9a:	9903      	ldr	r1, [sp, #12]
 8001b9c:	1a5b      	subs	r3, r3, r1
 8001b9e:	42ab      	cmp	r3, r5
 8001ba0:	dcf2      	bgt.n	8001b88 <_printf_i+0x218>
 8001ba2:	e7eb      	b.n	8001b7c <_printf_i+0x20c>
 8001ba4:	2500      	movs	r5, #0
 8001ba6:	f104 0619 	add.w	r6, r4, #25
 8001baa:	e7f5      	b.n	8001b98 <_printf_i+0x228>
 8001bac:	08001fec 	.word	0x08001fec
 8001bb0:	08001ffd 	.word	0x08001ffd

08001bb4 <__sflush_r>:
 8001bb4:	898a      	ldrh	r2, [r1, #12]
 8001bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb8:	4605      	mov	r5, r0
 8001bba:	0710      	lsls	r0, r2, #28
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	d457      	bmi.n	8001c70 <__sflush_r+0xbc>
 8001bc0:	684b      	ldr	r3, [r1, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	dc04      	bgt.n	8001bd0 <__sflush_r+0x1c>
 8001bc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dc01      	bgt.n	8001bd0 <__sflush_r+0x1c>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	d0fa      	beq.n	8001bcc <__sflush_r+0x18>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bdc:	682f      	ldr	r7, [r5, #0]
 8001bde:	6a21      	ldr	r1, [r4, #32]
 8001be0:	602b      	str	r3, [r5, #0]
 8001be2:	d032      	beq.n	8001c4a <__sflush_r+0x96>
 8001be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001be6:	89a3      	ldrh	r3, [r4, #12]
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	d505      	bpl.n	8001bf8 <__sflush_r+0x44>
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	1ac0      	subs	r0, r0, r3
 8001bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bf2:	b10b      	cbz	r3, 8001bf8 <__sflush_r+0x44>
 8001bf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bf6:	1ac0      	subs	r0, r0, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bfe:	4628      	mov	r0, r5
 8001c00:	6a21      	ldr	r1, [r4, #32]
 8001c02:	47b0      	blx	r6
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	89a3      	ldrh	r3, [r4, #12]
 8001c08:	d106      	bne.n	8001c18 <__sflush_r+0x64>
 8001c0a:	6829      	ldr	r1, [r5, #0]
 8001c0c:	291d      	cmp	r1, #29
 8001c0e:	d82b      	bhi.n	8001c68 <__sflush_r+0xb4>
 8001c10:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <__sflush_r+0x100>)
 8001c12:	410a      	asrs	r2, r1
 8001c14:	07d6      	lsls	r6, r2, #31
 8001c16:	d427      	bmi.n	8001c68 <__sflush_r+0xb4>
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6062      	str	r2, [r4, #4]
 8001c1c:	6922      	ldr	r2, [r4, #16]
 8001c1e:	04d9      	lsls	r1, r3, #19
 8001c20:	6022      	str	r2, [r4, #0]
 8001c22:	d504      	bpl.n	8001c2e <__sflush_r+0x7a>
 8001c24:	1c42      	adds	r2, r0, #1
 8001c26:	d101      	bne.n	8001c2c <__sflush_r+0x78>
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	b903      	cbnz	r3, 8001c2e <__sflush_r+0x7a>
 8001c2c:	6560      	str	r0, [r4, #84]	; 0x54
 8001c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c30:	602f      	str	r7, [r5, #0]
 8001c32:	2900      	cmp	r1, #0
 8001c34:	d0ca      	beq.n	8001bcc <__sflush_r+0x18>
 8001c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c3a:	4299      	cmp	r1, r3
 8001c3c:	d002      	beq.n	8001c44 <__sflush_r+0x90>
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f7ff fbee 	bl	8001420 <_free_r>
 8001c44:	2000      	movs	r0, #0
 8001c46:	6360      	str	r0, [r4, #52]	; 0x34
 8001c48:	e7c1      	b.n	8001bce <__sflush_r+0x1a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	47b0      	blx	r6
 8001c50:	1c41      	adds	r1, r0, #1
 8001c52:	d1c8      	bne.n	8001be6 <__sflush_r+0x32>
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0c5      	beq.n	8001be6 <__sflush_r+0x32>
 8001c5a:	2b1d      	cmp	r3, #29
 8001c5c:	d001      	beq.n	8001c62 <__sflush_r+0xae>
 8001c5e:	2b16      	cmp	r3, #22
 8001c60:	d101      	bne.n	8001c66 <__sflush_r+0xb2>
 8001c62:	602f      	str	r7, [r5, #0]
 8001c64:	e7b2      	b.n	8001bcc <__sflush_r+0x18>
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	e7ae      	b.n	8001bce <__sflush_r+0x1a>
 8001c70:	690f      	ldr	r7, [r1, #16]
 8001c72:	2f00      	cmp	r7, #0
 8001c74:	d0aa      	beq.n	8001bcc <__sflush_r+0x18>
 8001c76:	0793      	lsls	r3, r2, #30
 8001c78:	bf18      	it	ne
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	680e      	ldr	r6, [r1, #0]
 8001c7e:	bf08      	it	eq
 8001c80:	694b      	ldreq	r3, [r1, #20]
 8001c82:	1bf6      	subs	r6, r6, r7
 8001c84:	600f      	str	r7, [r1, #0]
 8001c86:	608b      	str	r3, [r1, #8]
 8001c88:	2e00      	cmp	r6, #0
 8001c8a:	dd9f      	ble.n	8001bcc <__sflush_r+0x18>
 8001c8c:	4633      	mov	r3, r6
 8001c8e:	463a      	mov	r2, r7
 8001c90:	4628      	mov	r0, r5
 8001c92:	6a21      	ldr	r1, [r4, #32]
 8001c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001c98:	47e0      	blx	ip
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	dc06      	bgt.n	8001cac <__sflush_r+0xf8>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca8:	81a3      	strh	r3, [r4, #12]
 8001caa:	e790      	b.n	8001bce <__sflush_r+0x1a>
 8001cac:	4407      	add	r7, r0
 8001cae:	1a36      	subs	r6, r6, r0
 8001cb0:	e7ea      	b.n	8001c88 <__sflush_r+0xd4>
 8001cb2:	bf00      	nop
 8001cb4:	dfbffffe 	.word	0xdfbffffe

08001cb8 <_fflush_r>:
 8001cb8:	b538      	push	{r3, r4, r5, lr}
 8001cba:	690b      	ldr	r3, [r1, #16]
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	b913      	cbnz	r3, 8001cc8 <_fflush_r+0x10>
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	bd38      	pop	{r3, r4, r5, pc}
 8001cc8:	b118      	cbz	r0, 8001cd2 <_fflush_r+0x1a>
 8001cca:	6a03      	ldr	r3, [r0, #32]
 8001ccc:	b90b      	cbnz	r3, 8001cd2 <_fflush_r+0x1a>
 8001cce:	f7ff fa9f 	bl	8001210 <__sinit>
 8001cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f3      	beq.n	8001cc2 <_fflush_r+0xa>
 8001cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cdc:	07d0      	lsls	r0, r2, #31
 8001cde:	d404      	bmi.n	8001cea <_fflush_r+0x32>
 8001ce0:	0599      	lsls	r1, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_fflush_r+0x32>
 8001ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ce6:	f7ff fb98 	bl	800141a <__retarget_lock_acquire_recursive>
 8001cea:	4628      	mov	r0, r5
 8001cec:	4621      	mov	r1, r4
 8001cee:	f7ff ff61 	bl	8001bb4 <__sflush_r>
 8001cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cf4:	4605      	mov	r5, r0
 8001cf6:	07da      	lsls	r2, r3, #31
 8001cf8:	d4e4      	bmi.n	8001cc4 <_fflush_r+0xc>
 8001cfa:	89a3      	ldrh	r3, [r4, #12]
 8001cfc:	059b      	lsls	r3, r3, #22
 8001cfe:	d4e1      	bmi.n	8001cc4 <_fflush_r+0xc>
 8001d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d02:	f7ff fb8b 	bl	800141c <__retarget_lock_release_recursive>
 8001d06:	e7dd      	b.n	8001cc4 <_fflush_r+0xc>

08001d08 <__swbuf_r>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	460e      	mov	r6, r1
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	4605      	mov	r5, r0
 8001d10:	b118      	cbz	r0, 8001d1a <__swbuf_r+0x12>
 8001d12:	6a03      	ldr	r3, [r0, #32]
 8001d14:	b90b      	cbnz	r3, 8001d1a <__swbuf_r+0x12>
 8001d16:	f7ff fa7b 	bl	8001210 <__sinit>
 8001d1a:	69a3      	ldr	r3, [r4, #24]
 8001d1c:	60a3      	str	r3, [r4, #8]
 8001d1e:	89a3      	ldrh	r3, [r4, #12]
 8001d20:	071a      	lsls	r2, r3, #28
 8001d22:	d525      	bpl.n	8001d70 <__swbuf_r+0x68>
 8001d24:	6923      	ldr	r3, [r4, #16]
 8001d26:	b31b      	cbz	r3, 8001d70 <__swbuf_r+0x68>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	6922      	ldr	r2, [r4, #16]
 8001d2c:	b2f6      	uxtb	r6, r6
 8001d2e:	1a98      	subs	r0, r3, r2
 8001d30:	6963      	ldr	r3, [r4, #20]
 8001d32:	4637      	mov	r7, r6
 8001d34:	4283      	cmp	r3, r0
 8001d36:	dc04      	bgt.n	8001d42 <__swbuf_r+0x3a>
 8001d38:	4621      	mov	r1, r4
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f7ff ffbc 	bl	8001cb8 <_fflush_r>
 8001d40:	b9e0      	cbnz	r0, 8001d7c <__swbuf_r+0x74>
 8001d42:	68a3      	ldr	r3, [r4, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60a3      	str	r3, [r4, #8]
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	6022      	str	r2, [r4, #0]
 8001d4e:	701e      	strb	r6, [r3, #0]
 8001d50:	6962      	ldr	r2, [r4, #20]
 8001d52:	1c43      	adds	r3, r0, #1
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d004      	beq.n	8001d62 <__swbuf_r+0x5a>
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	07db      	lsls	r3, r3, #31
 8001d5c:	d506      	bpl.n	8001d6c <__swbuf_r+0x64>
 8001d5e:	2e0a      	cmp	r6, #10
 8001d60:	d104      	bne.n	8001d6c <__swbuf_r+0x64>
 8001d62:	4621      	mov	r1, r4
 8001d64:	4628      	mov	r0, r5
 8001d66:	f7ff ffa7 	bl	8001cb8 <_fflush_r>
 8001d6a:	b938      	cbnz	r0, 8001d7c <__swbuf_r+0x74>
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d70:	4621      	mov	r1, r4
 8001d72:	4628      	mov	r0, r5
 8001d74:	f000 f806 	bl	8001d84 <__swsetup_r>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d0d5      	beq.n	8001d28 <__swbuf_r+0x20>
 8001d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8001d80:	e7f4      	b.n	8001d6c <__swbuf_r+0x64>
	...

08001d84 <__swsetup_r>:
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <__swsetup_r+0xac>)
 8001d88:	4605      	mov	r5, r0
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	b118      	cbz	r0, 8001d98 <__swsetup_r+0x14>
 8001d90:	6a03      	ldr	r3, [r0, #32]
 8001d92:	b90b      	cbnz	r3, 8001d98 <__swsetup_r+0x14>
 8001d94:	f7ff fa3c 	bl	8001210 <__sinit>
 8001d98:	89a3      	ldrh	r3, [r4, #12]
 8001d9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d9e:	0718      	lsls	r0, r3, #28
 8001da0:	d422      	bmi.n	8001de8 <__swsetup_r+0x64>
 8001da2:	06d9      	lsls	r1, r3, #27
 8001da4:	d407      	bmi.n	8001db6 <__swsetup_r+0x32>
 8001da6:	2309      	movs	r3, #9
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	81a3      	strh	r3, [r4, #12]
 8001db4:	e034      	b.n	8001e20 <__swsetup_r+0x9c>
 8001db6:	0758      	lsls	r0, r3, #29
 8001db8:	d512      	bpl.n	8001de0 <__swsetup_r+0x5c>
 8001dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dbc:	b141      	cbz	r1, 8001dd0 <__swsetup_r+0x4c>
 8001dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001dc2:	4299      	cmp	r1, r3
 8001dc4:	d002      	beq.n	8001dcc <__swsetup_r+0x48>
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7ff fb2a 	bl	8001420 <_free_r>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6363      	str	r3, [r4, #52]	; 0x34
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001dd6:	81a3      	strh	r3, [r4, #12]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6063      	str	r3, [r4, #4]
 8001ddc:	6923      	ldr	r3, [r4, #16]
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	89a3      	ldrh	r3, [r4, #12]
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	81a3      	strh	r3, [r4, #12]
 8001de8:	6923      	ldr	r3, [r4, #16]
 8001dea:	b94b      	cbnz	r3, 8001e00 <__swsetup_r+0x7c>
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df6:	d003      	beq.n	8001e00 <__swsetup_r+0x7c>
 8001df8:	4621      	mov	r1, r4
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f000 f85d 	bl	8001eba <__smakebuf_r>
 8001e00:	89a0      	ldrh	r0, [r4, #12]
 8001e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e06:	f010 0301 	ands.w	r3, r0, #1
 8001e0a:	d00a      	beq.n	8001e22 <__swsetup_r+0x9e>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60a3      	str	r3, [r4, #8]
 8001e10:	6963      	ldr	r3, [r4, #20]
 8001e12:	425b      	negs	r3, r3
 8001e14:	61a3      	str	r3, [r4, #24]
 8001e16:	6923      	ldr	r3, [r4, #16]
 8001e18:	b943      	cbnz	r3, 8001e2c <__swsetup_r+0xa8>
 8001e1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e1e:	d1c4      	bne.n	8001daa <__swsetup_r+0x26>
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	0781      	lsls	r1, r0, #30
 8001e24:	bf58      	it	pl
 8001e26:	6963      	ldrpl	r3, [r4, #20]
 8001e28:	60a3      	str	r3, [r4, #8]
 8001e2a:	e7f4      	b.n	8001e16 <__swsetup_r+0x92>
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	e7f7      	b.n	8001e20 <__swsetup_r+0x9c>
 8001e30:	20000068 	.word	0x20000068

08001e34 <_sbrk_r>:
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	2300      	movs	r3, #0
 8001e38:	4d05      	ldr	r5, [pc, #20]	; (8001e50 <_sbrk_r+0x1c>)
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	602b      	str	r3, [r5, #0]
 8001e40:	f7ff f8fa 	bl	8001038 <_sbrk>
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	d102      	bne.n	8001e4e <_sbrk_r+0x1a>
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	b103      	cbz	r3, 8001e4e <_sbrk_r+0x1a>
 8001e4c:	6023      	str	r3, [r4, #0]
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
 8001e50:	20000228 	.word	0x20000228

08001e54 <memchr>:
 8001e54:	4603      	mov	r3, r0
 8001e56:	b510      	push	{r4, lr}
 8001e58:	b2c9      	uxtb	r1, r1
 8001e5a:	4402      	add	r2, r0
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	d101      	bne.n	8001e66 <memchr+0x12>
 8001e62:	2000      	movs	r0, #0
 8001e64:	e003      	b.n	8001e6e <memchr+0x1a>
 8001e66:	7804      	ldrb	r4, [r0, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	428c      	cmp	r4, r1
 8001e6c:	d1f6      	bne.n	8001e5c <memchr+0x8>
 8001e6e:	bd10      	pop	{r4, pc}

08001e70 <__swhatbuf_r>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	460c      	mov	r4, r1
 8001e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e78:	4615      	mov	r5, r2
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	461e      	mov	r6, r3
 8001e7e:	b096      	sub	sp, #88	; 0x58
 8001e80:	da0c      	bge.n	8001e9c <__swhatbuf_r+0x2c>
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	2100      	movs	r1, #0
 8001e86:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e8a:	bf0c      	ite	eq
 8001e8c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001e90:	2340      	movne	r3, #64	; 0x40
 8001e92:	2000      	movs	r0, #0
 8001e94:	6031      	str	r1, [r6, #0]
 8001e96:	602b      	str	r3, [r5, #0]
 8001e98:	b016      	add	sp, #88	; 0x58
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
 8001e9c:	466a      	mov	r2, sp
 8001e9e:	f000 f849 	bl	8001f34 <_fstat_r>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	dbed      	blt.n	8001e82 <__swhatbuf_r+0x12>
 8001ea6:	9901      	ldr	r1, [sp, #4]
 8001ea8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001eac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001eb0:	4259      	negs	r1, r3
 8001eb2:	4159      	adcs	r1, r3
 8001eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb8:	e7eb      	b.n	8001e92 <__swhatbuf_r+0x22>

08001eba <__smakebuf_r>:
 8001eba:	898b      	ldrh	r3, [r1, #12]
 8001ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ebe:	079d      	lsls	r5, r3, #30
 8001ec0:	4606      	mov	r6, r0
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	d507      	bpl.n	8001ed6 <__smakebuf_r+0x1c>
 8001ec6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001eca:	6023      	str	r3, [r4, #0]
 8001ecc:	6123      	str	r3, [r4, #16]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6163      	str	r3, [r4, #20]
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd70      	pop	{r4, r5, r6, pc}
 8001ed6:	466a      	mov	r2, sp
 8001ed8:	ab01      	add	r3, sp, #4
 8001eda:	f7ff ffc9 	bl	8001e70 <__swhatbuf_r>
 8001ede:	9900      	ldr	r1, [sp, #0]
 8001ee0:	4605      	mov	r5, r0
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f7ff fb04 	bl	80014f0 <_malloc_r>
 8001ee8:	b948      	cbnz	r0, 8001efe <__smakebuf_r+0x44>
 8001eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eee:	059a      	lsls	r2, r3, #22
 8001ef0:	d4ef      	bmi.n	8001ed2 <__smakebuf_r+0x18>
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	e7e3      	b.n	8001ec6 <__smakebuf_r+0xc>
 8001efe:	89a3      	ldrh	r3, [r4, #12]
 8001f00:	6020      	str	r0, [r4, #0]
 8001f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f06:	81a3      	strh	r3, [r4, #12]
 8001f08:	9b00      	ldr	r3, [sp, #0]
 8001f0a:	6120      	str	r0, [r4, #16]
 8001f0c:	6163      	str	r3, [r4, #20]
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	b15b      	cbz	r3, 8001f2a <__smakebuf_r+0x70>
 8001f12:	4630      	mov	r0, r6
 8001f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f18:	f000 f81e 	bl	8001f58 <_isatty_r>
 8001f1c:	b128      	cbz	r0, 8001f2a <__smakebuf_r+0x70>
 8001f1e:	89a3      	ldrh	r3, [r4, #12]
 8001f20:	f023 0303 	bic.w	r3, r3, #3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	81a3      	strh	r3, [r4, #12]
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	431d      	orrs	r5, r3
 8001f2e:	81a5      	strh	r5, [r4, #12]
 8001f30:	e7cf      	b.n	8001ed2 <__smakebuf_r+0x18>
	...

08001f34 <_fstat_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	2300      	movs	r3, #0
 8001f38:	4d06      	ldr	r5, [pc, #24]	; (8001f54 <_fstat_r+0x20>)
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	f7ff f853 	bl	8000fec <_fstat>
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	d102      	bne.n	8001f50 <_fstat_r+0x1c>
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	b103      	cbz	r3, 8001f50 <_fstat_r+0x1c>
 8001f4e:	6023      	str	r3, [r4, #0]
 8001f50:	bd38      	pop	{r3, r4, r5, pc}
 8001f52:	bf00      	nop
 8001f54:	20000228 	.word	0x20000228

08001f58 <_isatty_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4d05      	ldr	r5, [pc, #20]	; (8001f74 <_isatty_r+0x1c>)
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	602b      	str	r3, [r5, #0]
 8001f64:	f7ff f851 	bl	800100a <_isatty>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d102      	bne.n	8001f72 <_isatty_r+0x1a>
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	b103      	cbz	r3, 8001f72 <_isatty_r+0x1a>
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	20000228 	.word	0x20000228

08001f78 <_init>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr

08001f84 <_fini>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	bf00      	nop
 8001f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8a:	bc08      	pop	{r3}
 8001f8c:	469e      	mov	lr, r3
 8001f8e:	4770      	bx	lr
