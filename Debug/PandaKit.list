
PandaKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c68  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001df0  08001df0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08001df0  08001df0  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001df0  08001df0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001df4  08001df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08001df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200000b4  08001eac  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08001eac  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002dc7  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ee2  00000000  00000000  00022ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  00023dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034a7  00000000  00000000  00024158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f31  00000000  00000000  000275ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b331  00000000  00000000  0002c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000273  00000000  00000000  00037861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000012b8  00000000  00000000  00037ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00038d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000b4 	.word	0x200000b4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d80 	.word	0x08001d80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000b8 	.word	0x200000b8
 800016c:	08001d80 	.word	0x08001d80

08000170 <KeyPad_vInit>:
extern GPIO_Pins Keypad_RowsArr[4];

extern GPIO_Pins Keypad_ColuArr[4];

// Define functions to initialize keypad and get key
void KeyPad_vInit(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// Initialize GPIO pins for keypad rows as outputs

	// Assign pin names to keypad row array
	Keypad_RowsArr[0] = row1_config.PIN_Name;
 8000174:	4b1c      	ldr	r3, [pc, #112]	; (80001e8 <KeyPad_vInit+0x78>)
 8000176:	785a      	ldrb	r2, [r3, #1]
 8000178:	4b1c      	ldr	r3, [pc, #112]	; (80001ec <KeyPad_vInit+0x7c>)
 800017a:	701a      	strb	r2, [r3, #0]
	Keypad_RowsArr[1] = row2_config.PIN_Name;
 800017c:	4b1c      	ldr	r3, [pc, #112]	; (80001f0 <KeyPad_vInit+0x80>)
 800017e:	785a      	ldrb	r2, [r3, #1]
 8000180:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <KeyPad_vInit+0x7c>)
 8000182:	705a      	strb	r2, [r3, #1]
	Keypad_RowsArr[2] = row3_config.PIN_Name;
 8000184:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <KeyPad_vInit+0x84>)
 8000186:	785a      	ldrb	r2, [r3, #1]
 8000188:	4b18      	ldr	r3, [pc, #96]	; (80001ec <KeyPad_vInit+0x7c>)
 800018a:	709a      	strb	r2, [r3, #2]
	Keypad_RowsArr[3] = row4_config.PIN_Name;
 800018c:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <KeyPad_vInit+0x88>)
 800018e:	785a      	ldrb	r2, [r3, #1]
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <KeyPad_vInit+0x7c>)
 8000192:	70da      	strb	r2, [r3, #3]

	// Assign pin names to keypad column array
	Keypad_ColuArr[0] = col1_config.PIN_Name;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <KeyPad_vInit+0x8c>)
 8000196:	785a      	ldrb	r2, [r3, #1]
 8000198:	4b19      	ldr	r3, [pc, #100]	; (8000200 <KeyPad_vInit+0x90>)
 800019a:	701a      	strb	r2, [r3, #0]
	Keypad_ColuArr[1] = col2_config.PIN_Name;
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <KeyPad_vInit+0x94>)
 800019e:	785a      	ldrb	r2, [r3, #1]
 80001a0:	4b17      	ldr	r3, [pc, #92]	; (8000200 <KeyPad_vInit+0x90>)
 80001a2:	705a      	strb	r2, [r3, #1]
	Keypad_ColuArr[2] = col3_config.PIN_Name;
 80001a4:	4b18      	ldr	r3, [pc, #96]	; (8000208 <KeyPad_vInit+0x98>)
 80001a6:	785a      	ldrb	r2, [r3, #1]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <KeyPad_vInit+0x90>)
 80001aa:	709a      	strb	r2, [r3, #2]
	Keypad_ColuArr[3] = col4_config.PIN_Name;
 80001ac:	4b17      	ldr	r3, [pc, #92]	; (800020c <KeyPad_vInit+0x9c>)
 80001ae:	785a      	ldrb	r2, [r3, #1]
 80001b0:	4b13      	ldr	r3, [pc, #76]	; (8000200 <KeyPad_vInit+0x90>)
 80001b2:	70da      	strb	r2, [r3, #3]

	GPIO_RETURNtPinInit(&row1_config);
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <KeyPad_vInit+0x78>)
 80001b6:	f000 fa2d 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&row2_config);
 80001ba:	480d      	ldr	r0, [pc, #52]	; (80001f0 <KeyPad_vInit+0x80>)
 80001bc:	f000 fa2a 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&row3_config);
 80001c0:	480c      	ldr	r0, [pc, #48]	; (80001f4 <KeyPad_vInit+0x84>)
 80001c2:	f000 fa27 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&row4_config);
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <KeyPad_vInit+0x88>)
 80001c8:	f000 fa24 	bl	8000614 <GPIO_RETURNtPinInit>

	GPIO_RETURNtPinInit(&col1_config);
 80001cc:	480b      	ldr	r0, [pc, #44]	; (80001fc <KeyPad_vInit+0x8c>)
 80001ce:	f000 fa21 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&col2_config);
 80001d2:	480c      	ldr	r0, [pc, #48]	; (8000204 <KeyPad_vInit+0x94>)
 80001d4:	f000 fa1e 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&col3_config);
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <KeyPad_vInit+0x98>)
 80001da:	f000 fa1b 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&col4_config);
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <KeyPad_vInit+0x9c>)
 80001e0:	f000 fa18 	bl	8000614 <GPIO_RETURNtPinInit>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000000 	.word	0x20000000
 80001ec:	200000d0 	.word	0x200000d0
 80001f0:	20000004 	.word	0x20000004
 80001f4:	20000008 	.word	0x20000008
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010
 8000200:	200000d4 	.word	0x200000d4
 8000204:	20000014 	.word	0x20000014
 8000208:	20000018 	.word	0x20000018
 800020c:	2000001c 	.word	0x2000001c

08000210 <KeyPad_u8GetKey>:

uint8_t KeyPad_u8GetKey(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
	uint8_t key = NO_KEY;
 8000216:	2323      	movs	r3, #35	; 0x23
 8000218:	71fb      	strb	r3, [r7, #7]

	for (uint8_t ROW = 0; ROW < KEYPAD_RWOS; ROW++) {
 800021a:	2300      	movs	r3, #0
 800021c:	71bb      	strb	r3, [r7, #6]
 800021e:	e038      	b.n	8000292 <KeyPad_u8GetKey+0x82>

		GPIO_RETURNtPinOut(GPIO_PORTA, Keypad_RowsArr[ROW], LOW_O);
 8000220:	79bb      	ldrb	r3, [r7, #6]
 8000222:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <KeyPad_u8GetKey+0x94>)
 8000224:	5cd3      	ldrb	r3, [r2, r3]
 8000226:	2200      	movs	r2, #0
 8000228:	4619      	mov	r1, r3
 800022a:	2000      	movs	r0, #0
 800022c:	f000 fa7e 	bl	800072c <GPIO_RETURNtPinOut>

		// Iterate over columns
		for (uint8_t COL = 0; COL < KEYPAD_COLUMNS; COL++) {
 8000230:	2300      	movs	r3, #0
 8000232:	717b      	strb	r3, [r7, #5]
 8000234:	e01f      	b.n	8000276 <KeyPad_u8GetKey+0x66>
			// Read the state of the current column

			if (GPIO_u8PinRead(GPIO_PORTB, Keypad_ColuArr[COL]) == LOW_O) {
 8000236:	797b      	ldrb	r3, [r7, #5]
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <KeyPad_u8GetKey+0x98>)
 800023a:	5cd3      	ldrb	r3, [r2, r3]
 800023c:	4619      	mov	r1, r3
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fabc 	bl	80007bc <GPIO_u8PinRead>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d112      	bne.n	8000270 <KeyPad_u8GetKey+0x60>
				// Return the character corresponding to the pressed key
				key = KeyPad_KeysConfgArr[ROW][COL];
 800024a:	79ba      	ldrb	r2, [r7, #6]
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	4917      	ldr	r1, [pc, #92]	; (80002ac <KeyPad_u8GetKey+0x9c>)
 8000250:	0092      	lsls	r2, r2, #2
 8000252:	440a      	add	r2, r1
 8000254:	4413      	add	r3, r2
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	71fb      	strb	r3, [r7, #7]
				while (GPIO_u8PinRead(GPIO_PORTB, Keypad_ColuArr[COL]) == LOW_O);
 800025a:	bf00      	nop
 800025c:	797b      	ldrb	r3, [r7, #5]
 800025e:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <KeyPad_u8GetKey+0x98>)
 8000260:	5cd3      	ldrb	r3, [r2, r3]
 8000262:	4619      	mov	r1, r3
 8000264:	2001      	movs	r0, #1
 8000266:	f000 faa9 	bl	80007bc <GPIO_u8PinRead>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f5      	beq.n	800025c <KeyPad_u8GetKey+0x4c>
		for (uint8_t COL = 0; COL < KEYPAD_COLUMNS; COL++) {
 8000270:	797b      	ldrb	r3, [r7, #5]
 8000272:	3301      	adds	r3, #1
 8000274:	717b      	strb	r3, [r7, #5]
 8000276:	797b      	ldrb	r3, [r7, #5]
 8000278:	2b03      	cmp	r3, #3
 800027a:	d9dc      	bls.n	8000236 <KeyPad_u8GetKey+0x26>

			}
		}

		// Reset current row to LOW for next iteration
		GPIO_RETURNtPinOut(GPIO_PORTA, Keypad_RowsArr[ROW], High_O);
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <KeyPad_u8GetKey+0x94>)
 8000280:	5cd3      	ldrb	r3, [r2, r3]
 8000282:	2201      	movs	r2, #1
 8000284:	4619      	mov	r1, r3
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fa50 	bl	800072c <GPIO_RETURNtPinOut>
	for (uint8_t ROW = 0; ROW < KEYPAD_RWOS; ROW++) {
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	3301      	adds	r3, #1
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d9c3      	bls.n	8000220 <KeyPad_u8GetKey+0x10>
	}

	// If no key is pressed, return NO_KEY
	return key;
 8000298:	79fb      	ldrb	r3, [r7, #7]
}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	200000d0 	.word	0x200000d0
 80002a8:	200000d4 	.word	0x200000d4
 80002ac:	20000020 	.word	0x20000020

080002b0 <WriteInsterction>:

/* check mode is 4 bit or 8 bit */

#elif LCD_MODE==_4_BIT

static void WriteInsterction(uint8_t ins) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, LOW_O);
 80002ba:	2200      	movs	r2, #0
 80002bc:	210b      	movs	r1, #11
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 fa34 	bl	800072c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 7));
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	09db      	lsrs	r3, r3, #7
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	210c      	movs	r1, #12
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 fa2c 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 6));
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	099b      	lsrs	r3, r3, #6
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	210d      	movs	r1, #13
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 fa21 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 5));
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	095b      	lsrs	r3, r3, #5
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	210e      	movs	r1, #14
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fa16 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 4));
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	b2db      	uxtb	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	210f      	movs	r1, #15
 8000310:	2001      	movs	r0, #1
 8000312:	f000 fa0b 	bl	800072c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 8000316:	2201      	movs	r2, #1
 8000318:	2108      	movs	r1, #8
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fa06 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000320:	2001      	movs	r0, #1
 8000322:	f000 fc0f 	bl	8000b44 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 8000326:	2200      	movs	r2, #0
 8000328:	2108      	movs	r1, #8
 800032a:	2000      	movs	r0, #0
 800032c:	f000 f9fe 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f000 fc07 	bl	8000b44 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 3));
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	210c      	movs	r1, #12
 8000346:	2001      	movs	r0, #1
 8000348:	f000 f9f0 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 2));
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	b2db      	uxtb	r3, r3
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	210d      	movs	r1, #13
 800035c:	2001      	movs	r0, #1
 800035e:	f000 f9e5 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 1));
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	085b      	lsrs	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	210e      	movs	r1, #14
 8000372:	2001      	movs	r0, #1
 8000374:	f000 f9da 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 0));
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	210f      	movs	r1, #15
 8000384:	2001      	movs	r0, #1
 8000386:	f000 f9d1 	bl	800072c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800038a:	2201      	movs	r2, #1
 800038c:	2108      	movs	r1, #8
 800038e:	2000      	movs	r0, #0
 8000390:	f000 f9cc 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000394:	2001      	movs	r0, #1
 8000396:	f000 fbd5 	bl	8000b44 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800039a:	2200      	movs	r2, #0
 800039c:	2108      	movs	r1, #8
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 f9c4 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fbcd 	bl	8000b44 <SysTick_vDelayms>

}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <WriteData>:

static void WriteData(uint8_t data) {
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, High_O);
 80003bc:	2201      	movs	r2, #1
 80003be:	210b      	movs	r1, #11
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 f9b3 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 7));
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	09db      	lsrs	r3, r3, #7
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	210c      	movs	r1, #12
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 f9ab 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 6));
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	099b      	lsrs	r3, r3, #6
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	210d      	movs	r1, #13
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 f9a0 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 5));
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	095b      	lsrs	r3, r3, #5
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	210e      	movs	r1, #14
 80003fc:	2001      	movs	r0, #1
 80003fe:	f000 f995 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 4));
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	091b      	lsrs	r3, r3, #4
 8000406:	b2db      	uxtb	r3, r3
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	b2db      	uxtb	r3, r3
 800040e:	461a      	mov	r2, r3
 8000410:	210f      	movs	r1, #15
 8000412:	2001      	movs	r0, #1
 8000414:	f000 f98a 	bl	800072c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 8000418:	2201      	movs	r2, #1
 800041a:	2108      	movs	r1, #8
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f985 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000422:	2001      	movs	r0, #1
 8000424:	f000 fb8e 	bl	8000b44 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f97d 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f000 fb86 	bl	8000b44 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 3));
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	08db      	lsrs	r3, r3, #3
 800043c:	b2db      	uxtb	r3, r3
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	461a      	mov	r2, r3
 8000446:	210c      	movs	r1, #12
 8000448:	2001      	movs	r0, #1
 800044a:	f000 f96f 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 2));
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	089b      	lsrs	r3, r3, #2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	210d      	movs	r1, #13
 800045e:	2001      	movs	r0, #1
 8000460:	f000 f964 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 1));
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	085b      	lsrs	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	210e      	movs	r1, #14
 8000474:	2001      	movs	r0, #1
 8000476:	f000 f959 	bl	800072c <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 0));
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	210f      	movs	r1, #15
 8000486:	2001      	movs	r0, #1
 8000488:	f000 f950 	bl	800072c <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800048c:	2201      	movs	r2, #1
 800048e:	2108      	movs	r1, #8
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f94b 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000496:	2001      	movs	r0, #1
 8000498:	f000 fb54 	bl	8000b44 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800049c:	2200      	movs	r2, #0
 800049e:	2108      	movs	r1, #8
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 f943 	bl	800072c <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f000 fb4c 	bl	8000b44 <SysTick_vDelayms>

}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <LCD_Init>:
extern GPIO_PinConfig D5_PIN;
extern GPIO_PinConfig D4_PIN;
extern GPIO_PinConfig EN_PIN;
extern GPIO_PinConfig RS_PIN;

void LCD_Init(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

	GPIO_RETURNtPinInit(&D7_PIN);
 80004b8:	4814      	ldr	r0, [pc, #80]	; (800050c <LCD_Init+0x58>)
 80004ba:	f000 f8ab 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&D6_PIN);
 80004be:	4814      	ldr	r0, [pc, #80]	; (8000510 <LCD_Init+0x5c>)
 80004c0:	f000 f8a8 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&D5_PIN);
 80004c4:	4813      	ldr	r0, [pc, #76]	; (8000514 <LCD_Init+0x60>)
 80004c6:	f000 f8a5 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&D4_PIN);
 80004ca:	4813      	ldr	r0, [pc, #76]	; (8000518 <LCD_Init+0x64>)
 80004cc:	f000 f8a2 	bl	8000614 <GPIO_RETURNtPinInit>

	GPIO_RETURNtPinInit(&EN_PIN);
 80004d0:	4812      	ldr	r0, [pc, #72]	; (800051c <LCD_Init+0x68>)
 80004d2:	f000 f89f 	bl	8000614 <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&RS_PIN);
 80004d6:	4812      	ldr	r0, [pc, #72]	; (8000520 <LCD_Init+0x6c>)
 80004d8:	f000 f89c 	bl	8000614 <GPIO_RETURNtPinInit>

	SysTick_vDelayms(50);
 80004dc:	2032      	movs	r0, #50	; 0x32
 80004de:	f000 fb31 	bl	8000b44 <SysTick_vDelayms>
	WriteInsterction(0x02);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f7ff fee4 	bl	80002b0 <WriteInsterction>
	WriteInsterction(0x28); //screen on 4 bit mode  with 2 line 5*7
 80004e8:	2028      	movs	r0, #40	; 0x28
 80004ea:	f7ff fee1 	bl	80002b0 <WriteInsterction>
	WriteInsterction(0x0c); //cursor off 0x0e ,0x0f
 80004ee:	200c      	movs	r0, #12
 80004f0:	f7ff fede 	bl	80002b0 <WriteInsterction>
	WriteInsterction(0x01); //clear screen
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff fedb 	bl	80002b0 <WriteInsterction>
	SysTick_vDelayms(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 fb22 	bl	8000b44 <SysTick_vDelayms>
	WriteInsterction(0x06); //increase DDRAM address no shift
 8000500:	2006      	movs	r0, #6
 8000502:	f7ff fed5 	bl	80002b0 <WriteInsterction>

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000030 	.word	0x20000030
 8000510:	20000034 	.word	0x20000034
 8000514:	20000038 	.word	0x20000038
 8000518:	2000003c 	.word	0x2000003c
 800051c:	20000040 	.word	0x20000040
 8000520:	20000044 	.word	0x20000044

08000524 <LCD_WriteChar>:

#endif

void LCD_WriteChar(uint8_t ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]

	WriteData(ch);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff3e 	bl	80003b2 <WriteData>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <EXTI_vClearPendingFlag>:

}


void EXTI_vClearPendingFlag (EXTI_Numbers Copy_u8EXTINumber)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]


	if (Copy_u8EXTINumber<EXTI_LINE0 || Copy_u8EXTINumber>EXTI_LINE19)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b13      	cmp	r3, #19
 800054e:	d809      	bhi.n	8000564 <EXTI_vClearPendingFlag+0x24>
	{

	}
	else
	{
		SET_BIT(EXTI->PR,Copy_u8EXTINumber);
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <EXTI_vClearPendingFlag+0x30>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	2101      	movs	r1, #1
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <EXTI_vClearPendingFlag+0x30>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6153      	str	r3, [r2, #20]
	}

}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400

08000574 <EXTI0_IRQHandler>:

/**********************ISR EXTI*************************************************/


void EXTI0_IRQHandler (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE0);
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff ffe1 	bl	8000540 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE0]!=NULL_FPTR)
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <EXTI0_IRQHandler+0x1c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <EXTI0_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE0]();
 8000586:	4b02      	ldr	r3, [pc, #8]	; (8000590 <EXTI0_IRQHandler+0x1c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4798      	blx	r3
	}

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000d8 	.word	0x200000d8

08000594 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE1);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ffd1 	bl	8000540 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE1]!=NULL_FPTR)
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <EXTI1_IRQHandler+0x1c>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <EXTI1_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE1]();
 80005a6:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <EXTI1_IRQHandler+0x1c>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	4798      	blx	r3
	}


}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000d8 	.word	0x200000d8

080005b4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	EXTI_vClearPendingFlag(EXTI_LINE2);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f7ff ffc1 	bl	8000540 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE2]!=NULL_FPTR)
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <EXTI2_IRQHandler+0x1c>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <EXTI2_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE2]();
 80005c6:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <EXTI2_IRQHandler+0x1c>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4798      	blx	r3
	}

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000d8 	.word	0x200000d8

080005d4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

	EXTI_vClearPendingFlag(EXTI_LINE3);
 80005d8:	2003      	movs	r0, #3
 80005da:	f7ff ffb1 	bl	8000540 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE3]!=NULL_FPTR)
 80005de:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <EXTI3_IRQHandler+0x1c>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <EXTI3_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE3]();
 80005e6:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <EXTI3_IRQHandler+0x1c>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	4798      	blx	r3
	}

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000d8 	.word	0x200000d8

080005f4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

	EXTI_vClearPendingFlag(EXTI_LINE4);
 80005f8:	2004      	movs	r0, #4
 80005fa:	f7ff ffa1 	bl	8000540 <EXTI_vClearPendingFlag>
	if(PtrfuncArray[EXTI_LINE4]!=NULL_FPTR)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <EXTI4_IRQHandler+0x1c>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <EXTI4_IRQHandler+0x18>
	{
	PtrfuncArray[EXTI_LINE4]();
 8000606:	4b02      	ldr	r3, [pc, #8]	; (8000610 <EXTI4_IRQHandler+0x1c>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4798      	blx	r3
	}

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000d8 	.word	0x200000d8

08000614 <GPIO_RETURNtPinInit>:
#include "GPIO/inc/GPIO_interface.h"


static GPIO_r *GPIO_ArraysOfPtr[Number_OfPorts] = { GPIOA, GPIOB, GPIOC };

RETURN_t GPIO_RETURNtPinInit(GPIO_PinConfig *Localptr_PinConfig) {
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

	RETURN_t LocalRetState = OK_ret;
 800061c:	2301      	movs	r3, #1
 800061e:	77fb      	strb	r3, [r7, #31]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
			&& Localptr_PinConfig->Port_Name <= GPIO_PORTC)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
 8000624:	2b02      	cmp	r3, #2
 8000626:	d903      	bls.n	8000630 <GPIO_RETURNtPinInit+0x1c>
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	785b      	ldrb	r3, [r3, #1]
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d173      	bne.n	8000718 <GPIO_RETURNtPinInit+0x104>

		GPIO_r *LocalGPIO_Ptr = GPIO_ArraysOfPtr[Localptr_PinConfig->Port_Name];
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <GPIO_RETURNtPinInit+0x114>)
 8000638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800063c:	61bb      	str	r3, [r7, #24]
		/* configure mode */
		MOD_NUM_OF_BITS(LocalGPIO_Ptr->CR[(Localptr_PinConfig->PIN_Name) / 8],
 800063e:	230f      	movs	r3, #15
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	461a      	mov	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	401a      	ands	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	401a      	ands	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	431a      	orrs	r2, r3
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				((Localptr_PinConfig->PIN_Name) % 8) * 4, 4,
				Localptr_PinConfig->PIN_MODE);



if( Localptr_PinConfig->PIN_MODE == GPIO_PinModeInput_PU)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	2b18      	cmp	r3, #24
 800069e:	d10a      	bne.n	80006b6 <GPIO_RETURNtPinInit+0xa2>
{
	SET_BIT(LocalGPIO_Ptr->ODR ,Localptr_PinConfig->PIN_Name );
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7852      	ldrb	r2, [r2, #1]
 80006a8:	4611      	mov	r1, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	408a      	lsls	r2, r1
 80006ae:	431a      	orrs	r2, r3
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	e00e      	b.n	80006d4 <GPIO_RETURNtPinInit+0xc0>


}


else if( Localptr_PinConfig->PIN_MODE == GPIO_PinModeInput_PD )
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	2b08      	cmp	r3, #8
 80006bc:	d10a      	bne.n	80006d4 <GPIO_RETURNtPinInit+0xc0>
{
	CLEAR_BIT(LocalGPIO_Ptr->ODR ,Localptr_PinConfig->PIN_Name );
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7852      	ldrb	r2, [r2, #1]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	401a      	ands	r2, r3
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	60da      	str	r2, [r3, #12]

}

		/* configure set and reset */
		if (Localptr_PinConfig->PIN_MODE == High_O) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10a      	bne.n	80006f2 <GPIO_RETURNtPinInit+0xde>

			SET_BIT(LocalGPIO_Ptr->BSRR , Localptr_PinConfig->PIN_Name);
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7852      	ldrb	r2, [r2, #1]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	431a      	orrs	r2, r3
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 80006f0:	e014      	b.n	800071c <GPIO_RETURNtPinInit+0x108>

		} else if (Localptr_PinConfig->PIN_MODE == LOW_O) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	789b      	ldrb	r3, [r3, #2]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10b      	bne.n	8000712 <GPIO_RETURNtPinInit+0xfe>

			SET_BIT(LocalGPIO_Ptr->BSRR , ((Localptr_PinConfig->PIN_Name)+GPIO_PortsOutOfRange) );
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7852      	ldrb	r2, [r2, #1]
 8000702:	3203      	adds	r2, #3
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	431a      	orrs	r2, r3
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000710:	e004      	b.n	800071c <GPIO_RETURNtPinInit+0x108>

		} else {
			LocalRetState = ERROR_ret;
 8000712:	2300      	movs	r3, #0
 8000714:	77fb      	strb	r3, [r7, #31]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000716:	e001      	b.n	800071c <GPIO_RETURNtPinInit+0x108>
		}

	} else {

		LocalRetState = ERROR_ret;
 8000718:	2300      	movs	r3, #0
 800071a:	77fb      	strb	r3, [r7, #31]
	}

	return LocalRetState;
 800071c:	7ffb      	ldrb	r3, [r7, #31]

}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000048 	.word	0x20000048

0800072c <GPIO_RETURNtPinOut>:
 * @param  Local_PortName: The GPIO port to which the pin belongs.
 * @param  Local_PinName: The specific pin in the port.
 * @param  Local_OutVal: The output value to be set (High_O or LOW_O).
 * @retval RETURN_t: Indicates the success or failure of the operation.
 */
RETURN_t GPIO_RETURNtPinOut(GPIO_Ports Local_PortName, GPIO_Pins Local_PinName,GPIO_PinStateOut Local_OutVal) {
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	460b      	mov	r3, r1
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	4613      	mov	r3, r2
 800073c:	717b      	strb	r3, [r7, #5]

	RETURN_t local_RETURN_t = OK_ret;
 800073e:	2301      	movs	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	if (Local_PortName >= GPIO_PortsOutOfRange|| Local_PinName >= GPIO_PinsOutOfRange) {
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d802      	bhi.n	800074e <GPIO_RETURNtPinOut+0x22>
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	2b0f      	cmp	r3, #15
 800074c:	d902      	bls.n	8000754 <GPIO_RETURNtPinOut+0x28>

		local_RETURN_t = ERROR_ret;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	e02a      	b.n	80007aa <GPIO_RETURNtPinOut+0x7e>

	} else {

		if (Local_OutVal == High_O) {
 8000754:	797b      	ldrb	r3, [r7, #5]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d110      	bne.n	800077c <GPIO_RETURNtPinOut+0x50>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,Local_PinName) ;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <GPIO_RETURNtPinOut+0x8c>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	691a      	ldr	r2, [r3, #16]
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	4618      	mov	r0, r3
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4911      	ldr	r1, [pc, #68]	; (80007b8 <GPIO_RETURNtPinOut+0x8c>)
 8000772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000776:	4302      	orrs	r2, r0
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	e016      	b.n	80007aa <GPIO_RETURNtPinOut+0x7e>

		}

		else if (Local_OutVal == LOW_O) {
 800077c:	797b      	ldrb	r3, [r7, #5]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d111      	bne.n	80007a6 <GPIO_RETURNtPinOut+0x7a>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,(Local_PinName+GPIO_PinsOutOfRange) ) ;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <GPIO_RETURNtPinOut+0x8c>)
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	691a      	ldr	r2, [r3, #16]
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	3310      	adds	r3, #16
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	4618      	mov	r0, r3
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4907      	ldr	r1, [pc, #28]	; (80007b8 <GPIO_RETURNtPinOut+0x8c>)
 800079c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a0:	4302      	orrs	r2, r0
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	e001      	b.n	80007aa <GPIO_RETURNtPinOut+0x7e>

		} else {

			local_RETURN_t = ERROR_ret;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

		}

	}

	return local_RETURN_t;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000048 	.word	0x20000048

080007bc <GPIO_u8PinRead>:
 * @brief  Reads the current state of a GPIO pin.
 * @param  Local_PortName: The GPIO port to which the pin belongs.
 * @param  Local_PinName: The specific pin in the port.
 * @retval GPIO_PinStateOut: The current state of the GPIO pin (High_O or LOW_O).
 */
GPIO_PinStateOut GPIO_u8PinRead(GPIO_Ports Local_PortName,GPIO_Pins Local_PinName){
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	460a      	mov	r2, r1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	4613      	mov	r3, r2
 80007ca:	71bb      	strb	r3, [r7, #6]

		return READ_BIT(GPIO_ArraysOfPtr[Local_PortName]->IDR ,Local_PinName )== High_O?High_O:LOW_O ;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <GPIO_u8PinRead+0x38>)
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	fa22 f303 	lsr.w	r3, r2, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	bf0c      	ite	eq
 80007e4:	2301      	moveq	r3, #1
 80007e6:	2300      	movne	r3, #0
 80007e8:	b2db      	uxtb	r3, r3


}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000048 	.word	0x20000048

080007f8 <NVIC_SetPriorityConfig>:


static uint8_t StaticGlobal_u8PriorityConfig ;


void NVIC_SetPriorityConfig(uint8_t Copy_u8Priority) {
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]

	 StaticGlobal_u8PriorityConfig=Copy_u8Priority;
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <NVIC_SetPriorityConfig+0x3c>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	7013      	strb	r3, [r2, #0]
	 uint32_t LocalTempRegValue=(VECT_KEY<<16)|(Copy_u8Priority<<8)|(SCB_AIRCR&0b111) ;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	461a      	mov	r2, r3
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <NVIC_SetPriorityConfig+0x40>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	4313      	orrs	r3, r2
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60fb      	str	r3, [r7, #12]
	 SCB_AIRCR =LocalTempRegValue ;
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <NVIC_SetPriorityConfig+0x40>)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6013      	str	r3, [r2, #0]

}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000128 	.word	0x20000128
 8000838:	e000ed0c 	.word	0xe000ed0c

0800083c <NVIC_voidSetInterruptPriority>:
 * Copy_u8GroupId    :the desired Group Id of interrupt note:if PriorityConfig= NVIC_GROUB0BITS_SUB4BITS then enter 0
 * Copy_u8SubGroupId :the desired SubGroup Id of interrupt note:if PriorityConfig= NVIC_GROUB4BITS_SUB0BITS then enter 0
 *
 */
void NVIC_voidSetInterruptPriority(NVIC_EXTPreprheial Copyu8InterruptNumber,
		uint8_t Copy_u8GroupId, uint8_t Copy_u8SubGroupId) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	460b      	mov	r3, r1
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	4613      	mov	r3, r2
 800084c:	717b      	strb	r3, [r7, #5]



	switch (StaticGlobal_u8PriorityConfig) {
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <NVIC_voidSetInterruptPriority+0xe4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3b03      	subs	r3, #3
 8000854:	2b04      	cmp	r3, #4
 8000856:	d85c      	bhi.n	8000912 <NVIC_voidSetInterruptPriority+0xd6>
 8000858:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <NVIC_voidSetInterruptPriority+0x24>)
 800085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085e:	bf00      	nop
 8000860:	08000875 	.word	0x08000875
 8000864:	08000887 	.word	0x08000887
 8000868:	080008ad 	.word	0x080008ad
 800086c:	080008d3 	.word	0x080008d3
 8000870:	080008ff 	.word	0x080008ff
		case NVIC_16GROUB_0SUB:
			NVIC->IPR[Copyu8InterruptNumber]=(Copy_u8GroupId<<4);
 8000874:	492b      	ldr	r1, [pc, #172]	; (8000924 <NVIC_voidSetInterruptPriority+0xe8>)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
			break;
 8000884:	e046      	b.n	8000914 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_8GROUB_2SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b111)<<5)|((Copy_u8SubGroupId & 0b1)<<4);
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	015b      	lsls	r3, r3, #5
 800088a:	b25a      	sxtb	r2, r3
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	b25b      	sxtb	r3, r3
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	b25b      	sxtb	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b259      	sxtb	r1, r3
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <NVIC_voidSetInterruptPriority+0xe8>)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	b2c9      	uxtb	r1, r1
 80008a2:	4413      	add	r3, r2
 80008a4:	460a      	mov	r2, r1
 80008a6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		break;
 80008aa:	e033      	b.n	8000914 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_4GROUB_4SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<6)|((Copy_u8SubGroupId & 0b11)<<4);
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	019b      	lsls	r3, r3, #6
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	797b      	ldrb	r3, [r7, #5]
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b259      	sxtb	r1, r3
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <NVIC_voidSetInterruptPriority+0xe8>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	b2c9      	uxtb	r1, r1
 80008c8:	4413      	add	r3, r2
 80008ca:	460a      	mov	r2, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 80008d0:	e020      	b.n	8000914 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_2GROUB_8SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8GroupId&0b11)<<7)|((Copy_u8SubGroupId & 0b111)<<4);
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	01db      	lsls	r3, r3, #7
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	797b      	ldrb	r3, [r7, #5]
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b259      	sxtb	r1, r3
 80008ee:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <NVIC_voidSetInterruptPriority+0xe8>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	b2c9      	uxtb	r1, r1
 80008f4:	4413      	add	r3, r2
 80008f6:	460a      	mov	r2, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 80008fc:	e00a      	b.n	8000914 <NVIC_voidSetInterruptPriority+0xd8>
		case NVIC_0GROUB_16SUB:
			NVIC->IPR[Copyu8InterruptNumber]=((Copy_u8SubGroupId & 0b1111)<<4);
 80008fe:	797b      	ldrb	r3, [r7, #5]
 8000900:	0119      	lsls	r1, r3, #4
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <NVIC_voidSetInterruptPriority+0xe8>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	b2c9      	uxtb	r1, r1
 8000908:	4413      	add	r3, r2
 800090a:	460a      	mov	r2, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

		break;
 8000910:	e000      	b.n	8000914 <NVIC_voidSetInterruptPriority+0xd8>
		default:
			break;
 8000912:	bf00      	nop
	}



}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000128 	.word	0x20000128
 8000924:	e000e100 	.word	0xe000e100

08000928 <NVIC_vEnableInterrupt>:
/**
 * @brief Enables the specified interrupt in the NVIC (Nested Vector Interrupt Controller).
 * @param Copy_u8InterruptNum: The interrupt number to be enabled.
 * @return None
 */
void NVIC_vEnableInterrupt(NVIC_EXTPreprheial Copy_u8InterruptNum){
 8000928:	b490      	push	{r4, r7}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]


	SET_BIT(NVIC->ISER[Copy_u8InterruptNum/32],Copy_u8InterruptNum%32);
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <NVIC_vEnableInterrupt+0x3c>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	b2d8      	uxtb	r0, r3
 800093a:	4603      	mov	r3, r0
 800093c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000940:	79fa      	ldrb	r2, [r7, #7]
 8000942:	f002 021f 	and.w	r2, r2, #31
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4614      	mov	r4, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <NVIC_vEnableInterrupt+0x3c>)
 8000950:	4601      	mov	r1, r0
 8000952:	4323      	orrs	r3, r4
 8000954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bc90      	pop	{r4, r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100

08000968 <RCC_RETURNtInit>:
#include "RCC/inc/RCC_interface.h"




RETURN_t RCC_RETURNtInit(void) {
 8000968:	b480      	push	{r7}
 800096a:	b097      	sub	sp, #92	; 0x5c
 800096c:	af00      	add	r7, sp, #0

    RETURN_t Local_error_state = OK_ret ;
 800096e:	2301      	movs	r3, #1
 8000970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Configuring ADC prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 14, 2, ADC_PRESCALER);
 8000974:	2303      	movs	r3, #3
 8000976:	653b      	str	r3, [r7, #80]	; 0x50
 8000978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800097a:	039b      	lsls	r3, r3, #14
 800097c:	43db      	mvns	r3, r3
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000982:	039b      	lsls	r3, r3, #14
 8000984:	b29b      	uxth	r3, r3
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
 8000988:	4b43      	ldr	r3, [pc, #268]	; (8000a98 <RCC_RETURNtInit+0x130>)
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800098e:	401a      	ands	r2, r3
 8000990:	4941      	ldr	r1, [pc, #260]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000994:	4313      	orrs	r3, r2
 8000996:	604b      	str	r3, [r1, #4]

    /* Configuring APB2 high-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 11, 3, APB2_prescaler);
 8000998:	2307      	movs	r3, #7
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
 800099c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800099e:	02db      	lsls	r3, r3, #11
 80009a0:	43db      	mvns	r3, r3
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
 80009a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009a6:	02db      	lsls	r3, r3, #11
 80009a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80009ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009ae:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <RCC_RETURNtInit+0x130>)
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009b4:	401a      	ands	r2, r3
 80009b6:	4938      	ldr	r1, [pc, #224]	; (8000a98 <RCC_RETURNtInit+0x130>)
 80009b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ba:	4313      	orrs	r3, r2
 80009bc:	604b      	str	r3, [r1, #4]

    /* Configuring APB1 low-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 8, 3, APB1_prescaler);
 80009be:	2307      	movs	r3, #7
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80009c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	43db      	mvns	r3, r3
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
 80009ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <RCC_RETURNtInit+0x130>)
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	401a      	ands	r2, r3
 80009dc:	492e      	ldr	r1, [pc, #184]	; (8000a98 <RCC_RETURNtInit+0x130>)
 80009de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e0:	4313      	orrs	r3, r2
 80009e2:	604b      	str	r3, [r1, #4]

    /* Configuring AHB prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 4, 4, AHP_prescaler);
 80009e4:	230f      	movs	r3, #15
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	43db      	mvns	r3, r3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <RCC_RETURNtInit+0x130>)
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	401a      	ands	r2, r3
 80009fc:	4926      	ldr	r1, [pc, #152]	; (8000a98 <RCC_RETURNtInit+0x130>)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	4313      	orrs	r3, r2
 8000a02:	604b      	str	r3, [r1, #4]

    /* Configuring Microcontroller clock output */
    MOD_NUM_OF_BITS(RCC->CFGR, 24, 3, MCO_clk);
 8000a04:	2307      	movs	r3, #7
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	061b      	lsls	r3, r3, #24
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	061b      	lsls	r3, r3, #24
 8000a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	401a      	ands	r2, r3
 8000a22:	491d      	ldr	r1, [pc, #116]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	604b      	str	r3, [r1, #4]

    /* Configuring clock security system */
    MOD_NUM_OF_BITS(RCC->CR, 19, 0, Clock_security);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	04db      	lsls	r3, r3, #19
 8000a32:	43db      	mvns	r3, r3
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	04db      	lsls	r3, r3, #19
 8000a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	401a      	ands	r2, r3
 8000a48:	4913      	ldr	r1, [pc, #76]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	600b      	str	r3, [r1, #0]

    /* Configuring main clock source */
    #if MAIN_CLK == HSI
        SET_BIT(RCC->CR, 0);
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]
        while(!READ_BIT(RCC->CR, 1));
 8000a5c:	bf00      	nop
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f9      	beq.n	8000a5e <RCC_RETURNtInit+0xf6>
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 0);
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	4905      	ldr	r1, [pc, #20]	; (8000a98 <RCC_RETURNtInit+0x130>)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	604b      	str	r3, [r1, #4]
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 2);
        /* Turning off HSI */
        CLEAR_BIT(RCC->CR, 0);
    #endif

    return Local_error_state;
 8000a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	375c      	adds	r7, #92	; 0x5c
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <RCC_RETURNtPeripheralEn>:

/*  functions for enabling various peripherals */


RETURN_t RCC_RETURNtPeripheralEn(uint8_t BusType, uint8_t PeripheralName) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
    RETURN_t Local_error_state = OK_ret ;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]


	switch(BusType){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d01c      	beq.n	8000af0 <RCC_RETURNtPeripheralEn+0x54>
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	dc25      	bgt.n	8000b06 <RCC_RETURNtPeripheralEn+0x6a>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <RCC_RETURNtPeripheralEn+0x28>
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d00b      	beq.n	8000ada <RCC_RETURNtPeripheralEn+0x3e>
 8000ac2:	e020      	b.n	8000b06 <RCC_RETURNtPeripheralEn+0x6a>

	case AHB :

		SET_BIT(RCC->AHBENR ,PeripheralName ) ;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <RCC_RETURNtPeripheralEn+0x7c>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	79ba      	ldrb	r2, [r7, #6]
 8000aca:	2101      	movs	r1, #1
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <RCC_RETURNtPeripheralEn+0x7c>)
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6153      	str	r3, [r2, #20]

		break ;
 8000ad8:	e018      	b.n	8000b0c <RCC_RETURNtPeripheralEn+0x70>
	case APB1 :
		SET_BIT(RCC->APB1ENR ,PeripheralName ) ;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <RCC_RETURNtPeripheralEn+0x7c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	79ba      	ldrb	r2, [r7, #6]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <RCC_RETURNtPeripheralEn+0x7c>)
 8000aea:	430b      	orrs	r3, r1
 8000aec:	61d3      	str	r3, [r2, #28]

		break ;
 8000aee:	e00d      	b.n	8000b0c <RCC_RETURNtPeripheralEn+0x70>

	case APB2 :
		SET_BIT(RCC->APB2ENR ,PeripheralName ) ;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <RCC_RETURNtPeripheralEn+0x7c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	79ba      	ldrb	r2, [r7, #6]
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f202 	lsl.w	r2, r1, r2
 8000afc:	4611      	mov	r1, r2
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <RCC_RETURNtPeripheralEn+0x7c>)
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6193      	str	r3, [r2, #24]
		break  ;
 8000b04:	e002      	b.n	8000b0c <RCC_RETURNtPeripheralEn+0x70>

	default :
		Local_error_state = ERROR_ret ;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]
		break ;
 8000b0a:	bf00      	nop

	}
	return  Local_error_state  ;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <SysTick_vInit>:
 */


#include "SysTick/inc/SysTick_interface.h"

void SysTick_vInit(void) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

	/* disable SysTick exception */
	CLEAR_BIT(SysTick->CTRL, 1);
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <SysTick_vInit+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <SysTick_vInit+0x24>)
 8000b26:	f023 0302 	bic.w	r3, r3, #2
 8000b2a:	6013      	str	r3, [r2, #0]
#if SysTick_ClkSource==SysTick_AHB_8
	CLEAR_BIT(SysTick->CTRL, 2);
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_vInit+0x24>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <SysTick_vInit+0x24>)
 8000b32:	f023 0304 	bic.w	r3, r3, #4
 8000b36:	6013      	str	r3, [r2, #0]
#elif SysTick_ClkSource==SysTick_AHB
	SET_BIT(SysTick->CTRL  , 2 ) ;

#endif

}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <SysTick_vDelayms>:

	}

}

void SysTick_vDelayms(uint32_t local_time) {
 8000b44:	b480      	push	{r7}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	local_time *= 1000;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b52:	fb02 f303 	mul.w	r3, r2, r3
 8000b56:	607b      	str	r3, [r7, #4]

	if (local_time < (1 << 25)) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b5e:	d216      	bcs.n	8000b8e <SysTick_vDelayms+0x4a>

		SysTick->LOAD = local_time;
 8000b60:	4a35      	ldr	r2, [pc, #212]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6053      	str	r3, [r2, #4]

		SET_BIT(SysTick->CTRL, 0);
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a33      	ldr	r2, [pc, #204]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6013      	str	r3, [r2, #0]

		while (!READ_BIT(SysTick->CTRL, 16))
 8000b72:	bf00      	nop
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f9      	beq.n	8000b74 <SysTick_vDelayms+0x30>
			;

		CLEAR_BIT(SysTick->CTRL, 0);
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2c      	ldr	r2, [pc, #176]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

		}

	}

}
 8000b8c:	e04e      	b.n	8000c2c <SysTick_vDelayms+0xe8>
	else if (local_time > (1 << 25)) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b94:	d94a      	bls.n	8000c2c <SysTick_vDelayms+0xe8>
		uint32_t overfolow = local_time / 0xffffff;
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	f240 1301 	movw	r3, #257	; 0x101
 8000b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	0852      	lsrs	r2, r2, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	0ddb      	lsrs	r3, r3, #23
 8000ba8:	613b      	str	r3, [r7, #16]
		uint32_t rem = local_time / 0xffffff;
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	f240 1301 	movw	r3, #257	; 0x101
 8000bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb4:	1ad2      	subs	r2, r2, r3
 8000bb6:	0852      	lsrs	r2, r2, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	0ddb      	lsrs	r3, r3, #23
 8000bbc:	60fb      	str	r3, [r7, #12]
		SysTick->LOAD = rem;
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6053      	str	r3, [r2, #4]
		SET_BIT(SysTick->CTRL, 0);
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]
		while (!READ_BIT(SysTick->CTRL, 16))
 8000bd0:	bf00      	nop
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f9      	beq.n	8000bd2 <SysTick_vDelayms+0x8e>
		CLEAR_BIT(SysTick->CTRL, 0);
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	e019      	b.n	8000c24 <SysTick_vDelayms+0xe0>
			SysTick->LOAD = 0xffffff;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bf2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000bf6:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]
			while (!READ_BIT(SysTick->CTRL, 16))
 8000c04:	bf00      	nop
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f9      	beq.n	8000c06 <SysTick_vDelayms+0xc2>
			CLEAR_BIT(SysTick->CTRL, 0);
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <SysTick_vDelayms+0xf4>)
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3e1      	bcc.n	8000bf0 <SysTick_vDelayms+0xac>
}
 8000c2c:	bf00      	nop
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <SysTick_Handler>:

	}

}

void SysTick_Handler(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

	if (Overflow_needFlag == 0) {
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <SysTick_Handler+0x94>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10d      	bne.n	8000c64 <SysTick_Handler+0x28>

		/* stop timer */
		SET_BIT(SysTick->CTRL, 0);
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

		if (SysTickHandler_ptr != NULL_FPTR) {
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <SysTick_Handler+0x9c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d037      	beq.n	8000ccc <SysTick_Handler+0x90>
			SysTickHandler_ptr();
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <SysTick_Handler+0x9c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4798      	blx	r3

		}

	}

}
 8000c62:	e033      	b.n	8000ccc <SysTick_Handler+0x90>
	} else if (Overflow_needFlag == 1) {
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <SysTick_Handler+0x94>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d12f      	bne.n	8000ccc <SysTick_Handler+0x90>
		CLEAR_BIT(SysTick->CTRL, 0);
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <SysTick_Handler+0xa0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e00e      	b.n	8000c9e <SysTick_Handler+0x62>
			SysTick->LOAD = 0xffffff;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c82:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000c86:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <SysTick_Handler+0x98>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <SysTick_Handler+0xa0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <SysTick_Handler+0xa0>)
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SysTick_Handler+0xa0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <SysTick_Handler+0xa4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3ea      	bcc.n	8000c80 <SysTick_Handler+0x44>
		if(i==(overflowInterrupt-1)){
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <SysTick_Handler+0xa4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1e5a      	subs	r2, r3, #1
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SysTick_Handler+0xa0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d109      	bne.n	8000ccc <SysTick_Handler+0x90>
			if (SysTickHandler_ptr != NULL_FPTR) {
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <SysTick_Handler+0x9c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <SysTick_Handler+0x8a>
						SysTickHandler_ptr();
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Handler+0x9c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4798      	blx	r3
			i=0 ;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Handler+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000129 	.word	0x20000129
 8000cd4:	e000e010 	.word	0xe000e010
 8000cd8:	20000130 	.word	0x20000130
 8000cdc:	20000134 	.word	0x20000134
 8000ce0:	2000012c 	.word	0x2000012c

08000ce4 <main>:
	// GPIO_RETURNtPinToggle(GPIO_PORTA, GPIO_Pin2) ;
//SysTick_vDelayms(1000) ;

}

int main() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

	NVIC_SetPriorityConfig(NVIC_0GROUB_16SUB);
 8000cea:	2007      	movs	r0, #7
 8000cec:	f7ff fd84 	bl	80007f8 <NVIC_SetPriorityConfig>

	NVIC_voidSetInterruptPriority(EXTI0_LINE, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2006      	movs	r0, #6
 8000cf6:	f7ff fda1 	bl	800083c <NVIC_voidSetInterruptPriority>

	NVIC_vEnableInterrupt(EXTI0_LINE);
 8000cfa:	2006      	movs	r0, #6
 8000cfc:	f7ff fe14 	bl	8000928 <NVIC_vEnableInterrupt>


	RCC_RETURNtInit();
 8000d00:	f7ff fe32 	bl	8000968 <RCC_RETURNtInit>

	RCC_RETURNtPeripheralEn(APB2, AFIO_APB2_peripherals);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fec8 	bl	8000a9c <RCC_RETURNtPeripheralEn>

	RCC_RETURNtPeripheralEn(APB2, PORTA_APB2_peripherals);
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f7ff fec4 	bl	8000a9c <RCC_RETURNtPeripheralEn>
	RCC_RETURNtPeripheralEn(APB2, PORTB_APB2_peripherals);
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff fec0 	bl	8000a9c <RCC_RETURNtPeripheralEn>

	/* alternate EXT0 -> PORTB0 */
	//*(uint32_t*) 0x40010008 = 1;

	GPIO_RETURNtPinInit(&Pina2);
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <main+0x6c>)
 8000d1e:	f7ff fc79 	bl	8000614 <GPIO_RETURNtPinInit>


	//GPIO_RETURNtPinInit(&Pinb0);


	GPIO_PinConfig Pinb0 = { GPIO_PORTB, GPIO_Pin0,
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <main+0x70>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	603b      	str	r3, [r7, #0]
		GPIO_PinModeInput_PU, High_O

		};
	SysTick_vInit();
 8000d28:	f7ff fef8 	bl	8000b1c <SysTick_vInit>

	LCD_Init();
 8000d2c:	f7ff fbc2 	bl	80004b4 <LCD_Init>
	KeyPad_vInit();
 8000d30:	f7ff fa1e 	bl	8000170 <KeyPad_vInit>

	/*EXTI_RETURNtSetInterruptEdge(EXTI_LINE0, FALLING_EDGE) ;
	 EXTI_RETURNtSetInterruptStatus(EXTI_LINE0 ,EXTINonMasked) ;
	 EXTI_RETURNtSetCalbackFunction(EXTI_LINE0, TogglePinB0)  ;*/
	uint8_t result = NO_KEY;
 8000d34:	2323      	movs	r3, #35	; 0x23
 8000d36:	71fb      	strb	r3, [r7, #7]
	while (1) {

		result = KeyPad_u8GetKey();
 8000d38:	f7ff fa6a 	bl	8000210 <KeyPad_u8GetKey>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]

		if (result != NO_KEY) {
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b23      	cmp	r3, #35	; 0x23
 8000d44:	d0f8      	beq.n	8000d38 <main+0x54>

			LCD_WriteChar(result);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fbeb 	bl	8000524 <LCD_WriteChar>
		result = KeyPad_u8GetKey();
 8000d4e:	e7f3      	b.n	8000d38 <main+0x54>
 8000d50:	20000054 	.word	0x20000054
 8000d54:	08001db0 	.word	0x08001db0

08000d58 <WWDG_IRQHandler>:
	 */

	return 0;
}

void WWDG_IRQHandler(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	printf("Hello ");
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <WWDG_IRQHandler+0x10>)
 8000d5e:	f000 f991 	bl	8001084 <iprintf>

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08001db4 	.word	0x08001db4

08000d6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e00a      	b.n	8000d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d7e:	f3af 8000 	nop.w
 8000d82:	4601      	mov	r1, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf0      	blt.n	8000d7e <_read+0x12>
  }

  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e009      	b.n	8000dcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf1      	blt.n	8000db8 <_write+0x12>
  }
  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_close>:

int _close(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e04:	605a      	str	r2, [r3, #4]
  return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <_isatty>:

int _isatty(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b085      	sub	sp, #20
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f000 f9ac 	bl	80011cc <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20005000 	.word	0x20005000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000138 	.word	0x20000138
 8000ea8:	20000288 	.word	0x20000288

08000eac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eda:	f000 f97d 	bl	80011d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ede:	f7ff ff01 	bl	8000ce4 <main>

08000ee2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   r0, =_estack
 8000ee4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000ef0:	08001df8 	.word	0x08001df8
  ldr r2, =_sbss
 8000ef4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000ef8:	20000288 	.word	0x20000288

08000efc <ADC1_2_IRQHandler>:
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:

  b Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <std>:
 8000f00:	2300      	movs	r3, #0
 8000f02:	b510      	push	{r4, lr}
 8000f04:	4604      	mov	r4, r0
 8000f06:	e9c0 3300 	strd	r3, r3, [r0]
 8000f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f0e:	6083      	str	r3, [r0, #8]
 8000f10:	8181      	strh	r1, [r0, #12]
 8000f12:	6643      	str	r3, [r0, #100]	; 0x64
 8000f14:	81c2      	strh	r2, [r0, #14]
 8000f16:	6183      	str	r3, [r0, #24]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	305c      	adds	r0, #92	; 0x5c
 8000f1e:	f000 f906 	bl	800112e <memset>
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <std+0x58>)
 8000f24:	6224      	str	r4, [r4, #32]
 8000f26:	6263      	str	r3, [r4, #36]	; 0x24
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <std+0x5c>)
 8000f2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <std+0x60>)
 8000f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <std+0x64>)
 8000f32:	6323      	str	r3, [r4, #48]	; 0x30
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <std+0x68>)
 8000f36:	429c      	cmp	r4, r3
 8000f38:	d006      	beq.n	8000f48 <std+0x48>
 8000f3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000f3e:	4294      	cmp	r4, r2
 8000f40:	d002      	beq.n	8000f48 <std+0x48>
 8000f42:	33d0      	adds	r3, #208	; 0xd0
 8000f44:	429c      	cmp	r4, r3
 8000f46:	d105      	bne.n	8000f54 <std+0x54>
 8000f48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f50:	f000 b966 	b.w	8001220 <__retarget_lock_init_recursive>
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	bf00      	nop
 8000f58:	080010a9 	.word	0x080010a9
 8000f5c:	080010cb 	.word	0x080010cb
 8000f60:	08001103 	.word	0x08001103
 8000f64:	08001127 	.word	0x08001127
 8000f68:	2000013c 	.word	0x2000013c

08000f6c <stdio_exit_handler>:
 8000f6c:	4a02      	ldr	r2, [pc, #8]	; (8000f78 <stdio_exit_handler+0xc>)
 8000f6e:	4903      	ldr	r1, [pc, #12]	; (8000f7c <stdio_exit_handler+0x10>)
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <stdio_exit_handler+0x14>)
 8000f72:	f000 b869 	b.w	8001048 <_fwalk_sglue>
 8000f76:	bf00      	nop
 8000f78:	20000058 	.word	0x20000058
 8000f7c:	08001ac1 	.word	0x08001ac1
 8000f80:	20000064 	.word	0x20000064

08000f84 <cleanup_stdio>:
 8000f84:	6841      	ldr	r1, [r0, #4]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <cleanup_stdio+0x34>)
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	d001      	beq.n	8000f94 <cleanup_stdio+0x10>
 8000f90:	f000 fd96 	bl	8001ac0 <_fflush_r>
 8000f94:	68a1      	ldr	r1, [r4, #8]
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <cleanup_stdio+0x38>)
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d002      	beq.n	8000fa2 <cleanup_stdio+0x1e>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f000 fd8f 	bl	8001ac0 <_fflush_r>
 8000fa2:	68e1      	ldr	r1, [r4, #12]
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <cleanup_stdio+0x3c>)
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d004      	beq.n	8000fb4 <cleanup_stdio+0x30>
 8000faa:	4620      	mov	r0, r4
 8000fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fb0:	f000 bd86 	b.w	8001ac0 <_fflush_r>
 8000fb4:	bd10      	pop	{r4, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000013c 	.word	0x2000013c
 8000fbc:	200001a4 	.word	0x200001a4
 8000fc0:	2000020c 	.word	0x2000020c

08000fc4 <global_stdio_init.part.0>:
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <global_stdio_init.part.0+0x30>)
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <global_stdio_init.part.0+0x34>)
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <global_stdio_init.part.0+0x38>)
 8000fcc:	4620      	mov	r0, r4
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f7ff ff94 	bl	8000f00 <std>
 8000fd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2109      	movs	r1, #9
 8000fe0:	f7ff ff8e 	bl	8000f00 <std>
 8000fe4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000fe8:	2202      	movs	r2, #2
 8000fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fee:	2112      	movs	r1, #18
 8000ff0:	f7ff bf86 	b.w	8000f00 <std>
 8000ff4:	20000274 	.word	0x20000274
 8000ff8:	2000013c 	.word	0x2000013c
 8000ffc:	08000f6d 	.word	0x08000f6d

08001000 <__sfp_lock_acquire>:
 8001000:	4801      	ldr	r0, [pc, #4]	; (8001008 <__sfp_lock_acquire+0x8>)
 8001002:	f000 b90e 	b.w	8001222 <__retarget_lock_acquire_recursive>
 8001006:	bf00      	nop
 8001008:	2000027d 	.word	0x2000027d

0800100c <__sfp_lock_release>:
 800100c:	4801      	ldr	r0, [pc, #4]	; (8001014 <__sfp_lock_release+0x8>)
 800100e:	f000 b909 	b.w	8001224 <__retarget_lock_release_recursive>
 8001012:	bf00      	nop
 8001014:	2000027d 	.word	0x2000027d

08001018 <__sinit>:
 8001018:	b510      	push	{r4, lr}
 800101a:	4604      	mov	r4, r0
 800101c:	f7ff fff0 	bl	8001000 <__sfp_lock_acquire>
 8001020:	6a23      	ldr	r3, [r4, #32]
 8001022:	b11b      	cbz	r3, 800102c <__sinit+0x14>
 8001024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001028:	f7ff bff0 	b.w	800100c <__sfp_lock_release>
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__sinit+0x28>)
 800102e:	6223      	str	r3, [r4, #32]
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__sinit+0x2c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f5      	bne.n	8001024 <__sinit+0xc>
 8001038:	f7ff ffc4 	bl	8000fc4 <global_stdio_init.part.0>
 800103c:	e7f2      	b.n	8001024 <__sinit+0xc>
 800103e:	bf00      	nop
 8001040:	08000f85 	.word	0x08000f85
 8001044:	20000274 	.word	0x20000274

08001048 <_fwalk_sglue>:
 8001048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800104c:	4607      	mov	r7, r0
 800104e:	4688      	mov	r8, r1
 8001050:	4614      	mov	r4, r2
 8001052:	2600      	movs	r6, #0
 8001054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001058:	f1b9 0901 	subs.w	r9, r9, #1
 800105c:	d505      	bpl.n	800106a <_fwalk_sglue+0x22>
 800105e:	6824      	ldr	r4, [r4, #0]
 8001060:	2c00      	cmp	r4, #0
 8001062:	d1f7      	bne.n	8001054 <_fwalk_sglue+0xc>
 8001064:	4630      	mov	r0, r6
 8001066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800106a:	89ab      	ldrh	r3, [r5, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d907      	bls.n	8001080 <_fwalk_sglue+0x38>
 8001070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001074:	3301      	adds	r3, #1
 8001076:	d003      	beq.n	8001080 <_fwalk_sglue+0x38>
 8001078:	4629      	mov	r1, r5
 800107a:	4638      	mov	r0, r7
 800107c:	47c0      	blx	r8
 800107e:	4306      	orrs	r6, r0
 8001080:	3568      	adds	r5, #104	; 0x68
 8001082:	e7e9      	b.n	8001058 <_fwalk_sglue+0x10>

08001084 <iprintf>:
 8001084:	b40f      	push	{r0, r1, r2, r3}
 8001086:	b507      	push	{r0, r1, r2, lr}
 8001088:	4906      	ldr	r1, [pc, #24]	; (80010a4 <iprintf+0x20>)
 800108a:	ab04      	add	r3, sp, #16
 800108c:	6808      	ldr	r0, [r1, #0]
 800108e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001092:	6881      	ldr	r1, [r0, #8]
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	f000 f9e3 	bl	8001460 <_vfiprintf_r>
 800109a:	b003      	add	sp, #12
 800109c:	f85d eb04 	ldr.w	lr, [sp], #4
 80010a0:	b004      	add	sp, #16
 80010a2:	4770      	bx	lr
 80010a4:	200000b0 	.word	0x200000b0

080010a8 <__sread>:
 80010a8:	b510      	push	{r4, lr}
 80010aa:	460c      	mov	r4, r1
 80010ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b0:	f000 f868 	bl	8001184 <_read_r>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	bfab      	itete	ge
 80010b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010ba:	89a3      	ldrhlt	r3, [r4, #12]
 80010bc:	181b      	addge	r3, r3, r0
 80010be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010c2:	bfac      	ite	ge
 80010c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80010c6:	81a3      	strhlt	r3, [r4, #12]
 80010c8:	bd10      	pop	{r4, pc}

080010ca <__swrite>:
 80010ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ce:	461f      	mov	r7, r3
 80010d0:	898b      	ldrh	r3, [r1, #12]
 80010d2:	4605      	mov	r5, r0
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	460c      	mov	r4, r1
 80010d8:	4616      	mov	r6, r2
 80010da:	d505      	bpl.n	80010e8 <__swrite+0x1e>
 80010dc:	2302      	movs	r3, #2
 80010de:	2200      	movs	r2, #0
 80010e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e4:	f000 f83c 	bl	8001160 <_lseek_r>
 80010e8:	89a3      	ldrh	r3, [r4, #12]
 80010ea:	4632      	mov	r2, r6
 80010ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010f0:	81a3      	strh	r3, [r4, #12]
 80010f2:	4628      	mov	r0, r5
 80010f4:	463b      	mov	r3, r7
 80010f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010fe:	f000 b853 	b.w	80011a8 <_write_r>

08001102 <__sseek>:
 8001102:	b510      	push	{r4, lr}
 8001104:	460c      	mov	r4, r1
 8001106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110a:	f000 f829 	bl	8001160 <_lseek_r>
 800110e:	1c43      	adds	r3, r0, #1
 8001110:	89a3      	ldrh	r3, [r4, #12]
 8001112:	bf15      	itete	ne
 8001114:	6560      	strne	r0, [r4, #84]	; 0x54
 8001116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800111a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800111e:	81a3      	strheq	r3, [r4, #12]
 8001120:	bf18      	it	ne
 8001122:	81a3      	strhne	r3, [r4, #12]
 8001124:	bd10      	pop	{r4, pc}

08001126 <__sclose>:
 8001126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800112a:	f000 b809 	b.w	8001140 <_close_r>

0800112e <memset>:
 800112e:	4603      	mov	r3, r0
 8001130:	4402      	add	r2, r0
 8001132:	4293      	cmp	r3, r2
 8001134:	d100      	bne.n	8001138 <memset+0xa>
 8001136:	4770      	bx	lr
 8001138:	f803 1b01 	strb.w	r1, [r3], #1
 800113c:	e7f9      	b.n	8001132 <memset+0x4>
	...

08001140 <_close_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	2300      	movs	r3, #0
 8001144:	4d05      	ldr	r5, [pc, #20]	; (800115c <_close_r+0x1c>)
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	602b      	str	r3, [r5, #0]
 800114c:	f7ff fe47 	bl	8000dde <_close>
 8001150:	1c43      	adds	r3, r0, #1
 8001152:	d102      	bne.n	800115a <_close_r+0x1a>
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	b103      	cbz	r3, 800115a <_close_r+0x1a>
 8001158:	6023      	str	r3, [r4, #0]
 800115a:	bd38      	pop	{r3, r4, r5, pc}
 800115c:	20000278 	.word	0x20000278

08001160 <_lseek_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	2200      	movs	r2, #0
 800116a:	4d05      	ldr	r5, [pc, #20]	; (8001180 <_lseek_r+0x20>)
 800116c:	602a      	str	r2, [r5, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	f7ff fe59 	bl	8000e26 <_lseek>
 8001174:	1c43      	adds	r3, r0, #1
 8001176:	d102      	bne.n	800117e <_lseek_r+0x1e>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	b103      	cbz	r3, 800117e <_lseek_r+0x1e>
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	bd38      	pop	{r3, r4, r5, pc}
 8001180:	20000278 	.word	0x20000278

08001184 <_read_r>:
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4604      	mov	r4, r0
 8001188:	4608      	mov	r0, r1
 800118a:	4611      	mov	r1, r2
 800118c:	2200      	movs	r2, #0
 800118e:	4d05      	ldr	r5, [pc, #20]	; (80011a4 <_read_r+0x20>)
 8001190:	602a      	str	r2, [r5, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	f7ff fdea 	bl	8000d6c <_read>
 8001198:	1c43      	adds	r3, r0, #1
 800119a:	d102      	bne.n	80011a2 <_read_r+0x1e>
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	b103      	cbz	r3, 80011a2 <_read_r+0x1e>
 80011a0:	6023      	str	r3, [r4, #0]
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
 80011a4:	20000278 	.word	0x20000278

080011a8 <_write_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	2200      	movs	r2, #0
 80011b2:	4d05      	ldr	r5, [pc, #20]	; (80011c8 <_write_r+0x20>)
 80011b4:	602a      	str	r2, [r5, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f7ff fdf5 	bl	8000da6 <_write>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d102      	bne.n	80011c6 <_write_r+0x1e>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	b103      	cbz	r3, 80011c6 <_write_r+0x1e>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	20000278 	.word	0x20000278

080011cc <__errno>:
 80011cc:	4b01      	ldr	r3, [pc, #4]	; (80011d4 <__errno+0x8>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200000b0 	.word	0x200000b0

080011d8 <__libc_init_array>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	2600      	movs	r6, #0
 80011dc:	4d0c      	ldr	r5, [pc, #48]	; (8001210 <__libc_init_array+0x38>)
 80011de:	4c0d      	ldr	r4, [pc, #52]	; (8001214 <__libc_init_array+0x3c>)
 80011e0:	1b64      	subs	r4, r4, r5
 80011e2:	10a4      	asrs	r4, r4, #2
 80011e4:	42a6      	cmp	r6, r4
 80011e6:	d109      	bne.n	80011fc <__libc_init_array+0x24>
 80011e8:	f000 fdca 	bl	8001d80 <_init>
 80011ec:	2600      	movs	r6, #0
 80011ee:	4d0a      	ldr	r5, [pc, #40]	; (8001218 <__libc_init_array+0x40>)
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <__libc_init_array+0x44>)
 80011f2:	1b64      	subs	r4, r4, r5
 80011f4:	10a4      	asrs	r4, r4, #2
 80011f6:	42a6      	cmp	r6, r4
 80011f8:	d105      	bne.n	8001206 <__libc_init_array+0x2e>
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001200:	4798      	blx	r3
 8001202:	3601      	adds	r6, #1
 8001204:	e7ee      	b.n	80011e4 <__libc_init_array+0xc>
 8001206:	f855 3b04 	ldr.w	r3, [r5], #4
 800120a:	4798      	blx	r3
 800120c:	3601      	adds	r6, #1
 800120e:	e7f2      	b.n	80011f6 <__libc_init_array+0x1e>
 8001210:	08001df0 	.word	0x08001df0
 8001214:	08001df0 	.word	0x08001df0
 8001218:	08001df0 	.word	0x08001df0
 800121c:	08001df4 	.word	0x08001df4

08001220 <__retarget_lock_init_recursive>:
 8001220:	4770      	bx	lr

08001222 <__retarget_lock_acquire_recursive>:
 8001222:	4770      	bx	lr

08001224 <__retarget_lock_release_recursive>:
 8001224:	4770      	bx	lr
	...

08001228 <_free_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4605      	mov	r5, r0
 800122c:	2900      	cmp	r1, #0
 800122e:	d040      	beq.n	80012b2 <_free_r+0x8a>
 8001230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001234:	1f0c      	subs	r4, r1, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	bfb8      	it	lt
 800123a:	18e4      	addlt	r4, r4, r3
 800123c:	f000 f8dc 	bl	80013f8 <__malloc_lock>
 8001240:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <_free_r+0x8c>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	b933      	cbnz	r3, 8001254 <_free_r+0x2c>
 8001246:	6063      	str	r3, [r4, #4]
 8001248:	6014      	str	r4, [r2, #0]
 800124a:	4628      	mov	r0, r5
 800124c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001250:	f000 b8d8 	b.w	8001404 <__malloc_unlock>
 8001254:	42a3      	cmp	r3, r4
 8001256:	d908      	bls.n	800126a <_free_r+0x42>
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	1821      	adds	r1, r4, r0
 800125c:	428b      	cmp	r3, r1
 800125e:	bf01      	itttt	eq
 8001260:	6819      	ldreq	r1, [r3, #0]
 8001262:	685b      	ldreq	r3, [r3, #4]
 8001264:	1809      	addeq	r1, r1, r0
 8001266:	6021      	streq	r1, [r4, #0]
 8001268:	e7ed      	b.n	8001246 <_free_r+0x1e>
 800126a:	461a      	mov	r2, r3
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	b10b      	cbz	r3, 8001274 <_free_r+0x4c>
 8001270:	42a3      	cmp	r3, r4
 8001272:	d9fa      	bls.n	800126a <_free_r+0x42>
 8001274:	6811      	ldr	r1, [r2, #0]
 8001276:	1850      	adds	r0, r2, r1
 8001278:	42a0      	cmp	r0, r4
 800127a:	d10b      	bne.n	8001294 <_free_r+0x6c>
 800127c:	6820      	ldr	r0, [r4, #0]
 800127e:	4401      	add	r1, r0
 8001280:	1850      	adds	r0, r2, r1
 8001282:	4283      	cmp	r3, r0
 8001284:	6011      	str	r1, [r2, #0]
 8001286:	d1e0      	bne.n	800124a <_free_r+0x22>
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4408      	add	r0, r1
 800128e:	6010      	str	r0, [r2, #0]
 8001290:	6053      	str	r3, [r2, #4]
 8001292:	e7da      	b.n	800124a <_free_r+0x22>
 8001294:	d902      	bls.n	800129c <_free_r+0x74>
 8001296:	230c      	movs	r3, #12
 8001298:	602b      	str	r3, [r5, #0]
 800129a:	e7d6      	b.n	800124a <_free_r+0x22>
 800129c:	6820      	ldr	r0, [r4, #0]
 800129e:	1821      	adds	r1, r4, r0
 80012a0:	428b      	cmp	r3, r1
 80012a2:	bf01      	itttt	eq
 80012a4:	6819      	ldreq	r1, [r3, #0]
 80012a6:	685b      	ldreq	r3, [r3, #4]
 80012a8:	1809      	addeq	r1, r1, r0
 80012aa:	6021      	streq	r1, [r4, #0]
 80012ac:	6063      	str	r3, [r4, #4]
 80012ae:	6054      	str	r4, [r2, #4]
 80012b0:	e7cb      	b.n	800124a <_free_r+0x22>
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	20000280 	.word	0x20000280

080012b8 <sbrk_aligned>:
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	4e0e      	ldr	r6, [pc, #56]	; (80012f4 <sbrk_aligned+0x3c>)
 80012bc:	460c      	mov	r4, r1
 80012be:	6831      	ldr	r1, [r6, #0]
 80012c0:	4605      	mov	r5, r0
 80012c2:	b911      	cbnz	r1, 80012ca <sbrk_aligned+0x12>
 80012c4:	f000 fcba 	bl	8001c3c <_sbrk_r>
 80012c8:	6030      	str	r0, [r6, #0]
 80012ca:	4621      	mov	r1, r4
 80012cc:	4628      	mov	r0, r5
 80012ce:	f000 fcb5 	bl	8001c3c <_sbrk_r>
 80012d2:	1c43      	adds	r3, r0, #1
 80012d4:	d00a      	beq.n	80012ec <sbrk_aligned+0x34>
 80012d6:	1cc4      	adds	r4, r0, #3
 80012d8:	f024 0403 	bic.w	r4, r4, #3
 80012dc:	42a0      	cmp	r0, r4
 80012de:	d007      	beq.n	80012f0 <sbrk_aligned+0x38>
 80012e0:	1a21      	subs	r1, r4, r0
 80012e2:	4628      	mov	r0, r5
 80012e4:	f000 fcaa 	bl	8001c3c <_sbrk_r>
 80012e8:	3001      	adds	r0, #1
 80012ea:	d101      	bne.n	80012f0 <sbrk_aligned+0x38>
 80012ec:	f04f 34ff 	mov.w	r4, #4294967295
 80012f0:	4620      	mov	r0, r4
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
 80012f4:	20000284 	.word	0x20000284

080012f8 <_malloc_r>:
 80012f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012fc:	1ccd      	adds	r5, r1, #3
 80012fe:	f025 0503 	bic.w	r5, r5, #3
 8001302:	3508      	adds	r5, #8
 8001304:	2d0c      	cmp	r5, #12
 8001306:	bf38      	it	cc
 8001308:	250c      	movcc	r5, #12
 800130a:	2d00      	cmp	r5, #0
 800130c:	4607      	mov	r7, r0
 800130e:	db01      	blt.n	8001314 <_malloc_r+0x1c>
 8001310:	42a9      	cmp	r1, r5
 8001312:	d905      	bls.n	8001320 <_malloc_r+0x28>
 8001314:	230c      	movs	r3, #12
 8001316:	2600      	movs	r6, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4630      	mov	r0, r6
 800131c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80013f4 <_malloc_r+0xfc>
 8001324:	f000 f868 	bl	80013f8 <__malloc_lock>
 8001328:	f8d8 3000 	ldr.w	r3, [r8]
 800132c:	461c      	mov	r4, r3
 800132e:	bb5c      	cbnz	r4, 8001388 <_malloc_r+0x90>
 8001330:	4629      	mov	r1, r5
 8001332:	4638      	mov	r0, r7
 8001334:	f7ff ffc0 	bl	80012b8 <sbrk_aligned>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	4604      	mov	r4, r0
 800133c:	d155      	bne.n	80013ea <_malloc_r+0xf2>
 800133e:	f8d8 4000 	ldr.w	r4, [r8]
 8001342:	4626      	mov	r6, r4
 8001344:	2e00      	cmp	r6, #0
 8001346:	d145      	bne.n	80013d4 <_malloc_r+0xdc>
 8001348:	2c00      	cmp	r4, #0
 800134a:	d048      	beq.n	80013de <_malloc_r+0xe6>
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	4631      	mov	r1, r6
 8001350:	4638      	mov	r0, r7
 8001352:	eb04 0903 	add.w	r9, r4, r3
 8001356:	f000 fc71 	bl	8001c3c <_sbrk_r>
 800135a:	4581      	cmp	r9, r0
 800135c:	d13f      	bne.n	80013de <_malloc_r+0xe6>
 800135e:	6821      	ldr	r1, [r4, #0]
 8001360:	4638      	mov	r0, r7
 8001362:	1a6d      	subs	r5, r5, r1
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff ffa7 	bl	80012b8 <sbrk_aligned>
 800136a:	3001      	adds	r0, #1
 800136c:	d037      	beq.n	80013de <_malloc_r+0xe6>
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	442b      	add	r3, r5
 8001372:	6023      	str	r3, [r4, #0]
 8001374:	f8d8 3000 	ldr.w	r3, [r8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d038      	beq.n	80013ee <_malloc_r+0xf6>
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	42a2      	cmp	r2, r4
 8001380:	d12b      	bne.n	80013da <_malloc_r+0xe2>
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	e00f      	b.n	80013a8 <_malloc_r+0xb0>
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	1b52      	subs	r2, r2, r5
 800138c:	d41f      	bmi.n	80013ce <_malloc_r+0xd6>
 800138e:	2a0b      	cmp	r2, #11
 8001390:	d917      	bls.n	80013c2 <_malloc_r+0xca>
 8001392:	1961      	adds	r1, r4, r5
 8001394:	42a3      	cmp	r3, r4
 8001396:	6025      	str	r5, [r4, #0]
 8001398:	bf18      	it	ne
 800139a:	6059      	strne	r1, [r3, #4]
 800139c:	6863      	ldr	r3, [r4, #4]
 800139e:	bf08      	it	eq
 80013a0:	f8c8 1000 	streq.w	r1, [r8]
 80013a4:	5162      	str	r2, [r4, r5]
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	4638      	mov	r0, r7
 80013aa:	f104 060b 	add.w	r6, r4, #11
 80013ae:	f000 f829 	bl	8001404 <__malloc_unlock>
 80013b2:	f026 0607 	bic.w	r6, r6, #7
 80013b6:	1d23      	adds	r3, r4, #4
 80013b8:	1af2      	subs	r2, r6, r3
 80013ba:	d0ae      	beq.n	800131a <_malloc_r+0x22>
 80013bc:	1b9b      	subs	r3, r3, r6
 80013be:	50a3      	str	r3, [r4, r2]
 80013c0:	e7ab      	b.n	800131a <_malloc_r+0x22>
 80013c2:	42a3      	cmp	r3, r4
 80013c4:	6862      	ldr	r2, [r4, #4]
 80013c6:	d1dd      	bne.n	8001384 <_malloc_r+0x8c>
 80013c8:	f8c8 2000 	str.w	r2, [r8]
 80013cc:	e7ec      	b.n	80013a8 <_malloc_r+0xb0>
 80013ce:	4623      	mov	r3, r4
 80013d0:	6864      	ldr	r4, [r4, #4]
 80013d2:	e7ac      	b.n	800132e <_malloc_r+0x36>
 80013d4:	4634      	mov	r4, r6
 80013d6:	6876      	ldr	r6, [r6, #4]
 80013d8:	e7b4      	b.n	8001344 <_malloc_r+0x4c>
 80013da:	4613      	mov	r3, r2
 80013dc:	e7cc      	b.n	8001378 <_malloc_r+0x80>
 80013de:	230c      	movs	r3, #12
 80013e0:	4638      	mov	r0, r7
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	f000 f80e 	bl	8001404 <__malloc_unlock>
 80013e8:	e797      	b.n	800131a <_malloc_r+0x22>
 80013ea:	6025      	str	r5, [r4, #0]
 80013ec:	e7dc      	b.n	80013a8 <_malloc_r+0xb0>
 80013ee:	605b      	str	r3, [r3, #4]
 80013f0:	deff      	udf	#255	; 0xff
 80013f2:	bf00      	nop
 80013f4:	20000280 	.word	0x20000280

080013f8 <__malloc_lock>:
 80013f8:	4801      	ldr	r0, [pc, #4]	; (8001400 <__malloc_lock+0x8>)
 80013fa:	f7ff bf12 	b.w	8001222 <__retarget_lock_acquire_recursive>
 80013fe:	bf00      	nop
 8001400:	2000027c 	.word	0x2000027c

08001404 <__malloc_unlock>:
 8001404:	4801      	ldr	r0, [pc, #4]	; (800140c <__malloc_unlock+0x8>)
 8001406:	f7ff bf0d 	b.w	8001224 <__retarget_lock_release_recursive>
 800140a:	bf00      	nop
 800140c:	2000027c 	.word	0x2000027c

08001410 <__sfputc_r>:
 8001410:	6893      	ldr	r3, [r2, #8]
 8001412:	b410      	push	{r4}
 8001414:	3b01      	subs	r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	6093      	str	r3, [r2, #8]
 800141a:	da07      	bge.n	800142c <__sfputc_r+0x1c>
 800141c:	6994      	ldr	r4, [r2, #24]
 800141e:	42a3      	cmp	r3, r4
 8001420:	db01      	blt.n	8001426 <__sfputc_r+0x16>
 8001422:	290a      	cmp	r1, #10
 8001424:	d102      	bne.n	800142c <__sfputc_r+0x1c>
 8001426:	bc10      	pop	{r4}
 8001428:	f000 bb72 	b.w	8001b10 <__swbuf_r>
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	1c58      	adds	r0, r3, #1
 8001430:	6010      	str	r0, [r2, #0]
 8001432:	7019      	strb	r1, [r3, #0]
 8001434:	4608      	mov	r0, r1
 8001436:	bc10      	pop	{r4}
 8001438:	4770      	bx	lr

0800143a <__sfputs_r>:
 800143a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143c:	4606      	mov	r6, r0
 800143e:	460f      	mov	r7, r1
 8001440:	4614      	mov	r4, r2
 8001442:	18d5      	adds	r5, r2, r3
 8001444:	42ac      	cmp	r4, r5
 8001446:	d101      	bne.n	800144c <__sfputs_r+0x12>
 8001448:	2000      	movs	r0, #0
 800144a:	e007      	b.n	800145c <__sfputs_r+0x22>
 800144c:	463a      	mov	r2, r7
 800144e:	4630      	mov	r0, r6
 8001450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001454:	f7ff ffdc 	bl	8001410 <__sfputc_r>
 8001458:	1c43      	adds	r3, r0, #1
 800145a:	d1f3      	bne.n	8001444 <__sfputs_r+0xa>
 800145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001460 <_vfiprintf_r>:
 8001460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001464:	460d      	mov	r5, r1
 8001466:	4614      	mov	r4, r2
 8001468:	4698      	mov	r8, r3
 800146a:	4606      	mov	r6, r0
 800146c:	b09d      	sub	sp, #116	; 0x74
 800146e:	b118      	cbz	r0, 8001478 <_vfiprintf_r+0x18>
 8001470:	6a03      	ldr	r3, [r0, #32]
 8001472:	b90b      	cbnz	r3, 8001478 <_vfiprintf_r+0x18>
 8001474:	f7ff fdd0 	bl	8001018 <__sinit>
 8001478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800147a:	07d9      	lsls	r1, r3, #31
 800147c:	d405      	bmi.n	800148a <_vfiprintf_r+0x2a>
 800147e:	89ab      	ldrh	r3, [r5, #12]
 8001480:	059a      	lsls	r2, r3, #22
 8001482:	d402      	bmi.n	800148a <_vfiprintf_r+0x2a>
 8001484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001486:	f7ff fecc 	bl	8001222 <__retarget_lock_acquire_recursive>
 800148a:	89ab      	ldrh	r3, [r5, #12]
 800148c:	071b      	lsls	r3, r3, #28
 800148e:	d501      	bpl.n	8001494 <_vfiprintf_r+0x34>
 8001490:	692b      	ldr	r3, [r5, #16]
 8001492:	b99b      	cbnz	r3, 80014bc <_vfiprintf_r+0x5c>
 8001494:	4629      	mov	r1, r5
 8001496:	4630      	mov	r0, r6
 8001498:	f000 fb78 	bl	8001b8c <__swsetup_r>
 800149c:	b170      	cbz	r0, 80014bc <_vfiprintf_r+0x5c>
 800149e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014a0:	07dc      	lsls	r4, r3, #31
 80014a2:	d504      	bpl.n	80014ae <_vfiprintf_r+0x4e>
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	b01d      	add	sp, #116	; 0x74
 80014aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ae:	89ab      	ldrh	r3, [r5, #12]
 80014b0:	0598      	lsls	r0, r3, #22
 80014b2:	d4f7      	bmi.n	80014a4 <_vfiprintf_r+0x44>
 80014b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014b6:	f7ff feb5 	bl	8001224 <__retarget_lock_release_recursive>
 80014ba:	e7f3      	b.n	80014a4 <_vfiprintf_r+0x44>
 80014bc:	2300      	movs	r3, #0
 80014be:	9309      	str	r3, [sp, #36]	; 0x24
 80014c0:	2320      	movs	r3, #32
 80014c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014c6:	2330      	movs	r3, #48	; 0x30
 80014c8:	f04f 0901 	mov.w	r9, #1
 80014cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80014d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001680 <_vfiprintf_r+0x220>
 80014d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014d8:	4623      	mov	r3, r4
 80014da:	469a      	mov	sl, r3
 80014dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014e0:	b10a      	cbz	r2, 80014e6 <_vfiprintf_r+0x86>
 80014e2:	2a25      	cmp	r2, #37	; 0x25
 80014e4:	d1f9      	bne.n	80014da <_vfiprintf_r+0x7a>
 80014e6:	ebba 0b04 	subs.w	fp, sl, r4
 80014ea:	d00b      	beq.n	8001504 <_vfiprintf_r+0xa4>
 80014ec:	465b      	mov	r3, fp
 80014ee:	4622      	mov	r2, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	4630      	mov	r0, r6
 80014f4:	f7ff ffa1 	bl	800143a <__sfputs_r>
 80014f8:	3001      	adds	r0, #1
 80014fa:	f000 80a9 	beq.w	8001650 <_vfiprintf_r+0x1f0>
 80014fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001500:	445a      	add	r2, fp
 8001502:	9209      	str	r2, [sp, #36]	; 0x24
 8001504:	f89a 3000 	ldrb.w	r3, [sl]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a1 	beq.w	8001650 <_vfiprintf_r+0x1f0>
 800150e:	2300      	movs	r3, #0
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001518:	f10a 0a01 	add.w	sl, sl, #1
 800151c:	9304      	str	r3, [sp, #16]
 800151e:	9307      	str	r3, [sp, #28]
 8001520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001524:	931a      	str	r3, [sp, #104]	; 0x68
 8001526:	4654      	mov	r4, sl
 8001528:	2205      	movs	r2, #5
 800152a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800152e:	4854      	ldr	r0, [pc, #336]	; (8001680 <_vfiprintf_r+0x220>)
 8001530:	f000 fb94 	bl	8001c5c <memchr>
 8001534:	9a04      	ldr	r2, [sp, #16]
 8001536:	b9d8      	cbnz	r0, 8001570 <_vfiprintf_r+0x110>
 8001538:	06d1      	lsls	r1, r2, #27
 800153a:	bf44      	itt	mi
 800153c:	2320      	movmi	r3, #32
 800153e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001542:	0713      	lsls	r3, r2, #28
 8001544:	bf44      	itt	mi
 8001546:	232b      	movmi	r3, #43	; 0x2b
 8001548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800154c:	f89a 3000 	ldrb.w	r3, [sl]
 8001550:	2b2a      	cmp	r3, #42	; 0x2a
 8001552:	d015      	beq.n	8001580 <_vfiprintf_r+0x120>
 8001554:	4654      	mov	r4, sl
 8001556:	2000      	movs	r0, #0
 8001558:	f04f 0c0a 	mov.w	ip, #10
 800155c:	9a07      	ldr	r2, [sp, #28]
 800155e:	4621      	mov	r1, r4
 8001560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001564:	3b30      	subs	r3, #48	; 0x30
 8001566:	2b09      	cmp	r3, #9
 8001568:	d94d      	bls.n	8001606 <_vfiprintf_r+0x1a6>
 800156a:	b1b0      	cbz	r0, 800159a <_vfiprintf_r+0x13a>
 800156c:	9207      	str	r2, [sp, #28]
 800156e:	e014      	b.n	800159a <_vfiprintf_r+0x13a>
 8001570:	eba0 0308 	sub.w	r3, r0, r8
 8001574:	fa09 f303 	lsl.w	r3, r9, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	46a2      	mov	sl, r4
 800157c:	9304      	str	r3, [sp, #16]
 800157e:	e7d2      	b.n	8001526 <_vfiprintf_r+0xc6>
 8001580:	9b03      	ldr	r3, [sp, #12]
 8001582:	1d19      	adds	r1, r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	9103      	str	r1, [sp, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bfbb      	ittet	lt
 800158c:	425b      	neglt	r3, r3
 800158e:	f042 0202 	orrlt.w	r2, r2, #2
 8001592:	9307      	strge	r3, [sp, #28]
 8001594:	9307      	strlt	r3, [sp, #28]
 8001596:	bfb8      	it	lt
 8001598:	9204      	strlt	r2, [sp, #16]
 800159a:	7823      	ldrb	r3, [r4, #0]
 800159c:	2b2e      	cmp	r3, #46	; 0x2e
 800159e:	d10c      	bne.n	80015ba <_vfiprintf_r+0x15a>
 80015a0:	7863      	ldrb	r3, [r4, #1]
 80015a2:	2b2a      	cmp	r3, #42	; 0x2a
 80015a4:	d134      	bne.n	8001610 <_vfiprintf_r+0x1b0>
 80015a6:	9b03      	ldr	r3, [sp, #12]
 80015a8:	3402      	adds	r4, #2
 80015aa:	1d1a      	adds	r2, r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	9203      	str	r2, [sp, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bfb8      	it	lt
 80015b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80015b8:	9305      	str	r3, [sp, #20]
 80015ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001684 <_vfiprintf_r+0x224>
 80015be:	2203      	movs	r2, #3
 80015c0:	4650      	mov	r0, sl
 80015c2:	7821      	ldrb	r1, [r4, #0]
 80015c4:	f000 fb4a 	bl	8001c5c <memchr>
 80015c8:	b138      	cbz	r0, 80015da <_vfiprintf_r+0x17a>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	9b04      	ldr	r3, [sp, #16]
 80015ce:	eba0 000a 	sub.w	r0, r0, sl
 80015d2:	4082      	lsls	r2, r0
 80015d4:	4313      	orrs	r3, r2
 80015d6:	3401      	adds	r4, #1
 80015d8:	9304      	str	r3, [sp, #16]
 80015da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015de:	2206      	movs	r2, #6
 80015e0:	4829      	ldr	r0, [pc, #164]	; (8001688 <_vfiprintf_r+0x228>)
 80015e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80015e6:	f000 fb39 	bl	8001c5c <memchr>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d03f      	beq.n	800166e <_vfiprintf_r+0x20e>
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <_vfiprintf_r+0x22c>)
 80015f0:	bb1b      	cbnz	r3, 800163a <_vfiprintf_r+0x1da>
 80015f2:	9b03      	ldr	r3, [sp, #12]
 80015f4:	3307      	adds	r3, #7
 80015f6:	f023 0307 	bic.w	r3, r3, #7
 80015fa:	3308      	adds	r3, #8
 80015fc:	9303      	str	r3, [sp, #12]
 80015fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001600:	443b      	add	r3, r7
 8001602:	9309      	str	r3, [sp, #36]	; 0x24
 8001604:	e768      	b.n	80014d8 <_vfiprintf_r+0x78>
 8001606:	460c      	mov	r4, r1
 8001608:	2001      	movs	r0, #1
 800160a:	fb0c 3202 	mla	r2, ip, r2, r3
 800160e:	e7a6      	b.n	800155e <_vfiprintf_r+0xfe>
 8001610:	2300      	movs	r3, #0
 8001612:	f04f 0c0a 	mov.w	ip, #10
 8001616:	4619      	mov	r1, r3
 8001618:	3401      	adds	r4, #1
 800161a:	9305      	str	r3, [sp, #20]
 800161c:	4620      	mov	r0, r4
 800161e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001622:	3a30      	subs	r2, #48	; 0x30
 8001624:	2a09      	cmp	r2, #9
 8001626:	d903      	bls.n	8001630 <_vfiprintf_r+0x1d0>
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0c6      	beq.n	80015ba <_vfiprintf_r+0x15a>
 800162c:	9105      	str	r1, [sp, #20]
 800162e:	e7c4      	b.n	80015ba <_vfiprintf_r+0x15a>
 8001630:	4604      	mov	r4, r0
 8001632:	2301      	movs	r3, #1
 8001634:	fb0c 2101 	mla	r1, ip, r1, r2
 8001638:	e7f0      	b.n	800161c <_vfiprintf_r+0x1bc>
 800163a:	ab03      	add	r3, sp, #12
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	462a      	mov	r2, r5
 8001640:	4630      	mov	r0, r6
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_vfiprintf_r+0x230>)
 8001644:	a904      	add	r1, sp, #16
 8001646:	f3af 8000 	nop.w
 800164a:	4607      	mov	r7, r0
 800164c:	1c78      	adds	r0, r7, #1
 800164e:	d1d6      	bne.n	80015fe <_vfiprintf_r+0x19e>
 8001650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001652:	07d9      	lsls	r1, r3, #31
 8001654:	d405      	bmi.n	8001662 <_vfiprintf_r+0x202>
 8001656:	89ab      	ldrh	r3, [r5, #12]
 8001658:	059a      	lsls	r2, r3, #22
 800165a:	d402      	bmi.n	8001662 <_vfiprintf_r+0x202>
 800165c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800165e:	f7ff fde1 	bl	8001224 <__retarget_lock_release_recursive>
 8001662:	89ab      	ldrh	r3, [r5, #12]
 8001664:	065b      	lsls	r3, r3, #25
 8001666:	f53f af1d 	bmi.w	80014a4 <_vfiprintf_r+0x44>
 800166a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800166c:	e71c      	b.n	80014a8 <_vfiprintf_r+0x48>
 800166e:	ab03      	add	r3, sp, #12
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	462a      	mov	r2, r5
 8001674:	4630      	mov	r0, r6
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <_vfiprintf_r+0x230>)
 8001678:	a904      	add	r1, sp, #16
 800167a:	f000 f87d 	bl	8001778 <_printf_i>
 800167e:	e7e4      	b.n	800164a <_vfiprintf_r+0x1ea>
 8001680:	08001dbb 	.word	0x08001dbb
 8001684:	08001dc1 	.word	0x08001dc1
 8001688:	08001dc5 	.word	0x08001dc5
 800168c:	00000000 	.word	0x00000000
 8001690:	0800143b 	.word	0x0800143b

08001694 <_printf_common>:
 8001694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001698:	4616      	mov	r6, r2
 800169a:	4699      	mov	r9, r3
 800169c:	688a      	ldr	r2, [r1, #8]
 800169e:	690b      	ldr	r3, [r1, #16]
 80016a0:	4607      	mov	r7, r0
 80016a2:	4293      	cmp	r3, r2
 80016a4:	bfb8      	it	lt
 80016a6:	4613      	movlt	r3, r2
 80016a8:	6033      	str	r3, [r6, #0]
 80016aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016ae:	460c      	mov	r4, r1
 80016b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016b4:	b10a      	cbz	r2, 80016ba <_printf_common+0x26>
 80016b6:	3301      	adds	r3, #1
 80016b8:	6033      	str	r3, [r6, #0]
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	0699      	lsls	r1, r3, #26
 80016be:	bf42      	ittt	mi
 80016c0:	6833      	ldrmi	r3, [r6, #0]
 80016c2:	3302      	addmi	r3, #2
 80016c4:	6033      	strmi	r3, [r6, #0]
 80016c6:	6825      	ldr	r5, [r4, #0]
 80016c8:	f015 0506 	ands.w	r5, r5, #6
 80016cc:	d106      	bne.n	80016dc <_printf_common+0x48>
 80016ce:	f104 0a19 	add.w	sl, r4, #25
 80016d2:	68e3      	ldr	r3, [r4, #12]
 80016d4:	6832      	ldr	r2, [r6, #0]
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	42ab      	cmp	r3, r5
 80016da:	dc2b      	bgt.n	8001734 <_printf_common+0xa0>
 80016dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80016e0:	1e13      	subs	r3, r2, #0
 80016e2:	6822      	ldr	r2, [r4, #0]
 80016e4:	bf18      	it	ne
 80016e6:	2301      	movne	r3, #1
 80016e8:	0692      	lsls	r2, r2, #26
 80016ea:	d430      	bmi.n	800174e <_printf_common+0xba>
 80016ec:	4649      	mov	r1, r9
 80016ee:	4638      	mov	r0, r7
 80016f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80016f4:	47c0      	blx	r8
 80016f6:	3001      	adds	r0, #1
 80016f8:	d023      	beq.n	8001742 <_printf_common+0xae>
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	6922      	ldr	r2, [r4, #16]
 80016fe:	f003 0306 	and.w	r3, r3, #6
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf14      	ite	ne
 8001706:	2500      	movne	r5, #0
 8001708:	6833      	ldreq	r3, [r6, #0]
 800170a:	f04f 0600 	mov.w	r6, #0
 800170e:	bf08      	it	eq
 8001710:	68e5      	ldreq	r5, [r4, #12]
 8001712:	f104 041a 	add.w	r4, r4, #26
 8001716:	bf08      	it	eq
 8001718:	1aed      	subeq	r5, r5, r3
 800171a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800171e:	bf08      	it	eq
 8001720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001724:	4293      	cmp	r3, r2
 8001726:	bfc4      	itt	gt
 8001728:	1a9b      	subgt	r3, r3, r2
 800172a:	18ed      	addgt	r5, r5, r3
 800172c:	42b5      	cmp	r5, r6
 800172e:	d11a      	bne.n	8001766 <_printf_common+0xd2>
 8001730:	2000      	movs	r0, #0
 8001732:	e008      	b.n	8001746 <_printf_common+0xb2>
 8001734:	2301      	movs	r3, #1
 8001736:	4652      	mov	r2, sl
 8001738:	4649      	mov	r1, r9
 800173a:	4638      	mov	r0, r7
 800173c:	47c0      	blx	r8
 800173e:	3001      	adds	r0, #1
 8001740:	d103      	bne.n	800174a <_printf_common+0xb6>
 8001742:	f04f 30ff 	mov.w	r0, #4294967295
 8001746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800174a:	3501      	adds	r5, #1
 800174c:	e7c1      	b.n	80016d2 <_printf_common+0x3e>
 800174e:	2030      	movs	r0, #48	; 0x30
 8001750:	18e1      	adds	r1, r4, r3
 8001752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800175c:	4422      	add	r2, r4
 800175e:	3302      	adds	r3, #2
 8001760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001764:	e7c2      	b.n	80016ec <_printf_common+0x58>
 8001766:	2301      	movs	r3, #1
 8001768:	4622      	mov	r2, r4
 800176a:	4649      	mov	r1, r9
 800176c:	4638      	mov	r0, r7
 800176e:	47c0      	blx	r8
 8001770:	3001      	adds	r0, #1
 8001772:	d0e6      	beq.n	8001742 <_printf_common+0xae>
 8001774:	3601      	adds	r6, #1
 8001776:	e7d9      	b.n	800172c <_printf_common+0x98>

08001778 <_printf_i>:
 8001778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800177c:	7e0f      	ldrb	r7, [r1, #24]
 800177e:	4691      	mov	r9, r2
 8001780:	2f78      	cmp	r7, #120	; 0x78
 8001782:	4680      	mov	r8, r0
 8001784:	460c      	mov	r4, r1
 8001786:	469a      	mov	sl, r3
 8001788:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800178a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800178e:	d807      	bhi.n	80017a0 <_printf_i+0x28>
 8001790:	2f62      	cmp	r7, #98	; 0x62
 8001792:	d80a      	bhi.n	80017aa <_printf_i+0x32>
 8001794:	2f00      	cmp	r7, #0
 8001796:	f000 80d5 	beq.w	8001944 <_printf_i+0x1cc>
 800179a:	2f58      	cmp	r7, #88	; 0x58
 800179c:	f000 80c1 	beq.w	8001922 <_printf_i+0x1aa>
 80017a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80017a8:	e03a      	b.n	8001820 <_printf_i+0xa8>
 80017aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	d8f6      	bhi.n	80017a0 <_printf_i+0x28>
 80017b2:	a101      	add	r1, pc, #4	; (adr r1, 80017b8 <_printf_i+0x40>)
 80017b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017b8:	08001811 	.word	0x08001811
 80017bc:	08001825 	.word	0x08001825
 80017c0:	080017a1 	.word	0x080017a1
 80017c4:	080017a1 	.word	0x080017a1
 80017c8:	080017a1 	.word	0x080017a1
 80017cc:	080017a1 	.word	0x080017a1
 80017d0:	08001825 	.word	0x08001825
 80017d4:	080017a1 	.word	0x080017a1
 80017d8:	080017a1 	.word	0x080017a1
 80017dc:	080017a1 	.word	0x080017a1
 80017e0:	080017a1 	.word	0x080017a1
 80017e4:	0800192b 	.word	0x0800192b
 80017e8:	08001851 	.word	0x08001851
 80017ec:	080018e5 	.word	0x080018e5
 80017f0:	080017a1 	.word	0x080017a1
 80017f4:	080017a1 	.word	0x080017a1
 80017f8:	0800194d 	.word	0x0800194d
 80017fc:	080017a1 	.word	0x080017a1
 8001800:	08001851 	.word	0x08001851
 8001804:	080017a1 	.word	0x080017a1
 8001808:	080017a1 	.word	0x080017a1
 800180c:	080018ed 	.word	0x080018ed
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	1d1a      	adds	r2, r3, #4
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	602a      	str	r2, [r5, #0]
 8001818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800181c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001820:	2301      	movs	r3, #1
 8001822:	e0a0      	b.n	8001966 <_printf_i+0x1ee>
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	0607      	lsls	r7, r0, #24
 800182a:	f103 0104 	add.w	r1, r3, #4
 800182e:	6029      	str	r1, [r5, #0]
 8001830:	d501      	bpl.n	8001836 <_printf_i+0xbe>
 8001832:	681e      	ldr	r6, [r3, #0]
 8001834:	e003      	b.n	800183e <_printf_i+0xc6>
 8001836:	0646      	lsls	r6, r0, #25
 8001838:	d5fb      	bpl.n	8001832 <_printf_i+0xba>
 800183a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800183e:	2e00      	cmp	r6, #0
 8001840:	da03      	bge.n	800184a <_printf_i+0xd2>
 8001842:	232d      	movs	r3, #45	; 0x2d
 8001844:	4276      	negs	r6, r6
 8001846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800184a:	230a      	movs	r3, #10
 800184c:	4859      	ldr	r0, [pc, #356]	; (80019b4 <_printf_i+0x23c>)
 800184e:	e012      	b.n	8001876 <_printf_i+0xfe>
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	1d19      	adds	r1, r3, #4
 8001856:	6029      	str	r1, [r5, #0]
 8001858:	0605      	lsls	r5, r0, #24
 800185a:	d501      	bpl.n	8001860 <_printf_i+0xe8>
 800185c:	681e      	ldr	r6, [r3, #0]
 800185e:	e002      	b.n	8001866 <_printf_i+0xee>
 8001860:	0641      	lsls	r1, r0, #25
 8001862:	d5fb      	bpl.n	800185c <_printf_i+0xe4>
 8001864:	881e      	ldrh	r6, [r3, #0]
 8001866:	2f6f      	cmp	r7, #111	; 0x6f
 8001868:	bf0c      	ite	eq
 800186a:	2308      	moveq	r3, #8
 800186c:	230a      	movne	r3, #10
 800186e:	4851      	ldr	r0, [pc, #324]	; (80019b4 <_printf_i+0x23c>)
 8001870:	2100      	movs	r1, #0
 8001872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001876:	6865      	ldr	r5, [r4, #4]
 8001878:	2d00      	cmp	r5, #0
 800187a:	bfa8      	it	ge
 800187c:	6821      	ldrge	r1, [r4, #0]
 800187e:	60a5      	str	r5, [r4, #8]
 8001880:	bfa4      	itt	ge
 8001882:	f021 0104 	bicge.w	r1, r1, #4
 8001886:	6021      	strge	r1, [r4, #0]
 8001888:	b90e      	cbnz	r6, 800188e <_printf_i+0x116>
 800188a:	2d00      	cmp	r5, #0
 800188c:	d04b      	beq.n	8001926 <_printf_i+0x1ae>
 800188e:	4615      	mov	r5, r2
 8001890:	fbb6 f1f3 	udiv	r1, r6, r3
 8001894:	fb03 6711 	mls	r7, r3, r1, r6
 8001898:	5dc7      	ldrb	r7, [r0, r7]
 800189a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800189e:	4637      	mov	r7, r6
 80018a0:	42bb      	cmp	r3, r7
 80018a2:	460e      	mov	r6, r1
 80018a4:	d9f4      	bls.n	8001890 <_printf_i+0x118>
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d10b      	bne.n	80018c2 <_printf_i+0x14a>
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	07de      	lsls	r6, r3, #31
 80018ae:	d508      	bpl.n	80018c2 <_printf_i+0x14a>
 80018b0:	6923      	ldr	r3, [r4, #16]
 80018b2:	6861      	ldr	r1, [r4, #4]
 80018b4:	4299      	cmp	r1, r3
 80018b6:	bfde      	ittt	le
 80018b8:	2330      	movle	r3, #48	; 0x30
 80018ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018c2:	1b52      	subs	r2, r2, r5
 80018c4:	6122      	str	r2, [r4, #16]
 80018c6:	464b      	mov	r3, r9
 80018c8:	4621      	mov	r1, r4
 80018ca:	4640      	mov	r0, r8
 80018cc:	f8cd a000 	str.w	sl, [sp]
 80018d0:	aa03      	add	r2, sp, #12
 80018d2:	f7ff fedf 	bl	8001694 <_printf_common>
 80018d6:	3001      	adds	r0, #1
 80018d8:	d14a      	bne.n	8001970 <_printf_i+0x1f8>
 80018da:	f04f 30ff 	mov.w	r0, #4294967295
 80018de:	b004      	add	sp, #16
 80018e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f043 0320 	orr.w	r3, r3, #32
 80018ea:	6023      	str	r3, [r4, #0]
 80018ec:	2778      	movs	r7, #120	; 0x78
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <_printf_i+0x240>)
 80018f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	6829      	ldr	r1, [r5, #0]
 80018f8:	061f      	lsls	r7, r3, #24
 80018fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80018fe:	d402      	bmi.n	8001906 <_printf_i+0x18e>
 8001900:	065f      	lsls	r7, r3, #25
 8001902:	bf48      	it	mi
 8001904:	b2b6      	uxthmi	r6, r6
 8001906:	07df      	lsls	r7, r3, #31
 8001908:	bf48      	it	mi
 800190a:	f043 0320 	orrmi.w	r3, r3, #32
 800190e:	6029      	str	r1, [r5, #0]
 8001910:	bf48      	it	mi
 8001912:	6023      	strmi	r3, [r4, #0]
 8001914:	b91e      	cbnz	r6, 800191e <_printf_i+0x1a6>
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	f023 0320 	bic.w	r3, r3, #32
 800191c:	6023      	str	r3, [r4, #0]
 800191e:	2310      	movs	r3, #16
 8001920:	e7a6      	b.n	8001870 <_printf_i+0xf8>
 8001922:	4824      	ldr	r0, [pc, #144]	; (80019b4 <_printf_i+0x23c>)
 8001924:	e7e4      	b.n	80018f0 <_printf_i+0x178>
 8001926:	4615      	mov	r5, r2
 8001928:	e7bd      	b.n	80018a6 <_printf_i+0x12e>
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	6826      	ldr	r6, [r4, #0]
 800192e:	1d18      	adds	r0, r3, #4
 8001930:	6961      	ldr	r1, [r4, #20]
 8001932:	6028      	str	r0, [r5, #0]
 8001934:	0635      	lsls	r5, r6, #24
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	d501      	bpl.n	800193e <_printf_i+0x1c6>
 800193a:	6019      	str	r1, [r3, #0]
 800193c:	e002      	b.n	8001944 <_printf_i+0x1cc>
 800193e:	0670      	lsls	r0, r6, #25
 8001940:	d5fb      	bpl.n	800193a <_printf_i+0x1c2>
 8001942:	8019      	strh	r1, [r3, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	4615      	mov	r5, r2
 8001948:	6123      	str	r3, [r4, #16]
 800194a:	e7bc      	b.n	80018c6 <_printf_i+0x14e>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	602a      	str	r2, [r5, #0]
 8001954:	681d      	ldr	r5, [r3, #0]
 8001956:	6862      	ldr	r2, [r4, #4]
 8001958:	4628      	mov	r0, r5
 800195a:	f000 f97f 	bl	8001c5c <memchr>
 800195e:	b108      	cbz	r0, 8001964 <_printf_i+0x1ec>
 8001960:	1b40      	subs	r0, r0, r5
 8001962:	6060      	str	r0, [r4, #4]
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	6123      	str	r3, [r4, #16]
 8001968:	2300      	movs	r3, #0
 800196a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800196e:	e7aa      	b.n	80018c6 <_printf_i+0x14e>
 8001970:	462a      	mov	r2, r5
 8001972:	4649      	mov	r1, r9
 8001974:	4640      	mov	r0, r8
 8001976:	6923      	ldr	r3, [r4, #16]
 8001978:	47d0      	blx	sl
 800197a:	3001      	adds	r0, #1
 800197c:	d0ad      	beq.n	80018da <_printf_i+0x162>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	079b      	lsls	r3, r3, #30
 8001982:	d413      	bmi.n	80019ac <_printf_i+0x234>
 8001984:	68e0      	ldr	r0, [r4, #12]
 8001986:	9b03      	ldr	r3, [sp, #12]
 8001988:	4298      	cmp	r0, r3
 800198a:	bfb8      	it	lt
 800198c:	4618      	movlt	r0, r3
 800198e:	e7a6      	b.n	80018de <_printf_i+0x166>
 8001990:	2301      	movs	r3, #1
 8001992:	4632      	mov	r2, r6
 8001994:	4649      	mov	r1, r9
 8001996:	4640      	mov	r0, r8
 8001998:	47d0      	blx	sl
 800199a:	3001      	adds	r0, #1
 800199c:	d09d      	beq.n	80018da <_printf_i+0x162>
 800199e:	3501      	adds	r5, #1
 80019a0:	68e3      	ldr	r3, [r4, #12]
 80019a2:	9903      	ldr	r1, [sp, #12]
 80019a4:	1a5b      	subs	r3, r3, r1
 80019a6:	42ab      	cmp	r3, r5
 80019a8:	dcf2      	bgt.n	8001990 <_printf_i+0x218>
 80019aa:	e7eb      	b.n	8001984 <_printf_i+0x20c>
 80019ac:	2500      	movs	r5, #0
 80019ae:	f104 0619 	add.w	r6, r4, #25
 80019b2:	e7f5      	b.n	80019a0 <_printf_i+0x228>
 80019b4:	08001dcc 	.word	0x08001dcc
 80019b8:	08001ddd 	.word	0x08001ddd

080019bc <__sflush_r>:
 80019bc:	898a      	ldrh	r2, [r1, #12]
 80019be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c0:	4605      	mov	r5, r0
 80019c2:	0710      	lsls	r0, r2, #28
 80019c4:	460c      	mov	r4, r1
 80019c6:	d457      	bmi.n	8001a78 <__sflush_r+0xbc>
 80019c8:	684b      	ldr	r3, [r1, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dc04      	bgt.n	80019d8 <__sflush_r+0x1c>
 80019ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dc01      	bgt.n	80019d8 <__sflush_r+0x1c>
 80019d4:	2000      	movs	r0, #0
 80019d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019da:	2e00      	cmp	r6, #0
 80019dc:	d0fa      	beq.n	80019d4 <__sflush_r+0x18>
 80019de:	2300      	movs	r3, #0
 80019e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019e4:	682f      	ldr	r7, [r5, #0]
 80019e6:	6a21      	ldr	r1, [r4, #32]
 80019e8:	602b      	str	r3, [r5, #0]
 80019ea:	d032      	beq.n	8001a52 <__sflush_r+0x96>
 80019ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019ee:	89a3      	ldrh	r3, [r4, #12]
 80019f0:	075a      	lsls	r2, r3, #29
 80019f2:	d505      	bpl.n	8001a00 <__sflush_r+0x44>
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	1ac0      	subs	r0, r0, r3
 80019f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019fa:	b10b      	cbz	r3, 8001a00 <__sflush_r+0x44>
 80019fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019fe:	1ac0      	subs	r0, r0, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	4602      	mov	r2, r0
 8001a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a06:	4628      	mov	r0, r5
 8001a08:	6a21      	ldr	r1, [r4, #32]
 8001a0a:	47b0      	blx	r6
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	89a3      	ldrh	r3, [r4, #12]
 8001a10:	d106      	bne.n	8001a20 <__sflush_r+0x64>
 8001a12:	6829      	ldr	r1, [r5, #0]
 8001a14:	291d      	cmp	r1, #29
 8001a16:	d82b      	bhi.n	8001a70 <__sflush_r+0xb4>
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <__sflush_r+0x100>)
 8001a1a:	410a      	asrs	r2, r1
 8001a1c:	07d6      	lsls	r6, r2, #31
 8001a1e:	d427      	bmi.n	8001a70 <__sflush_r+0xb4>
 8001a20:	2200      	movs	r2, #0
 8001a22:	6062      	str	r2, [r4, #4]
 8001a24:	6922      	ldr	r2, [r4, #16]
 8001a26:	04d9      	lsls	r1, r3, #19
 8001a28:	6022      	str	r2, [r4, #0]
 8001a2a:	d504      	bpl.n	8001a36 <__sflush_r+0x7a>
 8001a2c:	1c42      	adds	r2, r0, #1
 8001a2e:	d101      	bne.n	8001a34 <__sflush_r+0x78>
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	b903      	cbnz	r3, 8001a36 <__sflush_r+0x7a>
 8001a34:	6560      	str	r0, [r4, #84]	; 0x54
 8001a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a38:	602f      	str	r7, [r5, #0]
 8001a3a:	2900      	cmp	r1, #0
 8001a3c:	d0ca      	beq.n	80019d4 <__sflush_r+0x18>
 8001a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a42:	4299      	cmp	r1, r3
 8001a44:	d002      	beq.n	8001a4c <__sflush_r+0x90>
 8001a46:	4628      	mov	r0, r5
 8001a48:	f7ff fbee 	bl	8001228 <_free_r>
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8001a50:	e7c1      	b.n	80019d6 <__sflush_r+0x1a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	4628      	mov	r0, r5
 8001a56:	47b0      	blx	r6
 8001a58:	1c41      	adds	r1, r0, #1
 8001a5a:	d1c8      	bne.n	80019ee <__sflush_r+0x32>
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0c5      	beq.n	80019ee <__sflush_r+0x32>
 8001a62:	2b1d      	cmp	r3, #29
 8001a64:	d001      	beq.n	8001a6a <__sflush_r+0xae>
 8001a66:	2b16      	cmp	r3, #22
 8001a68:	d101      	bne.n	8001a6e <__sflush_r+0xb2>
 8001a6a:	602f      	str	r7, [r5, #0]
 8001a6c:	e7b2      	b.n	80019d4 <__sflush_r+0x18>
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a74:	81a3      	strh	r3, [r4, #12]
 8001a76:	e7ae      	b.n	80019d6 <__sflush_r+0x1a>
 8001a78:	690f      	ldr	r7, [r1, #16]
 8001a7a:	2f00      	cmp	r7, #0
 8001a7c:	d0aa      	beq.n	80019d4 <__sflush_r+0x18>
 8001a7e:	0793      	lsls	r3, r2, #30
 8001a80:	bf18      	it	ne
 8001a82:	2300      	movne	r3, #0
 8001a84:	680e      	ldr	r6, [r1, #0]
 8001a86:	bf08      	it	eq
 8001a88:	694b      	ldreq	r3, [r1, #20]
 8001a8a:	1bf6      	subs	r6, r6, r7
 8001a8c:	600f      	str	r7, [r1, #0]
 8001a8e:	608b      	str	r3, [r1, #8]
 8001a90:	2e00      	cmp	r6, #0
 8001a92:	dd9f      	ble.n	80019d4 <__sflush_r+0x18>
 8001a94:	4633      	mov	r3, r6
 8001a96:	463a      	mov	r2, r7
 8001a98:	4628      	mov	r0, r5
 8001a9a:	6a21      	ldr	r1, [r4, #32]
 8001a9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001aa0:	47e0      	blx	ip
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dc06      	bgt.n	8001ab4 <__sflush_r+0xf8>
 8001aa6:	89a3      	ldrh	r3, [r4, #12]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab0:	81a3      	strh	r3, [r4, #12]
 8001ab2:	e790      	b.n	80019d6 <__sflush_r+0x1a>
 8001ab4:	4407      	add	r7, r0
 8001ab6:	1a36      	subs	r6, r6, r0
 8001ab8:	e7ea      	b.n	8001a90 <__sflush_r+0xd4>
 8001aba:	bf00      	nop
 8001abc:	dfbffffe 	.word	0xdfbffffe

08001ac0 <_fflush_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	690b      	ldr	r3, [r1, #16]
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	b913      	cbnz	r3, 8001ad0 <_fflush_r+0x10>
 8001aca:	2500      	movs	r5, #0
 8001acc:	4628      	mov	r0, r5
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
 8001ad0:	b118      	cbz	r0, 8001ada <_fflush_r+0x1a>
 8001ad2:	6a03      	ldr	r3, [r0, #32]
 8001ad4:	b90b      	cbnz	r3, 8001ada <_fflush_r+0x1a>
 8001ad6:	f7ff fa9f 	bl	8001018 <__sinit>
 8001ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f3      	beq.n	8001aca <_fflush_r+0xa>
 8001ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ae4:	07d0      	lsls	r0, r2, #31
 8001ae6:	d404      	bmi.n	8001af2 <_fflush_r+0x32>
 8001ae8:	0599      	lsls	r1, r3, #22
 8001aea:	d402      	bmi.n	8001af2 <_fflush_r+0x32>
 8001aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aee:	f7ff fb98 	bl	8001222 <__retarget_lock_acquire_recursive>
 8001af2:	4628      	mov	r0, r5
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff ff61 	bl	80019bc <__sflush_r>
 8001afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001afc:	4605      	mov	r5, r0
 8001afe:	07da      	lsls	r2, r3, #31
 8001b00:	d4e4      	bmi.n	8001acc <_fflush_r+0xc>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	059b      	lsls	r3, r3, #22
 8001b06:	d4e1      	bmi.n	8001acc <_fflush_r+0xc>
 8001b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b0a:	f7ff fb8b 	bl	8001224 <__retarget_lock_release_recursive>
 8001b0e:	e7dd      	b.n	8001acc <_fflush_r+0xc>

08001b10 <__swbuf_r>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	460e      	mov	r6, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	4605      	mov	r5, r0
 8001b18:	b118      	cbz	r0, 8001b22 <__swbuf_r+0x12>
 8001b1a:	6a03      	ldr	r3, [r0, #32]
 8001b1c:	b90b      	cbnz	r3, 8001b22 <__swbuf_r+0x12>
 8001b1e:	f7ff fa7b 	bl	8001018 <__sinit>
 8001b22:	69a3      	ldr	r3, [r4, #24]
 8001b24:	60a3      	str	r3, [r4, #8]
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	071a      	lsls	r2, r3, #28
 8001b2a:	d525      	bpl.n	8001b78 <__swbuf_r+0x68>
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	b31b      	cbz	r3, 8001b78 <__swbuf_r+0x68>
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	6922      	ldr	r2, [r4, #16]
 8001b34:	b2f6      	uxtb	r6, r6
 8001b36:	1a98      	subs	r0, r3, r2
 8001b38:	6963      	ldr	r3, [r4, #20]
 8001b3a:	4637      	mov	r7, r6
 8001b3c:	4283      	cmp	r3, r0
 8001b3e:	dc04      	bgt.n	8001b4a <__swbuf_r+0x3a>
 8001b40:	4621      	mov	r1, r4
 8001b42:	4628      	mov	r0, r5
 8001b44:	f7ff ffbc 	bl	8001ac0 <_fflush_r>
 8001b48:	b9e0      	cbnz	r0, 8001b84 <__swbuf_r+0x74>
 8001b4a:	68a3      	ldr	r3, [r4, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60a3      	str	r3, [r4, #8]
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	6022      	str	r2, [r4, #0]
 8001b56:	701e      	strb	r6, [r3, #0]
 8001b58:	6962      	ldr	r2, [r4, #20]
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d004      	beq.n	8001b6a <__swbuf_r+0x5a>
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	07db      	lsls	r3, r3, #31
 8001b64:	d506      	bpl.n	8001b74 <__swbuf_r+0x64>
 8001b66:	2e0a      	cmp	r6, #10
 8001b68:	d104      	bne.n	8001b74 <__swbuf_r+0x64>
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f7ff ffa7 	bl	8001ac0 <_fflush_r>
 8001b72:	b938      	cbnz	r0, 8001b84 <__swbuf_r+0x74>
 8001b74:	4638      	mov	r0, r7
 8001b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b78:	4621      	mov	r1, r4
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f000 f806 	bl	8001b8c <__swsetup_r>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d0d5      	beq.n	8001b30 <__swbuf_r+0x20>
 8001b84:	f04f 37ff 	mov.w	r7, #4294967295
 8001b88:	e7f4      	b.n	8001b74 <__swbuf_r+0x64>
	...

08001b8c <__swsetup_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <__swsetup_r+0xac>)
 8001b90:	4605      	mov	r5, r0
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	460c      	mov	r4, r1
 8001b96:	b118      	cbz	r0, 8001ba0 <__swsetup_r+0x14>
 8001b98:	6a03      	ldr	r3, [r0, #32]
 8001b9a:	b90b      	cbnz	r3, 8001ba0 <__swsetup_r+0x14>
 8001b9c:	f7ff fa3c 	bl	8001018 <__sinit>
 8001ba0:	89a3      	ldrh	r3, [r4, #12]
 8001ba2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ba6:	0718      	lsls	r0, r3, #28
 8001ba8:	d422      	bmi.n	8001bf0 <__swsetup_r+0x64>
 8001baa:	06d9      	lsls	r1, r3, #27
 8001bac:	d407      	bmi.n	8001bbe <__swsetup_r+0x32>
 8001bae:	2309      	movs	r3, #9
 8001bb0:	602b      	str	r3, [r5, #0]
 8001bb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bba:	81a3      	strh	r3, [r4, #12]
 8001bbc:	e034      	b.n	8001c28 <__swsetup_r+0x9c>
 8001bbe:	0758      	lsls	r0, r3, #29
 8001bc0:	d512      	bpl.n	8001be8 <__swsetup_r+0x5c>
 8001bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bc4:	b141      	cbz	r1, 8001bd8 <__swsetup_r+0x4c>
 8001bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bca:	4299      	cmp	r1, r3
 8001bcc:	d002      	beq.n	8001bd4 <__swsetup_r+0x48>
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f7ff fb2a 	bl	8001228 <_free_r>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6363      	str	r3, [r4, #52]	; 0x34
 8001bd8:	89a3      	ldrh	r3, [r4, #12]
 8001bda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bde:	81a3      	strh	r3, [r4, #12]
 8001be0:	2300      	movs	r3, #0
 8001be2:	6063      	str	r3, [r4, #4]
 8001be4:	6923      	ldr	r3, [r4, #16]
 8001be6:	6023      	str	r3, [r4, #0]
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	6923      	ldr	r3, [r4, #16]
 8001bf2:	b94b      	cbnz	r3, 8001c08 <__swsetup_r+0x7c>
 8001bf4:	89a3      	ldrh	r3, [r4, #12]
 8001bf6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfe:	d003      	beq.n	8001c08 <__swsetup_r+0x7c>
 8001c00:	4621      	mov	r1, r4
 8001c02:	4628      	mov	r0, r5
 8001c04:	f000 f85d 	bl	8001cc2 <__smakebuf_r>
 8001c08:	89a0      	ldrh	r0, [r4, #12]
 8001c0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c0e:	f010 0301 	ands.w	r3, r0, #1
 8001c12:	d00a      	beq.n	8001c2a <__swsetup_r+0x9e>
 8001c14:	2300      	movs	r3, #0
 8001c16:	60a3      	str	r3, [r4, #8]
 8001c18:	6963      	ldr	r3, [r4, #20]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	61a3      	str	r3, [r4, #24]
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	b943      	cbnz	r3, 8001c34 <__swsetup_r+0xa8>
 8001c22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c26:	d1c4      	bne.n	8001bb2 <__swsetup_r+0x26>
 8001c28:	bd38      	pop	{r3, r4, r5, pc}
 8001c2a:	0781      	lsls	r1, r0, #30
 8001c2c:	bf58      	it	pl
 8001c2e:	6963      	ldrpl	r3, [r4, #20]
 8001c30:	60a3      	str	r3, [r4, #8]
 8001c32:	e7f4      	b.n	8001c1e <__swsetup_r+0x92>
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7f7      	b.n	8001c28 <__swsetup_r+0x9c>
 8001c38:	200000b0 	.word	0x200000b0

08001c3c <_sbrk_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	2300      	movs	r3, #0
 8001c40:	4d05      	ldr	r5, [pc, #20]	; (8001c58 <_sbrk_r+0x1c>)
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	602b      	str	r3, [r5, #0]
 8001c48:	f7ff f8fa 	bl	8000e40 <_sbrk>
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	d102      	bne.n	8001c56 <_sbrk_r+0x1a>
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	b103      	cbz	r3, 8001c56 <_sbrk_r+0x1a>
 8001c54:	6023      	str	r3, [r4, #0]
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
 8001c58:	20000278 	.word	0x20000278

08001c5c <memchr>:
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b510      	push	{r4, lr}
 8001c60:	b2c9      	uxtb	r1, r1
 8001c62:	4402      	add	r2, r0
 8001c64:	4293      	cmp	r3, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	d101      	bne.n	8001c6e <memchr+0x12>
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	e003      	b.n	8001c76 <memchr+0x1a>
 8001c6e:	7804      	ldrb	r4, [r0, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	428c      	cmp	r4, r1
 8001c74:	d1f6      	bne.n	8001c64 <memchr+0x8>
 8001c76:	bd10      	pop	{r4, pc}

08001c78 <__swhatbuf_r>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c80:	4615      	mov	r5, r2
 8001c82:	2900      	cmp	r1, #0
 8001c84:	461e      	mov	r6, r3
 8001c86:	b096      	sub	sp, #88	; 0x58
 8001c88:	da0c      	bge.n	8001ca4 <__swhatbuf_r+0x2c>
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c92:	bf0c      	ite	eq
 8001c94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001c98:	2340      	movne	r3, #64	; 0x40
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	6031      	str	r1, [r6, #0]
 8001c9e:	602b      	str	r3, [r5, #0]
 8001ca0:	b016      	add	sp, #88	; 0x58
 8001ca2:	bd70      	pop	{r4, r5, r6, pc}
 8001ca4:	466a      	mov	r2, sp
 8001ca6:	f000 f849 	bl	8001d3c <_fstat_r>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	dbed      	blt.n	8001c8a <__swhatbuf_r+0x12>
 8001cae:	9901      	ldr	r1, [sp, #4]
 8001cb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001cb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001cb8:	4259      	negs	r1, r3
 8001cba:	4159      	adcs	r1, r3
 8001cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc0:	e7eb      	b.n	8001c9a <__swhatbuf_r+0x22>

08001cc2 <__smakebuf_r>:
 8001cc2:	898b      	ldrh	r3, [r1, #12]
 8001cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cc6:	079d      	lsls	r5, r3, #30
 8001cc8:	4606      	mov	r6, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	d507      	bpl.n	8001cde <__smakebuf_r+0x1c>
 8001cce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cd2:	6023      	str	r3, [r4, #0]
 8001cd4:	6123      	str	r3, [r4, #16]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	6163      	str	r3, [r4, #20]
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
 8001cde:	466a      	mov	r2, sp
 8001ce0:	ab01      	add	r3, sp, #4
 8001ce2:	f7ff ffc9 	bl	8001c78 <__swhatbuf_r>
 8001ce6:	9900      	ldr	r1, [sp, #0]
 8001ce8:	4605      	mov	r5, r0
 8001cea:	4630      	mov	r0, r6
 8001cec:	f7ff fb04 	bl	80012f8 <_malloc_r>
 8001cf0:	b948      	cbnz	r0, 8001d06 <__smakebuf_r+0x44>
 8001cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf6:	059a      	lsls	r2, r3, #22
 8001cf8:	d4ef      	bmi.n	8001cda <__smakebuf_r+0x18>
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	81a3      	strh	r3, [r4, #12]
 8001d04:	e7e3      	b.n	8001cce <__smakebuf_r+0xc>
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	6020      	str	r0, [r4, #0]
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0e:	81a3      	strh	r3, [r4, #12]
 8001d10:	9b00      	ldr	r3, [sp, #0]
 8001d12:	6120      	str	r0, [r4, #16]
 8001d14:	6163      	str	r3, [r4, #20]
 8001d16:	9b01      	ldr	r3, [sp, #4]
 8001d18:	b15b      	cbz	r3, 8001d32 <__smakebuf_r+0x70>
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d20:	f000 f81e 	bl	8001d60 <_isatty_r>
 8001d24:	b128      	cbz	r0, 8001d32 <__smakebuf_r+0x70>
 8001d26:	89a3      	ldrh	r3, [r4, #12]
 8001d28:	f023 0303 	bic.w	r3, r3, #3
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	81a3      	strh	r3, [r4, #12]
 8001d32:	89a3      	ldrh	r3, [r4, #12]
 8001d34:	431d      	orrs	r5, r3
 8001d36:	81a5      	strh	r5, [r4, #12]
 8001d38:	e7cf      	b.n	8001cda <__smakebuf_r+0x18>
	...

08001d3c <_fstat_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	2300      	movs	r3, #0
 8001d40:	4d06      	ldr	r5, [pc, #24]	; (8001d5c <_fstat_r+0x20>)
 8001d42:	4604      	mov	r4, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	602b      	str	r3, [r5, #0]
 8001d4a:	f7ff f853 	bl	8000df4 <_fstat>
 8001d4e:	1c43      	adds	r3, r0, #1
 8001d50:	d102      	bne.n	8001d58 <_fstat_r+0x1c>
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	b103      	cbz	r3, 8001d58 <_fstat_r+0x1c>
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	bd38      	pop	{r3, r4, r5, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000278 	.word	0x20000278

08001d60 <_isatty_r>:
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	2300      	movs	r3, #0
 8001d64:	4d05      	ldr	r5, [pc, #20]	; (8001d7c <_isatty_r+0x1c>)
 8001d66:	4604      	mov	r4, r0
 8001d68:	4608      	mov	r0, r1
 8001d6a:	602b      	str	r3, [r5, #0]
 8001d6c:	f7ff f851 	bl	8000e12 <_isatty>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d102      	bne.n	8001d7a <_isatty_r+0x1a>
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	b103      	cbz	r3, 8001d7a <_isatty_r+0x1a>
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	bd38      	pop	{r3, r4, r5, pc}
 8001d7c:	20000278 	.word	0x20000278

08001d80 <_init>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr

08001d8c <_fini>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr
