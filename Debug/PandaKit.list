
PandaKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b5c  08000b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b5c  08000b5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b5c  08000b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b5c  08000b5c  00010b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b60  08000b60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08000b70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000b70  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012a2  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000660  00000000  00000000  0002131a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012b  00000000  00000000  00021b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f0f  00000000  00000000  00021c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002243  00000000  00000000  00023b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008065  00000000  00000000  00025d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000494  00000000  00000000  0002ddec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0002e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ad8 	.word	0x08000ad8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000ad8 	.word	0x08000ad8

08000170 <WriteInsterction>:

/* check mode is 4 bit or 8 bit */

#elif LCD_MODE==_4_BIT

static void WriteInsterction(uint8_t ins) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, LOW_O);
 800017a:	2200      	movs	r2, #0
 800017c:	210b      	movs	r1, #11
 800017e:	2000      	movs	r0, #0
 8000180:	f000 f9ca 	bl	8000518 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 7));
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	09db      	lsrs	r3, r3, #7
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	210c      	movs	r1, #12
 800018e:	2001      	movs	r0, #1
 8000190:	f000 f9c2 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 6));
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	099b      	lsrs	r3, r3, #6
 8000198:	b2db      	uxtb	r3, r3
 800019a:	f003 0301 	and.w	r3, r3, #1
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	461a      	mov	r2, r3
 80001a2:	210d      	movs	r1, #13
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 f9b7 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 5));
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	095b      	lsrs	r3, r3, #5
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	f003 0301 	and.w	r3, r3, #1
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	461a      	mov	r2, r3
 80001b8:	210e      	movs	r1, #14
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 f9ac 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 4));
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	091b      	lsrs	r3, r3, #4
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	f003 0301 	and.w	r3, r3, #1
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	461a      	mov	r2, r3
 80001ce:	210f      	movs	r1, #15
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 f9a1 	bl	8000518 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2108      	movs	r1, #8
 80001da:	2000      	movs	r0, #0
 80001dc:	f000 f99c 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f000 facf 	bl	8000784 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f994 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fac7 	bl	8000784 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(ins, 3));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	08db      	lsrs	r3, r3, #3
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	b2db      	uxtb	r3, r3
 8000202:	461a      	mov	r2, r3
 8000204:	210c      	movs	r1, #12
 8000206:	2001      	movs	r0, #1
 8000208:	f000 f986 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(ins, 2));
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	089b      	lsrs	r3, r3, #2
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	b2db      	uxtb	r3, r3
 8000218:	461a      	mov	r2, r3
 800021a:	210d      	movs	r1, #13
 800021c:	2001      	movs	r0, #1
 800021e:	f000 f97b 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(ins, 1));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	085b      	lsrs	r3, r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	461a      	mov	r2, r3
 8000230:	210e      	movs	r1, #14
 8000232:	2001      	movs	r0, #1
 8000234:	f000 f970 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(ins, 0));
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	210f      	movs	r1, #15
 8000244:	2001      	movs	r0, #1
 8000246:	f000 f967 	bl	8000518 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800024a:	2201      	movs	r2, #1
 800024c:	2108      	movs	r1, #8
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f962 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fa95 	bl	8000784 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800025a:	2200      	movs	r2, #0
 800025c:	2108      	movs	r1, #8
 800025e:	2000      	movs	r0, #0
 8000260:	f000 f95a 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fa8d 	bl	8000784 <SysTick_vDelayms>

}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <WriteData>:

static void WriteData(uint8_t data) {
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
 8000278:	4603      	mov	r3, r0
 800027a:	71fb      	strb	r3, [r7, #7]

	GPIO_RETURNtPinOut(LCD_RS_PORT, LCD_RS_PIN, High_O);
 800027c:	2201      	movs	r2, #1
 800027e:	210b      	movs	r1, #11
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f949 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 7));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	09db      	lsrs	r3, r3, #7
 800028a:	b2db      	uxtb	r3, r3
 800028c:	461a      	mov	r2, r3
 800028e:	210c      	movs	r1, #12
 8000290:	2001      	movs	r0, #1
 8000292:	f000 f941 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 6));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	099b      	lsrs	r3, r3, #6
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	210d      	movs	r1, #13
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 f936 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 5));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	210e      	movs	r1, #14
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 f92b 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 4));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	091b      	lsrs	r3, r3, #4
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	210f      	movs	r1, #15
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 f920 	bl	8000518 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 80002d8:	2201      	movs	r2, #1
 80002da:	2108      	movs	r1, #8
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 f91b 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fa4e 	bl	8000784 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2108      	movs	r1, #8
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f913 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fa46 	bl	8000784 <SysTick_vDelayms>

	GPIO_RETURNtPinOut(D7_PORT, D7, READ_BIT(data, 3));
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	08db      	lsrs	r3, r3, #3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	461a      	mov	r2, r3
 8000306:	210c      	movs	r1, #12
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f905 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D6_PORT, D6, READ_BIT(data, 2));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	089b      	lsrs	r3, r3, #2
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	210d      	movs	r1, #13
 800031e:	2001      	movs	r0, #1
 8000320:	f000 f8fa 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D5_PORT, D5, READ_BIT(data, 1));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	085b      	lsrs	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	461a      	mov	r2, r3
 8000332:	210e      	movs	r1, #14
 8000334:	2001      	movs	r0, #1
 8000336:	f000 f8ef 	bl	8000518 <GPIO_RETURNtPinOut>
	GPIO_RETURNtPinOut(D4_PORT, D4, READ_BIT(data, 0));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	210f      	movs	r1, #15
 8000346:	2001      	movs	r0, #1
 8000348:	f000 f8e6 	bl	8000518 <GPIO_RETURNtPinOut>

	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, High_O);
 800034c:	2201      	movs	r2, #1
 800034e:	2108      	movs	r1, #8
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f8e1 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f000 fa14 	bl	8000784 <SysTick_vDelayms>
	GPIO_RETURNtPinOut(LCD_E_PORT, LCD_E_PIN, LOW_O);
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	2000      	movs	r0, #0
 8000362:	f000 f8d9 	bl	8000518 <GPIO_RETURNtPinOut>
	SysTick_vDelayms(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fa0c 	bl	8000784 <SysTick_vDelayms>

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <LCD_Init>:

void LCD_Init(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	SysTick_vDelayms(50);
 8000378:	2032      	movs	r0, #50	; 0x32
 800037a:	f000 fa03 	bl	8000784 <SysTick_vDelayms>
	WriteInsterction(0x02);
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff fef6 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x28); //screen on 4 bit mode  with 2 line 5*7
 8000384:	2028      	movs	r0, #40	; 0x28
 8000386:	f7ff fef3 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x0c); //cursor off 0x0e ,0x0f
 800038a:	200c      	movs	r0, #12
 800038c:	f7ff fef0 	bl	8000170 <WriteInsterction>
	WriteInsterction(0x01); //clear screen
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff feed 	bl	8000170 <WriteInsterction>
	SysTick_vDelayms(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 f9f4 	bl	8000784 <SysTick_vDelayms>
	WriteInsterction(0x06); //increase DDRAM address no shift
 800039c:	2006      	movs	r0, #6
 800039e:	f7ff fee7 	bl	8000170 <WriteInsterction>

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <LCD_WriteChar>:

#endif

void LCD_WriteChar(uint8_t ch) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	4603      	mov	r3, r0
 80003ae:	71fb      	strb	r3, [r7, #7]

	WriteData(ch);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff5d 	bl	8000272 <WriteData>

}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <LCD_Clear>:

void LCD_Clear(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

	WriteInsterction(0x01);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff fed3 	bl	8000170 <WriteInsterction>

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <LCD_WriteString>:

	}

}

void LCD_WriteString(uint8_t *str) {
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b084      	sub	sp, #16
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]

	uint8_t *ptr = str;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	60fb      	str	r3, [r7, #12]

	while (*ptr) {
 80003da:	e007      	b.n	80003ec <LCD_WriteString+0x1e>

		LCD_WriteChar(*ptr);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ffe0 	bl	80003a6 <LCD_WriteChar>
		ptr++;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
	while (*ptr) {
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f3      	bne.n	80003dc <LCD_WriteString+0xe>

	}

}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <LCD_GoTo>:

	WriteInsterction(0x02);

}

void LCD_GoTo(uint8_t line, uint8_t cell) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	4603      	mov	r3, r0
 8000406:	460a      	mov	r2, r1
 8000408:	71fb      	strb	r3, [r7, #7]
 800040a:	4613      	mov	r3, r2
 800040c:	71bb      	strb	r3, [r7, #6]

	if (line == 0) {
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d106      	bne.n	8000422 <LCD_GoTo+0x24>

		WriteInsterction(0x80 + cell);
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	3b80      	subs	r3, #128	; 0x80
 8000418:	b2db      	uxtb	r3, r3
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff fea8 	bl	8000170 <WriteInsterction>

		WriteInsterction((0x80 + 0x40) + cell);

	}

}
 8000420:	e008      	b.n	8000434 <LCD_GoTo+0x36>
	} else if (line == 1) {
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d105      	bne.n	8000434 <LCD_GoTo+0x36>
		WriteInsterction((0x80 + 0x40) + cell);
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	3b40      	subs	r3, #64	; 0x40
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe9e 	bl	8000170 <WriteInsterction>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <GPIO_RETURNtPinInit>:
#include "GPIO/inc/GPIO_interface.h"


static GPIO_r *GPIO_ArraysOfPtr[Number_OfPorts] = { GPIOA, GPIOB, GPIOC };

RETURN_t GPIO_RETURNtPinInit(GPIO_PinConfig *Localptr_PinConfig) {
 800043c:	b480      	push	{r7}
 800043e:	b089      	sub	sp, #36	; 0x24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

	RETURN_t LocalRetState = OK_ret;
 8000444:	2301      	movs	r3, #1
 8000446:	77fb      	strb	r3, [r7, #31]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
			&& Localptr_PinConfig->Port_Name <= GPIO_PORTC)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
	if ((Localptr_PinConfig->Port_Name >= GPIO_PORTA
 800044c:	2b02      	cmp	r3, #2
 800044e:	d903      	bls.n	8000458 <GPIO_RETURNtPinInit+0x1c>
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	785b      	ldrb	r3, [r3, #1]
			|| (Localptr_PinConfig->PIN_Name >= GPIO_Pin0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d155      	bne.n	8000504 <GPIO_RETURNtPinInit+0xc8>

		GPIO_r *LocalGPIO_Ptr = GPIO_ArraysOfPtr[Localptr_PinConfig->Port_Name];
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <GPIO_RETURNtPinInit+0xd8>)
 8000460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000464:	61bb      	str	r3, [r7, #24]
		/* configure mode */
		MOD_NUM_OF_BITS(LocalGPIO_Ptr->CR[(Localptr_PinConfig->PIN_Name) / 8],
 8000466:	230f      	movs	r3, #15
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	785b      	ldrb	r3, [r3, #1]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	697a      	ldr	r2, [r7, #20]
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	613b      	str	r3, [r7, #16]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	461a      	mov	r2, r3
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	401a      	ands	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	785b      	ldrb	r3, [r3, #1]
 800048c:	f003 0307 	and.w	r3, r3, #7
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	785b      	ldrb	r3, [r3, #1]
 800049c:	08db      	lsrs	r3, r3, #3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	401a      	ands	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	785b      	ldrb	r3, [r3, #1]
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	431a      	orrs	r2, r3
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				((Localptr_PinConfig->PIN_Name) % 8) * 4, 4,
				Localptr_PinConfig->PIN_MODE);
		/* configure set and reset */
		if (Localptr_PinConfig->PIN_MODE == High_O) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	789b      	ldrb	r3, [r3, #2]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d10a      	bne.n	80004de <GPIO_RETURNtPinInit+0xa2>

			SET_BIT(LocalGPIO_Ptr->BSRR , Localptr_PinConfig->PIN_Name);
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7852      	ldrb	r2, [r2, #1]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	431a      	orrs	r2, r3
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 80004dc:	e014      	b.n	8000508 <GPIO_RETURNtPinInit+0xcc>

		} else if (Localptr_PinConfig->PIN_MODE == LOW_O) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10b      	bne.n	80004fe <GPIO_RETURNtPinInit+0xc2>

			SET_BIT(LocalGPIO_Ptr->BSRR , ((Localptr_PinConfig->PIN_Name)+GPIO_PortsOutOfRange) );
 80004e6:	69bb      	ldr	r3, [r7, #24]
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7852      	ldrb	r2, [r2, #1]
 80004ee:	3203      	adds	r2, #3
 80004f0:	2101      	movs	r1, #1
 80004f2:	fa01 f202 	lsl.w	r2, r1, r2
 80004f6:	431a      	orrs	r2, r3
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	611a      	str	r2, [r3, #16]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 80004fc:	e004      	b.n	8000508 <GPIO_RETURNtPinInit+0xcc>

		} else {
			LocalRetState = ERROR_ret;
 80004fe:	2300      	movs	r3, #0
 8000500:	77fb      	strb	r3, [r7, #31]
					&& Localptr_PinConfig->PIN_Name <= GPIO_Pin0)) {
 8000502:	e001      	b.n	8000508 <GPIO_RETURNtPinInit+0xcc>
		}

	} else {

		LocalRetState = ERROR_ret;
 8000504:	2300      	movs	r3, #0
 8000506:	77fb      	strb	r3, [r7, #31]
	}

	return LocalRetState;
 8000508:	7ffb      	ldrb	r3, [r7, #31]

}
 800050a:	4618      	mov	r0, r3
 800050c:	3724      	adds	r7, #36	; 0x24
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000000 	.word	0x20000000

08000518 <GPIO_RETURNtPinOut>:
 * @param  Local_PortName: The GPIO port to which the pin belongs.
 * @param  Local_PinName: The specific pin in the port.
 * @param  Local_OutVal: The output value to be set (High_O or LOW_O).
 * @retval RETURN_t: Indicates the success or failure of the operation.
 */
RETURN_t GPIO_RETURNtPinOut(GPIO_Ports Local_PortName, GPIO_Pins Local_PinName,GPIO_PinStateOut Local_OutVal) {
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	460b      	mov	r3, r1
 8000524:	71bb      	strb	r3, [r7, #6]
 8000526:	4613      	mov	r3, r2
 8000528:	717b      	strb	r3, [r7, #5]

	RETURN_t local_RETURN_t = OK_ret;
 800052a:	2301      	movs	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
	if (Local_PortName >= GPIO_PortsOutOfRange|| Local_PinName >= GPIO_PinsOutOfRange) {
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d802      	bhi.n	800053a <GPIO_RETURNtPinOut+0x22>
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d902      	bls.n	8000540 <GPIO_RETURNtPinOut+0x28>

		local_RETURN_t = ERROR_ret;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e02a      	b.n	8000596 <GPIO_RETURNtPinOut+0x7e>

	} else {

		if (Local_OutVal == High_O) {
 8000540:	797b      	ldrb	r3, [r7, #5]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d110      	bne.n	8000568 <GPIO_RETURNtPinOut+0x50>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,Local_PinName) ;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <GPIO_RETURNtPinOut+0x8c>)
 800054a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054e:	691a      	ldr	r2, [r3, #16]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	4618      	mov	r0, r3
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4911      	ldr	r1, [pc, #68]	; (80005a4 <GPIO_RETURNtPinOut+0x8c>)
 800055e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000562:	4302      	orrs	r2, r0
 8000564:	611a      	str	r2, [r3, #16]
 8000566:	e016      	b.n	8000596 <GPIO_RETURNtPinOut+0x7e>

		}

		else if (Local_OutVal == LOW_O) {
 8000568:	797b      	ldrb	r3, [r7, #5]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d111      	bne.n	8000592 <GPIO_RETURNtPinOut+0x7a>

			SET_BIT(GPIO_ArraysOfPtr[Local_PortName]->BSRR ,(Local_PinName+GPIO_PinsOutOfRange) ) ;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <GPIO_RETURNtPinOut+0x8c>)
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	691a      	ldr	r2, [r3, #16]
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	3310      	adds	r3, #16
 800057c:	2101      	movs	r1, #1
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	4618      	mov	r0, r3
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4907      	ldr	r1, [pc, #28]	; (80005a4 <GPIO_RETURNtPinOut+0x8c>)
 8000588:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800058c:	4302      	orrs	r2, r0
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	e001      	b.n	8000596 <GPIO_RETURNtPinOut+0x7e>

		} else {

			local_RETURN_t = ERROR_ret;
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]

		}

	}

	return local_RETURN_t;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000

080005a8 <RCC_RETURNtInit>:
#include "RCC/inc/RCC_config.h"
#include "RCC/inc/RCC_private.h"



RETURN_t RCC_RETURNtInit(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	b097      	sub	sp, #92	; 0x5c
 80005ac:	af00      	add	r7, sp, #0

    RETURN_t Local_error_state = OK_ret ;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Configuring ADC prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 14, 2, ADC_PRESCALER);
 80005b4:	2303      	movs	r3, #3
 80005b6:	653b      	str	r3, [r7, #80]	; 0x50
 80005b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005ba:	039b      	lsls	r3, r3, #14
 80005bc:	43db      	mvns	r3, r3
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005c2:	039b      	lsls	r3, r3, #14
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80005c8:	4b43      	ldr	r3, [pc, #268]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ce:	401a      	ands	r2, r3
 80005d0:	4941      	ldr	r1, [pc, #260]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80005d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005d4:	4313      	orrs	r3, r2
 80005d6:	604b      	str	r3, [r1, #4]

    /* Configuring APB2 high-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 11, 3, APB2_prescaler);
 80005d8:	2307      	movs	r3, #7
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
 80005dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005de:	02db      	lsls	r3, r3, #11
 80005e0:	43db      	mvns	r3, r3
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
 80005e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e6:	02db      	lsls	r3, r3, #11
 80005e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005f4:	401a      	ands	r2, r3
 80005f6:	4938      	ldr	r1, [pc, #224]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80005f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005fa:	4313      	orrs	r3, r2
 80005fc:	604b      	str	r3, [r1, #4]

    /* Configuring APB1 low-speed prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 8, 3, APB1_prescaler);
 80005fe:	2307      	movs	r3, #7
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
 8000602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	43db      	mvns	r3, r3
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
 800060a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <RCC_RETURNtInit+0x130>)
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800061a:	401a      	ands	r2, r3
 800061c:	492e      	ldr	r1, [pc, #184]	; (80006d8 <RCC_RETURNtInit+0x130>)
 800061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000620:	4313      	orrs	r3, r2
 8000622:	604b      	str	r3, [r1, #4]

    /* Configuring AHB prescaler */
    MOD_NUM_OF_BITS(RCC->CFGR, 4, 4, AHP_prescaler);
 8000624:	230f      	movs	r3, #15
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	43db      	mvns	r3, r3
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <RCC_RETURNtInit+0x130>)
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063a:	401a      	ands	r2, r3
 800063c:	4926      	ldr	r1, [pc, #152]	; (80006d8 <RCC_RETURNtInit+0x130>)
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	4313      	orrs	r3, r2
 8000642:	604b      	str	r3, [r1, #4]

    /* Configuring Microcontroller clock output */
    MOD_NUM_OF_BITS(RCC->CFGR, 24, 3, MCO_clk);
 8000644:	2307      	movs	r3, #7
 8000646:	623b      	str	r3, [r7, #32]
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	061b      	lsls	r3, r3, #24
 800064c:	43db      	mvns	r3, r3
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	6a3b      	ldr	r3, [r7, #32]
 8000652:	061b      	lsls	r3, r3, #24
 8000654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <RCC_RETURNtInit+0x130>)
 800065c:	685a      	ldr	r2, [r3, #4]
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	401a      	ands	r2, r3
 8000662:	491d      	ldr	r1, [pc, #116]	; (80006d8 <RCC_RETURNtInit+0x130>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	604b      	str	r3, [r1, #4]

    /* Configuring clock security system */
    MOD_NUM_OF_BITS(RCC->CR, 19, 0, Clock_security);
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	04db      	lsls	r3, r3, #19
 8000672:	43db      	mvns	r3, r3
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	04db      	lsls	r3, r3, #19
 800067a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <RCC_RETURNtInit+0x130>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	401a      	ands	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	; (80006d8 <RCC_RETURNtInit+0x130>)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4313      	orrs	r3, r2
 800068e:	600b      	str	r3, [r1, #0]

    /* Configuring main clock source */
    #if MAIN_CLK == HSI
        SET_BIT(RCC->CR, 0);
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <RCC_RETURNtInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <RCC_RETURNtInit+0x130>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]
        while(!READ_BIT(RCC->CR, 1));
 800069c:	bf00      	nop
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <RCC_RETURNtInit+0xf6>
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 0);
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	43db      	mvns	r3, r3
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	401a      	ands	r2, r3
 80006c0:	4905      	ldr	r1, [pc, #20]	; (80006d8 <RCC_RETURNtInit+0x130>)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	604b      	str	r3, [r1, #4]
        MOD_NUM_OF_BITS(RCC->CFGR, 0, 2, 2);
        /* Turning off HSI */
        CLEAR_BIT(RCC->CR, 0);
    #endif

    return Local_error_state;
 80006c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	375c      	adds	r7, #92	; 0x5c
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <RCC_RETURNtPeripheralEn>:

/*  functions for enabling various peripherals */


RETURN_t RCC_RETURNtPeripheralEn(uint8_t BusType, uint8_t PeripheralName) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
    RETURN_t Local_error_state = OK_ret ;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]


	switch(BusType){
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d01c      	beq.n	8000730 <RCC_RETURNtPeripheralEn+0x54>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	dc25      	bgt.n	8000746 <RCC_RETURNtPeripheralEn+0x6a>
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <RCC_RETURNtPeripheralEn+0x28>
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d00b      	beq.n	800071a <RCC_RETURNtPeripheralEn+0x3e>
 8000702:	e020      	b.n	8000746 <RCC_RETURNtPeripheralEn+0x6a>

	case AHB :

		SET_BIT(RCC->AHBENR ,PeripheralName ) ;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <RCC_RETURNtPeripheralEn+0x7c>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	79ba      	ldrb	r2, [r7, #6]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	4611      	mov	r1, r2
 8000712:	4a11      	ldr	r2, [pc, #68]	; (8000758 <RCC_RETURNtPeripheralEn+0x7c>)
 8000714:	430b      	orrs	r3, r1
 8000716:	6153      	str	r3, [r2, #20]

		break ;
 8000718:	e018      	b.n	800074c <RCC_RETURNtPeripheralEn+0x70>
	case APB1 :
		SET_BIT(RCC->APB1ENR ,PeripheralName ) ;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <RCC_RETURNtPeripheralEn+0x7c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <RCC_RETURNtPeripheralEn+0x7c>)
 800072a:	430b      	orrs	r3, r1
 800072c:	61d3      	str	r3, [r2, #28]

		break ;
 800072e:	e00d      	b.n	800074c <RCC_RETURNtPeripheralEn+0x70>

	case APB2 :
		SET_BIT(RCC->APB2ENR ,PeripheralName ) ;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <RCC_RETURNtPeripheralEn+0x7c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <RCC_RETURNtPeripheralEn+0x7c>)
 8000740:	430b      	orrs	r3, r1
 8000742:	6193      	str	r3, [r2, #24]
		break  ;
 8000744:	e002      	b.n	800074c <RCC_RETURNtPeripheralEn+0x70>

	default :
		Local_error_state = ERROR_ret ;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
		break ;
 800074a:	bf00      	nop

	}
	return  Local_error_state  ;
 800074c:	7bfb      	ldrb	r3, [r7, #15]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000

0800075c <SysTick_vInit>:

#include "SysTick/inc/SysTick_private.h"
#include "SysTick/inc/SysTick_interface.h"
#include "SysTick/inc/SysTick_config.h"

void SysTick_vInit(void) {
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

	/* disable SysTick exception */
	CLEAR_BIT(SysTick->CTRL, 1);
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <SysTick_vInit+0x24>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <SysTick_vInit+0x24>)
 8000766:	f023 0302 	bic.w	r3, r3, #2
 800076a:	6013      	str	r3, [r2, #0]
#if SysTick_ClkSource==SysTick_AHB_8
	CLEAR_BIT(SysTick->CTRL, 2);
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_vInit+0x24>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <SysTick_vInit+0x24>)
 8000772:	f023 0304 	bic.w	r3, r3, #4
 8000776:	6013      	str	r3, [r2, #0]
#elif SysTick_ClkSource==SysTick_AHB
	SET_BIT(SysTick->CTRL  , 2 ) ;

#endif

}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e010 	.word	0xe000e010

08000784 <SysTick_vDelayms>:

	}

}

void SysTick_vDelayms(uint32_t local_time) {
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

	local_time *= 1000;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	607b      	str	r3, [r7, #4]

	if (local_time < (1 << 25)) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800079e:	d216      	bcs.n	80007ce <SysTick_vDelayms+0x4a>

		SysTick->LOAD = local_time;
 80007a0:	4a35      	ldr	r2, [pc, #212]	; (8000878 <SysTick_vDelayms+0xf4>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6053      	str	r3, [r2, #4]

		SET_BIT(SysTick->CTRL, 0);
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <SysTick_vDelayms+0xf4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <SysTick_vDelayms+0xf4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6013      	str	r3, [r2, #0]

		while (!READ_BIT(SysTick->CTRL, 16))
 80007b2:	bf00      	nop
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <SysTick_vDelayms+0xf4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f9      	beq.n	80007b4 <SysTick_vDelayms+0x30>
			;

		CLEAR_BIT(SysTick->CTRL, 0);
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <SysTick_vDelayms+0xf4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <SysTick_vDelayms+0xf4>)
 80007c6:	f023 0301 	bic.w	r3, r3, #1
 80007ca:	6013      	str	r3, [r2, #0]

		}

	}

}
 80007cc:	e04e      	b.n	800086c <SysTick_vDelayms+0xe8>
	else if (local_time > (1 << 25)) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007d4:	d94a      	bls.n	800086c <SysTick_vDelayms+0xe8>
		uint32_t overfolow = local_time / 0xffffff;
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	f240 1301 	movw	r3, #257	; 0x101
 80007dc:	fba3 1302 	umull	r1, r3, r3, r2
 80007e0:	1ad2      	subs	r2, r2, r3
 80007e2:	0852      	lsrs	r2, r2, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	0ddb      	lsrs	r3, r3, #23
 80007e8:	613b      	str	r3, [r7, #16]
		uint32_t rem = local_time / 0xffffff;
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	f240 1301 	movw	r3, #257	; 0x101
 80007f0:	fba3 1302 	umull	r1, r3, r3, r2
 80007f4:	1ad2      	subs	r2, r2, r3
 80007f6:	0852      	lsrs	r2, r2, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	0ddb      	lsrs	r3, r3, #23
 80007fc:	60fb      	str	r3, [r7, #12]
		SysTick->LOAD = rem;
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6053      	str	r3, [r2, #4]
		SET_BIT(SysTick->CTRL, 0);
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <SysTick_vDelayms+0xf4>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6013      	str	r3, [r2, #0]
		while (!READ_BIT(SysTick->CTRL, 16))
 8000810:	bf00      	nop
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <SysTick_vDelayms+0x8e>
		CLEAR_BIT(SysTick->CTRL, 0);
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000824:	f023 0301 	bic.w	r3, r3, #1
 8000828:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e019      	b.n	8000864 <SysTick_vDelayms+0xe0>
			SysTick->LOAD = 0xffffff;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000832:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000836:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <SysTick_vDelayms+0xf4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <SysTick_vDelayms+0xf4>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]
			while (!READ_BIT(SysTick->CTRL, 16))
 8000844:	bf00      	nop
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f9      	beq.n	8000846 <SysTick_vDelayms+0xc2>
			CLEAR_BIT(SysTick->CTRL, 0);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <SysTick_vDelayms+0xf4>)
 8000858:	f023 0301 	bic.w	r3, r3, #1
 800085c:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < overfolow; i++) {
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d3e1      	bcc.n	8000830 <SysTick_vDelayms+0xac>
}
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <SysTick_Handler>:

	}

}

void SysTick_Handler(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

	if (Overflow_needFlag == 0) {
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SysTick_Handler+0x94>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10d      	bne.n	80008a4 <SysTick_Handler+0x28>

		/* stop timer */
		SET_BIT(SysTick->CTRL, 0);
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <SysTick_Handler+0x98>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <SysTick_Handler+0x98>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

		if (SysTickHandler_ptr != NULL) {
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <SysTick_Handler+0x9c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d037      	beq.n	800090c <SysTick_Handler+0x90>
			SysTickHandler_ptr();
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <SysTick_Handler+0x9c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4798      	blx	r3

		}

	}

}
 80008a2:	e033      	b.n	800090c <SysTick_Handler+0x90>
	} else if (Overflow_needFlag == 1) {
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <SysTick_Handler+0x94>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d12f      	bne.n	800090c <SysTick_Handler+0x90>
		CLEAR_BIT(SysTick->CTRL, 0);
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <SysTick_Handler+0x98>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <SysTick_Handler+0x98>)
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <SysTick_Handler+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e00e      	b.n	80008de <SysTick_Handler+0x62>
			SysTick->LOAD = 0xffffff;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <SysTick_Handler+0x98>)
 80008c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80008c6:	605a      	str	r2, [r3, #4]
			SET_BIT(SysTick->CTRL, 0);
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SysTick_Handler+0x98>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <SysTick_Handler+0x98>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]
		for ( i= 0; i < overflowInterrupt; i++) {
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <SysTick_Handler+0xa0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <SysTick_Handler+0xa0>)
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <SysTick_Handler+0xa0>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <SysTick_Handler+0xa4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3ea      	bcc.n	80008c0 <SysTick_Handler+0x44>
		if(i==(overflowInterrupt-1)){
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <SysTick_Handler+0xa4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <SysTick_Handler+0xa0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d109      	bne.n	800090c <SysTick_Handler+0x90>
			if (SysTickHandler_ptr != NULL) {
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <SysTick_Handler+0x9c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <SysTick_Handler+0x8a>
						SysTickHandler_ptr();
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SysTick_Handler+0x9c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4798      	blx	r3
			i=0 ;
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <SysTick_Handler+0xa0>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000028 	.word	0x20000028
 8000914:	e000e010 	.word	0xe000e010
 8000918:	20000030 	.word	0x20000030
 800091c:	20000034 	.word	0x20000034
 8000920:	2000002c 	.word	0x2000002c

08000924 <main>:
 * test all the compenents and check if any compnent fiekd
 *
 *
 */

int main() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0

	GPIO_PinConfig Pina2 = {
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <main+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	61fb      	str	r3, [r7, #28]

	GPIO_PORTA, GPIO_Pin2,
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb12 = { GPIO_PORTB, GPIO_Pin12,
 8000930:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <main+0xec>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	61bb      	str	r3, [r7, #24]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb13 = { GPIO_PORTB, GPIO_Pin13,
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <main+0xf0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	617b      	str	r3, [r7, #20]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb14 = { GPIO_PORTB, GPIO_Pin14,
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <main+0xf4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	613b      	str	r3, [r7, #16]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pinb15 = { GPIO_PORTB, GPIO_Pin15,
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <main+0xf8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	60fb      	str	r3, [r7, #12]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pina8 = { GPIO_PORTA, GPIO_Pin8,
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <main+0xfc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60bb      	str	r3, [r7, #8]
	GPIO_PinModeOutput_PP, LOW_O

	};
	GPIO_PinConfig Pina11 = { GPIO_PORTA, GPIO_Pin11,
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <main+0x100>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	607b      	str	r3, [r7, #4]
	GPIO_PinModeOutput_PP, LOW_O

	};

	RCC_RETURNtInit();
 8000954:	f7ff fe28 	bl	80005a8 <RCC_RETURNtInit>

	RCC_RETURNtPeripheralEn(APB2, PORTA_APB2_peripherals);
 8000958:	2102      	movs	r1, #2
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff febe 	bl	80006dc <RCC_RETURNtPeripheralEn>
	RCC_RETURNtPeripheralEn(APB2, PORTB_APB2_peripherals);
 8000960:	2103      	movs	r1, #3
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff feba 	bl	80006dc <RCC_RETURNtPeripheralEn>



	GPIO_RETURNtPinInit(&Pina2);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fd65 	bl	800043c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb12);
 8000972:	f107 0318 	add.w	r3, r7, #24
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd60 	bl	800043c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb13);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fd5b 	bl	800043c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb14);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fd56 	bl	800043c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pinb15);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd51 	bl	800043c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pina8);
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fd4c 	bl	800043c <GPIO_RETURNtPinInit>
	GPIO_RETURNtPinInit(&Pina11);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd48 	bl	800043c <GPIO_RETURNtPinInit>

	SysTick_vInit();
 80009ac:	f7ff fed6 	bl	800075c <SysTick_vInit>

	LCD_Init();
 80009b0:	f7ff fce0 	bl	8000374 <LCD_Init>
		GPIO_RETURNtPinToggle(GPIO_PORTA, GPIO_Pin2);

		SysTick_vDelayms(1000);
		*/

		LCD_WriteString("Hello Mohamed :)");
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <main+0x104>)
 80009b6:	f7ff fd0a 	bl	80003ce <LCD_WriteString>
		SysTick_vDelayms(2000);
 80009ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009be:	f7ff fee1 	bl	8000784 <SysTick_vDelayms>
		LCD_Clear() ;
 80009c2:	f7ff fcfd 	bl	80003c0 <LCD_Clear>
		LCD_WriteString("Keep going man ..");
 80009c6:	4819      	ldr	r0, [pc, #100]	; (8000a2c <main+0x108>)
 80009c8:	f7ff fd01 	bl	80003ce <LCD_WriteString>
		SysTick_vDelayms(2000);
 80009cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009d0:	f7ff fed8 	bl	8000784 <SysTick_vDelayms>
		LCD_Clear() ;
 80009d4:	f7ff fcf4 	bl	80003c0 <LCD_Clear>
		LCD_WriteString("Be strong ..");
 80009d8:	4815      	ldr	r0, [pc, #84]	; (8000a30 <main+0x10c>)
 80009da:	f7ff fcf8 	bl	80003ce <LCD_WriteString>
		SysTick_vDelayms(2000);
 80009de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009e2:	f7ff fecf 	bl	8000784 <SysTick_vDelayms>
		LCD_Clear() ;
 80009e6:	f7ff fceb 	bl	80003c0 <LCD_Clear>
		LCD_WriteString("Day you'll");
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <main+0x110>)
 80009ec:	f7ff fcef 	bl	80003ce <LCD_WriteString>
		LCD_GoTo(1, 0) ;
 80009f0:	2100      	movs	r1, #0
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff fd03 	bl	80003fe <LCD_GoTo>
		LCD_WriteString("be there ..");
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <main+0x114>)
 80009fa:	f7ff fce8 	bl	80003ce <LCD_WriteString>
		SysTick_vDelayms(2000);
 80009fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a02:	f7ff febf 	bl	8000784 <SysTick_vDelayms>
		LCD_Clear() ;
 8000a06:	f7ff fcdb 	bl	80003c0 <LCD_Clear>
		LCD_WriteString("Hello Mohamed :)");
 8000a0a:	e7d3      	b.n	80009b4 <main+0x90>
 8000a0c:	08000b40 	.word	0x08000b40
 8000a10:	08000b44 	.word	0x08000b44
 8000a14:	08000b48 	.word	0x08000b48
 8000a18:	08000b4c 	.word	0x08000b4c
 8000a1c:	08000b50 	.word	0x08000b50
 8000a20:	08000b54 	.word	0x08000b54
 8000a24:	08000b58 	.word	0x08000b58
 8000a28:	08000af0 	.word	0x08000af0
 8000a2c:	08000b04 	.word	0x08000b04
 8000a30:	08000b18 	.word	0x08000b18
 8000a34:	08000b28 	.word	0x08000b28
 8000a38:	08000b34 	.word	0x08000b34

08000a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a40:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6a:	f000 f811 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff ff59 	bl	8000924 <main>

08000a72 <LoopForever>:

LoopForever:
  b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   r0, =_estack
 8000a74:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a80:	08000b64 	.word	0x08000b64
  ldr r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a88:	20000038 	.word	0x20000038

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	2600      	movs	r6, #0
 8000a94:	4d0c      	ldr	r5, [pc, #48]	; (8000ac8 <__libc_init_array+0x38>)
 8000a96:	4c0d      	ldr	r4, [pc, #52]	; (8000acc <__libc_init_array+0x3c>)
 8000a98:	1b64      	subs	r4, r4, r5
 8000a9a:	10a4      	asrs	r4, r4, #2
 8000a9c:	42a6      	cmp	r6, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	f000 f81a 	bl	8000ad8 <_init>
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	4d0a      	ldr	r5, [pc, #40]	; (8000ad0 <__libc_init_array+0x40>)
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <__libc_init_array+0x44>)
 8000aaa:	1b64      	subs	r4, r4, r5
 8000aac:	10a4      	asrs	r4, r4, #2
 8000aae:	42a6      	cmp	r6, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab8:	4798      	blx	r3
 8000aba:	3601      	adds	r6, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac2:	4798      	blx	r3
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08000b5c 	.word	0x08000b5c
 8000acc:	08000b5c 	.word	0x08000b5c
 8000ad0:	08000b5c 	.word	0x08000b5c
 8000ad4:	08000b60 	.word	0x08000b60

08000ad8 <_init>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr

08000ae4 <_fini>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr
